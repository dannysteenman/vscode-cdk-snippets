{
    "accessanalyzer.CfnAnalyzer": {
        "body": [
            "accessanalyzer.CfnAnalyzer(self, \"${1:id}\", ",
            "        analyzerConfiguration={",
            "        },",
            "        analyzerName=${3:str},",
            "        archiveRules=[],",
            "        tags=[],",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: accessanalyzer.CfnAnalyzer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-accessanalyzer.CfnAnalyzer",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-accessanalyzer-analyzer",
        "scope": "python"
    },
    "acmpca.CfnCertificate": {
        "body": [
            "acmpca.CfnCertificate(self, \"${1:id}\", ",
            "        apiPassthrough={",
            "        },",
            "        certificateAuthorityArn=${3:str}, # Required",
            "        certificateSigningRequest=${4:str}, # Required",
            "        signingAlgorithm=${5:str}, # Required",
            "        templateArn=${6:str},",
            "        validity={",
            "            type=${7:str},",
            "            value=${8:float},",
            "        },",
            "        validityNotBefore={",
            "            type=${8:str},",
            "            value=${9:float},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: acmpca.CfnCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-acmpca.CfnCertificate",
            "Attributes: ",
            "  attrArn",
            "  attrCertificate"
        ],
        "prefix": "l1-acmpca-certificate",
        "scope": "python"
    },
    "acmpca.CfnCertificateAuthority": {
        "body": [
            "acmpca.CfnCertificateAuthority(self, \"${1:id}\", ",
            "        csrExtensions={",
            "            subjectInformationAccess=[],",
            "        },",
            "        keyAlgorithm=${3:str}, # Required",
            "        keyStorageSecurityStandard=${4:str},",
            "        revocationConfiguration={",
            "        },",
            "        signingAlgorithm=${6:str}, # Required",
            "        subject={",
            "            commonName=${7:str},",
            "            country=${8:str},",
            "            customAttributes=[],",
            "            distinguishedNameQualifier=${10:str},",
            "            generationQualifier=${11:str},",
            "            givenName=${12:str},",
            "            initials=${13:str},",
            "            locality=${14:str},",
            "            organization=${15:str},",
            "            organizationalUnit=${16:str},",
            "            pseudonym=${17:str},",
            "            serialNumber=${18:str},",
            "            state=${19:str},",
            "            surname=${20:str},",
            "            title=${21:str},",
            "        },",
            "        tags=[],",
            "        type=${9:str}, # Required",
            "        usageMode=${10:str},",
            ")"
        ],
        "description": [
            "Construct: acmpca.CfnCertificateAuthority",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-acmpca.CfnCertificateAuthority",
            "Attributes: ",
            "  attrCertificateSigningRequest",
            "  attrArn"
        ],
        "prefix": "l1-acmpca-certificateauthority",
        "scope": "python"
    },
    "acmpca.CfnCertificateAuthorityActivation": {
        "body": [
            "acmpca.CfnCertificateAuthorityActivation(self, \"${1:id}\", ",
            "        certificate=${2:str}, # Required",
            "        certificateAuthorityArn=${3:str}, # Required",
            "        certificateChain=${4:str},",
            "        status=${5:str},",
            ")"
        ],
        "description": [
            "Construct: acmpca.CfnCertificateAuthorityActivation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-acmpca.CfnCertificateAuthorityActivation",
            "Attributes: ",
            "  attrCompleteCertificateChain"
        ],
        "prefix": "l1-acmpca-certificateauthorityactivation",
        "scope": "python"
    },
    "acmpca.CfnPermission": {
        "body": [
            "acmpca.CfnPermission(self, \"${1:id}\", ",
            "        actions=[], # Required",
            "        certificateAuthorityArn=${3:str}, # Required",
            "        principal=${4:str}, # Required",
            "        sourceAccount=${5:str},",
            ")"
        ],
        "description": [
            "Construct: acmpca.CfnPermission",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-acmpca.CfnPermission"
        ],
        "prefix": "l1-acmpca-permission",
        "scope": "python"
    },
    "alexa.CfnASKCfnSkill": {
        "body": [
            "alexa.CfnASKCfnSkill(self, \"${1:id}\", ",
            "        authenticationConfiguration={",
            "            clientId=${2:str},",
            "            clientSecret=${3:str},",
            "            refreshToken=${4:str},",
            "        },",
            "        skillPackage={",
            "            s3Bucket=${4:str},",
            "            s3BucketRole=${5:str},",
            "            s3Key=${6:str},",
            "            s3ObjectVersion=${7:str},",
            "        },",
            "        vendorId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: alexa.CfnASKCfnSkill",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-alexa.CfnASKCfnSkill"
        ],
        "prefix": "alexa-ask-skill",
        "scope": "python"
    },
    "amazonmq.CfnBroker": {
        "body": [
            "amazonmq.CfnBroker(self, \"${1:id}\", ",
            "        authenticationStrategy=${2:str},",
            "        autoMinorVersionUpgrade=${3:bool},",
            "        brokerName=${4:str}, # Required",
            "        configuration={",
            "            id=${5:str},",
            "            revision=${6:int},",
            "        },",
            "        dataReplicationMode=${6:str},",
            "        dataReplicationPrimaryBrokerArn=${7:str},",
            "        deploymentMode=${8:str}, # Required",
            "        encryptionOptions={",
            "            kmsKeyId=${9:str},",
            "            useAwsOwnedKey=${10:bool},",
            "        },",
            "        engineType=${10:str}, # Required",
            "        engineVersion=${11:str},",
            "        hostInstanceType=${12:str}, # Required",
            "        ldapServerMetadata={",
            "            hosts=[],",
            "            roleBase=${14:str},",
            "            roleName=${15:str},",
            "            roleSearchMatching=${16:str},",
            "            roleSearchSubtree=${17:bool},",
            "            serviceAccountPassword=${18:str},",
            "            serviceAccountUsername=${19:str},",
            "            userBase=${20:str},",
            "            userRoleName=${21:str},",
            "            userSearchMatching=${22:str},",
            "            userSearchSubtree=${23:bool},",
            "        },",
            "        logs={",
            "            audit=${14:bool},",
            "            general=${15:bool},",
            "        },",
            "        maintenanceWindowStartTime={",
            "            dayOfWeek=${15:str},",
            "            timeOfDay=${16:str},",
            "            timeZone=${17:str},",
            "        },",
            "        publiclyAccessible=${16:bool}, # Required",
            "        securityGroups=[],",
            "        storageType=${18:str},",
            "        subnetIds=[],",
            "        tags=[],",
            "        users=[], # Required",
            ")"
        ],
        "description": [
            "Construct: amazonmq.CfnBroker",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amazonmq.CfnBroker",
            "Attributes: ",
            "  attrIpAddresses",
            "  attrOpenWireEndpoints",
            "  attrConfigurationRevision",
            "  attrStompEndpoints",
            "  attrMqttEndpoints",
            "  attrAmqpEndpoints",
            "  attrArn",
            "  attrConfigurationId",
            "  attrWssEndpoints"
        ],
        "prefix": "l1-amazonmq-broker",
        "scope": "python"
    },
    "amazonmq.CfnConfiguration": {
        "body": [
            "amazonmq.CfnConfiguration(self, \"${1:id}\", ",
            "        authenticationStrategy=${2:str},",
            "        data=${3:str}, # Required",
            "        description=${4:str},",
            "        engineType=${5:str}, # Required",
            "        engineVersion=${6:str},",
            "        name=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: amazonmq.CfnConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amazonmq.CfnConfiguration",
            "Attributes: ",
            "  attrRevision",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-amazonmq-configuration",
        "scope": "python"
    },
    "amazonmq.CfnConfigurationAssociation": {
        "body": [
            "amazonmq.CfnConfigurationAssociation(self, \"${1:id}\", ",
            "        broker=${2:str}, # Required",
            "        configuration={",
            "            id=${3:str},",
            "            revision=${4:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: amazonmq.CfnConfigurationAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amazonmq.CfnConfigurationAssociation"
        ],
        "prefix": "l1-amazonmq-configurationassociation",
        "scope": "python"
    },
    "amplify.CfnApp": {
        "body": [
            "amplify.CfnApp(self, \"${1:id}\", ",
            "        accessToken=${2:str},",
            "        autoBranchCreationConfig={",
            "            autoBranchCreationPatterns=[],",
            "            buildSpec=${5:str},",
            "            enableAutoBranchCreation=${6:bool},",
            "            enableAutoBuild=${7:bool},",
            "            enablePerformanceMode=${8:bool},",
            "            enablePullRequestPreview=${9:bool},",
            "            environmentVariables=[],",
            "            framework=${11:str},",
            "            pullRequestEnvironmentName=${12:str},",
            "            stage=${13:str},",
            "        },",
            "        basicAuthConfig={",
            "            enableBasicAuth=${4:bool},",
            "            password=${5:str},",
            "            username=${6:str},",
            "        },",
            "        buildSpec=${5:str},",
            "        customHeaders=${6:str},",
            "        customRules=[],",
            "        description=${8:str},",
            "        enableBranchAutoDeletion=${9:bool},",
            "        environmentVariables=[],",
            "        iAMServiceRole=${11:str},",
            "        name=${12:str}, # Required",
            "        oauthToken=${13:str},",
            "        platform=${14:str},",
            "        repository=${15:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: amplify.CfnApp",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amplify.CfnApp",
            "Attributes: ",
            "  attrAppId",
            "  attrArn",
            "  attrDefaultDomain",
            "  attrAppName"
        ],
        "prefix": "l1-amplify-app",
        "scope": "python"
    },
    "amplify.CfnBranch": {
        "body": [
            "amplify.CfnBranch(self, \"${1:id}\", ",
            "        appId=${2:str}, # Required",
            "        backend={",
            "            stackArn=${3:str},",
            "        },",
            "        basicAuthConfig={",
            "            enableBasicAuth=${4:bool},",
            "            password=${5:str},",
            "            username=${6:str},",
            "        },",
            "        branchName=${5:str}, # Required",
            "        buildSpec=${6:str},",
            "        description=${7:str},",
            "        enableAutoBuild=${8:bool},",
            "        enablePerformanceMode=${9:bool},",
            "        enablePullRequestPreview=${10:bool},",
            "        environmentVariables=[],",
            "        framework=${12:str},",
            "        pullRequestEnvironmentName=${13:str},",
            "        stage=${14:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: amplify.CfnBranch",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amplify.CfnBranch",
            "Attributes: ",
            "  attrBranchName",
            "  attrArn"
        ],
        "prefix": "l1-amplify-branch",
        "scope": "python"
    },
    "amplify.CfnDomain": {
        "body": [
            "amplify.CfnDomain(self, \"${1:id}\", ",
            "        appId=${2:str}, # Required",
            "        autoSubDomainCreationPatterns=[],",
            "        autoSubDomainIAMRole=${4:str},",
            "        certificateSettings={",
            "            certificateType=${5:str},",
            "            customCertificateArn=${6:str},",
            "        },",
            "        domainName=${6:str}, # Required",
            "        enableAutoSubDomain=${7:bool},",
            "        subDomainSettings=[], # Required",
            ")"
        ],
        "description": [
            "Construct: amplify.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amplify.CfnDomain",
            "Attributes: ",
            "  attrCertificate.CertificateArn",
            "  attrUpdateStatus",
            "  attrDomainName",
            "  attrStatusReason",
            "  attrAutoSubDomainCreationPatterns",
            "  attrCertificateRecord",
            "  attrAutoSubDomainIAMRole",
            "  attrEnableAutoSubDomain",
            "  attrArn",
            "  attrDomainStatus",
            "  attrCertificate.CertificateType",
            "  attrCertificate.CertificateVerificationDNSRecord",
            "  attrCertificate"
        ],
        "prefix": "l1-amplify-domain",
        "scope": "python"
    },
    "amplifyuibuilder.CfnComponent": {
        "body": [
            "amplifyuibuilder.CfnComponent(self, \"${1:id}\", ",
            "        appId=${2:str},",
            "        bindingProperties={",
            "        },",
            "        children=[],",
            "        collectionProperties={",
            "        },",
            "        componentType=${6:str},",
            "        environmentName=${7:str},",
            "        events={",
            "        },",
            "        name=${9:str},",
            "        overrides=${10:dict},",
            "        properties={",
            "        },",
            "        schemaVersion=${12:str},",
            "        sourceId=${13:str},",
            "        tags={",
            "        },",
            "        variants=[],",
            ")"
        ],
        "description": [
            "Construct: amplifyuibuilder.CfnComponent",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amplifyuibuilder.CfnComponent",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrCreatedAt",
            "  attrId"
        ],
        "prefix": "l1-amplifyuibuilder-component",
        "scope": "python"
    },
    "amplifyuibuilder.CfnForm": {
        "body": [
            "amplifyuibuilder.CfnForm(self, \"${1:id}\", ",
            "        appId=${2:str},",
            "        cta={",
            "            position=${5:str},",
            "        },",
            "        dataType={",
            "            dataSourceType=${4:str},",
            "            dataTypeName=${5:str},",
            "        },",
            "        environmentName=${5:str},",
            "        fields={",
            "        },",
            "        formActionType=${7:str},",
            "        labelDecorator=${8:str},",
            "        name=${9:str},",
            "        schemaVersion=${10:str},",
            "        sectionalElements={",
            "        },",
            "        style={",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: amplifyuibuilder.CfnForm",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amplifyuibuilder.CfnForm",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-amplifyuibuilder-form",
        "scope": "python"
    },
    "amplifyuibuilder.CfnTheme": {
        "body": [
            "amplifyuibuilder.CfnTheme(self, \"${1:id}\", ",
            "        appId=${2:str},",
            "        environmentName=${3:str},",
            "        name=${4:str},",
            "        overrides=[],",
            "        tags={",
            "        },",
            "        values=[],",
            ")"
        ],
        "description": [
            "Construct: amplifyuibuilder.CfnTheme",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-amplifyuibuilder.CfnTheme",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrCreatedAt",
            "  attrId"
        ],
        "prefix": "l1-amplifyuibuilder-theme",
        "scope": "python"
    },
    "apigateway.CfnAccount": {
        "body": [
            "apigateway.CfnAccount(self, \"${1:id}\", ",
            "        cloudWatchRoleArn=${2:str},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnAccount",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnAccount",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-apigateway-account",
        "scope": "python"
    },
    "apigateway.CfnApiKey": {
        "body": [
            "apigateway.CfnApiKey(self, \"${1:id}\", ",
            "        customerId=${2:str},",
            "        description=${3:str},",
            "        enabled=${4:bool},",
            "        generateDistinctId=${5:bool},",
            "        name=${6:str},",
            "        stageKeys=[],",
            "        tags=[],",
            "        value=${9:str},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnApiKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnApiKey",
            "Attributes: ",
            "  attrAPIKeyId"
        ],
        "prefix": "l1-apigateway-apikey",
        "scope": "python"
    },
    "apigateway.CfnAuthorizer": {
        "body": [
            "apigateway.CfnAuthorizer(self, \"${1:id}\", ",
            "        authType=${2:str},",
            "        authorizerCredentials=${3:str},",
            "        authorizerResultTtlInSeconds=${4:int},",
            "        authorizerUri=${5:str},",
            "        identitySource=${6:str},",
            "        identityValidationExpression=${7:str},",
            "        name=${8:str}, # Required",
            "        providerARNs=[],",
            "        restApiId=${10:str}, # Required",
            "        type=${11:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnAuthorizer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnAuthorizer",
            "Attributes: ",
            "  attrAuthorizerId"
        ],
        "prefix": "l1-apigateway-authorizer",
        "scope": "python"
    },
    "apigateway.CfnBasePathMapping": {
        "body": [
            "apigateway.CfnBasePathMapping(self, \"${1:id}\", ",
            "        basePath=${2:str},",
            "        domainName=${3:str}, # Required",
            "        id=${4:str},",
            "        restApiId=${5:str},",
            "        stage=${6:str},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnBasePathMapping",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnBasePathMapping"
        ],
        "prefix": "l1-apigateway-basepathmapping",
        "scope": "python"
    },
    "apigateway.CfnClientCertificate": {
        "body": [
            "apigateway.CfnClientCertificate(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnClientCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnClientCertificate",
            "Attributes: ",
            "  attrClientCertificateId"
        ],
        "prefix": "l1-apigateway-clientcertificate",
        "scope": "python"
    },
    "apigateway.CfnDeployment": {
        "body": [
            "apigateway.CfnDeployment(self, \"${1:id}\", ",
            "        deploymentCanarySettings={",
            "            percentTraffic=${2:float},",
            "            useStageCache=${4:bool},",
            "        },",
            "        description=${3:str},",
            "        restApiId=${4:str}, # Required",
            "        stageDescription={",
            "            cacheClusterEnabled=${6:bool},",
            "            cacheClusterSize=${7:str},",
            "            cacheDataEncrypted=${8:bool},",
            "            cacheTtlInSeconds=${9:int},",
            "            cachingEnabled=${10:bool},",
            "            clientCertificateId=${12:str},",
            "            dataTraceEnabled=${13:bool},",
            "            description=${14:str},",
            "            documentationVersion=${15:str},",
            "            loggingLevel=${16:str},",
            "            methodSettings=[],",
            "            metricsEnabled=${18:bool},",
            "            tags=[],",
            "            throttlingBurstLimit=${20:int},",
            "            throttlingRateLimit=${21:float},",
            "            tracingEnabled=${22:bool},",
            "        },",
            "        stageName=${6:str},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnDeployment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnDeployment",
            "Attributes: ",
            "  attrDeploymentId"
        ],
        "prefix": "l1-apigateway-deployment",
        "scope": "python"
    },
    "apigateway.CfnDocumentationPart": {
        "body": [
            "apigateway.CfnDocumentationPart(self, \"${1:id}\", ",
            "        location={",
            "            method=${2:str},",
            "            name=${3:str},",
            "            path=${4:str},",
            "            statusCode=${5:str},",
            "            type=${6:str},",
            "        },",
            "        properties=${3:str}, # Required",
            "        restApiId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnDocumentationPart",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnDocumentationPart",
            "Attributes: ",
            "  attrDocumentationPartId"
        ],
        "prefix": "l1-apigateway-documentationpart",
        "scope": "python"
    },
    "apigateway.CfnDocumentationVersion": {
        "body": [
            "apigateway.CfnDocumentationVersion(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        documentationVersion=${3:str}, # Required",
            "        restApiId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnDocumentationVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnDocumentationVersion"
        ],
        "prefix": "l1-apigateway-documentationversion",
        "scope": "python"
    },
    "apigateway.CfnDomainName": {
        "body": [
            "apigateway.CfnDomainName(self, \"${1:id}\", ",
            "        certificateArn=${2:str},",
            "        domainName=${3:str},",
            "        endpointConfiguration={",
            "            types=[],",
            "        },",
            "        mutualTlsAuthentication={",
            "            truststoreUri=${5:str},",
            "            truststoreVersion=${6:str},",
            "        },",
            "        ownershipVerificationCertificateArn=${6:str},",
            "        regionalCertificateArn=${7:str},",
            "        securityPolicy=${8:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnDomainName",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnDomainName",
            "Attributes: ",
            "  attrRegionalHostedZoneId",
            "  attrRegionalDomainName",
            "  attrDistributionHostedZoneId",
            "  attrDistributionDomainName"
        ],
        "prefix": "l1-apigateway-domainname",
        "scope": "python"
    },
    "apigateway.CfnGatewayResponse": {
        "body": [
            "apigateway.CfnGatewayResponse(self, \"${1:id}\", ",
            "        responseParameters={",
            "        },",
            "        responseTemplates={",
            "        },",
            "        responseType=${4:str}, # Required",
            "        restApiId=${5:str}, # Required",
            "        statusCode=${6:str},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnGatewayResponse",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnGatewayResponse",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-apigateway-gatewayresponse",
        "scope": "python"
    },
    "apigateway.CfnMethod": {
        "body": [
            "apigateway.CfnMethod(self, \"${1:id}\", ",
            "        apiKeyRequired=${2:bool},",
            "        authorizationScopes=[],",
            "        authorizationType=${4:str},",
            "        authorizerId=${5:str},",
            "        httpMethod=${6:str}, # Required",
            "        integration={",
            "            cacheKeyParameters=[],",
            "            cacheNamespace=${8:str},",
            "            connectionId=${9:str},",
            "            connectionType=${10:str},",
            "            contentHandling=${11:str},",
            "            credentials=${12:str},",
            "            integrationHttpMethod=${13:str},",
            "            integrationResponses=[],",
            "            passthroughBehavior=${15:str},",
            "            timeoutInMillis=${18:int},",
            "            type=${19:str},",
            "            uri=${20:str},",
            "        },",
            "        methodResponses=[],",
            "        operationName=${9:str},",
            "        requestModels={",
            "        },",
            "        requestParameters={",
            "        },",
            "        requestValidatorId=${12:str},",
            "        resourceId=${13:str}, # Required",
            "        restApiId=${14:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnMethod",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnMethod"
        ],
        "prefix": "l1-apigateway-method",
        "scope": "python"
    },
    "apigateway.CfnModel": {
        "body": [
            "apigateway.CfnModel(self, \"${1:id}\", ",
            "        contentType=${2:str},",
            "        description=${3:str},",
            "        name=${4:str},",
            "        restApiId=${5:str}, # Required",
            "        schema=${6:dict},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnModel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnModel"
        ],
        "prefix": "l1-apigateway-model",
        "scope": "python"
    },
    "apigateway.CfnRequestValidator": {
        "body": [
            "apigateway.CfnRequestValidator(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        restApiId=${3:str}, # Required",
            "        validateRequestBody=${4:bool},",
            "        validateRequestParameters=${5:bool},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnRequestValidator",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnRequestValidator",
            "Attributes: ",
            "  attrRequestValidatorId"
        ],
        "prefix": "l1-apigateway-requestvalidator",
        "scope": "python"
    },
    "apigateway.CfnResource": {
        "body": [
            "apigateway.CfnResource(self, \"${1:id}\", ",
            "        parentId=${2:str}, # Required",
            "        pathPart=${3:str}, # Required",
            "        restApiId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnResource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnResource",
            "Attributes: ",
            "  attrResourceId"
        ],
        "prefix": "l1-apigateway-resource",
        "scope": "python"
    },
    "apigateway.CfnRestApi": {
        "body": [
            "apigateway.CfnRestApi(self, \"${1:id}\", ",
            "        apiKeySourceType=${2:str},",
            "        binaryMediaTypes=[],",
            "        body=${4:dict},",
            "        bodyS3Location={",
            "            bucket=${5:str},",
            "            eTag=${6:str},",
            "            key=${7:str},",
            "            version=${8:str},",
            "        },",
            "        cloneFrom=${6:str},",
            "        description=${7:str},",
            "        disableExecuteApiEndpoint=${8:bool},",
            "        endpointConfiguration={",
            "            types=[],",
            "            vpcEndpointIds=[],",
            "        },",
            "        failOnWarnings=${10:bool},",
            "        minimumCompressionSize=${11:int},",
            "        mode=${12:str},",
            "        name=${13:str},",
            "        parameters={",
            "        },",
            "        policy=${15:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnRestApi",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnRestApi",
            "Attributes: ",
            "  attrRootResourceId",
            "  attrRestApiId"
        ],
        "prefix": "l1-apigateway-restapi",
        "scope": "python"
    },
    "apigateway.CfnStage": {
        "body": [
            "apigateway.CfnStage(self, \"${1:id}\", ",
            "        accessLogSetting={",
            "            destinationArn=${2:str},",
            "            format=${3:str},",
            "        },",
            "        cacheClusterEnabled=${3:bool},",
            "        cacheClusterSize=${4:str},",
            "        canarySetting={",
            "            deploymentId=${5:str},",
            "            percentTraffic=${6:float},",
            "            useStageCache=${8:bool},",
            "        },",
            "        clientCertificateId=${6:str},",
            "        deploymentId=${7:str},",
            "        description=${8:str},",
            "        documentationVersion=${9:str},",
            "        methodSettings=[],",
            "        restApiId=${11:str}, # Required",
            "        stageName=${12:str},",
            "        tags=[],",
            "        tracingEnabled=${14:bool},",
            "        variables={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnStage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnStage"
        ],
        "prefix": "l1-apigateway-stage",
        "scope": "python"
    },
    "apigateway.CfnUsagePlan": {
        "body": [
            "apigateway.CfnUsagePlan(self, \"${1:id}\", ",
            "        apiStages=[],",
            "        description=${3:str},",
            "        quota={",
            "            limit=${4:int},",
            "            offset=${5:int},",
            "            period=${6:str},",
            "        },",
            "        tags=[],",
            "        throttle={",
            "            burstLimit=${6:int},",
            "            rateLimit=${7:float},",
            "        },",
            "        usagePlanName=${7:str},",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnUsagePlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnUsagePlan",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-apigateway-usageplan",
        "scope": "python"
    },
    "apigateway.CfnUsagePlanKey": {
        "body": [
            "apigateway.CfnUsagePlanKey(self, \"${1:id}\", ",
            "        keyId=${2:str}, # Required",
            "        keyType=${3:str}, # Required",
            "        usagePlanId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnUsagePlanKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnUsagePlanKey",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-apigateway-usageplankey",
        "scope": "python"
    },
    "apigateway.CfnVpcLink": {
        "body": [
            "apigateway.CfnVpcLink(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            "        targetArns=[], # Required",
            ")"
        ],
        "description": [
            "Construct: apigateway.CfnVpcLink",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.CfnVpcLink",
            "Attributes: ",
            "  attrVpcLinkId"
        ],
        "prefix": "l1-apigateway-vpclink",
        "scope": "python"
    },
    "apigatewayv2.CfnApi": {
        "body": [
            "apigatewayv2.CfnApi(self, \"${1:id}\", ",
            "        apiKeySelectionExpression=${2:str},",
            "        basePath=${3:str},",
            "        body=${4:dict},",
            "        bodyS3Location={",
            "            bucket=${5:str},",
            "            etag=${6:str},",
            "            key=${7:str},",
            "            version=${8:str},",
            "        },",
            "        corsConfiguration={",
            "            allowCredentials=${6:bool},",
            "            allowHeaders=[],",
            "            allowMethods=[],",
            "            allowOrigins=[],",
            "            exposeHeaders=[],",
            "            maxAge=${11:int},",
            "        },",
            "        credentialsArn=${7:str},",
            "        description=${8:str},",
            "        disableExecuteApiEndpoint=${9:bool},",
            "        disableSchemaValidation=${10:bool},",
            "        failOnWarnings=${11:bool},",
            "        name=${12:str},",
            "        protocolType=${13:str},",
            "        routeKey=${14:str},",
            "        routeSelectionExpression=${15:str},",
            "        tags={",
            "        },",
            "        target=${17:str},",
            "        version=${18:str},",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnApi",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnApi",
            "Attributes: ",
            "  attrApiEndpoint",
            "  attrApiId"
        ],
        "prefix": "l1-apigatewayv2-api",
        "scope": "python"
    },
    "apigatewayv2.CfnApiGatewayManagedOverrides": {
        "body": [
            "apigatewayv2.CfnApiGatewayManagedOverrides(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        integration={",
            "            description=${3:str},",
            "            integrationMethod=${4:str},",
            "            payloadFormatVersion=${5:str},",
            "            timeoutInMillis=${6:int},",
            "        },",
            "        route={",
            "            authorizationScopes=[],",
            "            authorizationType=${5:str},",
            "            authorizerId=${6:str},",
            "            operationName=${7:str},",
            "            target=${8:str},",
            "        },",
            "        stage={",
            "            autoDeploy=${6:bool},",
            "            description=${8:str},",
            "            routeSettings=${9:dict},",
            "            stageVariables=${10:dict},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnApiGatewayManagedOverrides",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnApiGatewayManagedOverrides"
        ],
        "prefix": "l1-apigatewayv2-apigatewaymanagedoverrides",
        "scope": "python"
    },
    "apigatewayv2.CfnApiMapping": {
        "body": [
            "apigatewayv2.CfnApiMapping(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        apiMappingKey=${3:str},",
            "        domainName=${4:str}, # Required",
            "        stage=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnApiMapping",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnApiMapping",
            "Attributes: ",
            "  attrApiMappingId"
        ],
        "prefix": "l1-apigatewayv2-apimapping",
        "scope": "python"
    },
    "apigatewayv2.CfnAuthorizer": {
        "body": [
            "apigatewayv2.CfnAuthorizer(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        authorizerCredentialsArn=${3:str},",
            "        authorizerPayloadFormatVersion=${4:str},",
            "        authorizerResultTtlInSeconds=${5:int},",
            "        authorizerType=${6:str}, # Required",
            "        authorizerUri=${7:str},",
            "        enableSimpleResponses=${8:bool},",
            "        identitySource=[],",
            "        identityValidationExpression=${10:str},",
            "        jwtConfiguration={",
            "            audience=[],",
            "            issuer=${12:str},",
            "        },",
            "        name=${12:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnAuthorizer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnAuthorizer",
            "Attributes: ",
            "  attrAuthorizerId"
        ],
        "prefix": "l1-apigatewayv2-authorizer",
        "scope": "python"
    },
    "apigatewayv2.CfnDeployment": {
        "body": [
            "apigatewayv2.CfnDeployment(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        description=${3:str},",
            "        stageName=${4:str},",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnDeployment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnDeployment",
            "Attributes: ",
            "  attrDeploymentId"
        ],
        "prefix": "l1-apigatewayv2-deployment",
        "scope": "python"
    },
    "apigatewayv2.CfnDomainName": {
        "body": [
            "apigatewayv2.CfnDomainName(self, \"${1:id}\", ",
            "        domainName=${2:str}, # Required",
            "        domainNameConfigurations=[],",
            "        mutualTlsAuthentication={",
            "            truststoreUri=${4:str},",
            "            truststoreVersion=${5:str},",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnDomainName",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnDomainName",
            "Attributes: ",
            "  attrRegionalHostedZoneId",
            "  attrRegionalDomainName"
        ],
        "prefix": "l1-apigatewayv2-domainname",
        "scope": "python"
    },
    "apigatewayv2.CfnIntegration": {
        "body": [
            "apigatewayv2.CfnIntegration(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        connectionId=${3:str},",
            "        connectionType=${4:str},",
            "        contentHandlingStrategy=${5:str},",
            "        credentialsArn=${6:str},",
            "        description=${7:str},",
            "        integrationMethod=${8:str},",
            "        integrationSubtype=${9:str},",
            "        integrationType=${10:str}, # Required",
            "        integrationUri=${11:str},",
            "        passthroughBehavior=${12:str},",
            "        payloadFormatVersion=${13:str},",
            "        requestParameters=${14:dict},",
            "        requestTemplates=${15:dict},",
            "        responseParameters=${16:dict},",
            "        templateSelectionExpression=${17:str},",
            "        timeoutInMillis=${18:int},",
            "        tlsConfig={",
            "            serverNameToVerify=${19:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnIntegration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnIntegration"
        ],
        "prefix": "l1-apigatewayv2-integration",
        "scope": "python"
    },
    "apigatewayv2.CfnIntegrationResponse": {
        "body": [
            "apigatewayv2.CfnIntegrationResponse(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        contentHandlingStrategy=${3:str},",
            "        integrationId=${4:str}, # Required",
            "        integrationResponseKey=${5:str}, # Required",
            "        responseParameters=${6:dict},",
            "        responseTemplates=${7:dict},",
            "        templateSelectionExpression=${8:str},",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnIntegrationResponse",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnIntegrationResponse",
            "Attributes: ",
            "  attrIntegrationResponseId"
        ],
        "prefix": "l1-apigatewayv2-integrationresponse",
        "scope": "python"
    },
    "apigatewayv2.CfnModel": {
        "body": [
            "apigatewayv2.CfnModel(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        contentType=${3:str},",
            "        description=${4:str},",
            "        name=${5:str}, # Required",
            "        schema=${6:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnModel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnModel",
            "Attributes: ",
            "  attrModelId"
        ],
        "prefix": "l1-apigatewayv2-model",
        "scope": "python"
    },
    "apigatewayv2.CfnRoute": {
        "body": [
            "apigatewayv2.CfnRoute(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        apiKeyRequired=${3:bool},",
            "        authorizationScopes=[],",
            "        authorizationType=${5:str},",
            "        authorizerId=${6:str},",
            "        modelSelectionExpression=${7:str},",
            "        operationName=${8:str},",
            "        requestModels=${9:dict},",
            "        requestParameters=${10:dict},",
            "        routeKey=${11:str}, # Required",
            "        routeResponseSelectionExpression=${12:str},",
            "        target=${13:str},",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnRoute",
            "Attributes: ",
            "  attrRouteId"
        ],
        "prefix": "l1-apigatewayv2-route",
        "scope": "python"
    },
    "apigatewayv2.CfnRouteResponse": {
        "body": [
            "apigatewayv2.CfnRouteResponse(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        modelSelectionExpression=${3:str},",
            "        responseModels=${4:dict},",
            "        responseParameters={",
            "        },",
            "        routeId=${6:str}, # Required",
            "        routeResponseKey=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnRouteResponse",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnRouteResponse",
            "Attributes: ",
            "  attrRouteResponseId"
        ],
        "prefix": "l1-apigatewayv2-routeresponse",
        "scope": "python"
    },
    "apigatewayv2.CfnStage": {
        "body": [
            "apigatewayv2.CfnStage(self, \"${1:id}\", ",
            "        accessLogSettings={",
            "            destinationArn=${2:str},",
            "            format=${3:str},",
            "        },",
            "        accessPolicyId=${3:str},",
            "        apiId=${4:str}, # Required",
            "        autoDeploy=${5:bool},",
            "        clientCertificateId=${6:str},",
            "        defaultRouteSettings={",
            "            dataTraceEnabled=${7:bool},",
            "            detailedMetricsEnabled=${8:bool},",
            "            loggingLevel=${9:str},",
            "            throttlingBurstLimit=${10:int},",
            "            throttlingRateLimit=${11:float},",
            "        },",
            "        deploymentId=${8:str},",
            "        description=${9:str},",
            "        routeSettings=${10:dict},",
            "        stageName=${11:str}, # Required",
            "        stageVariables=${12:dict},",
            "        tags=${13:dict},",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnStage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnStage"
        ],
        "prefix": "l1-apigatewayv2-stage",
        "scope": "python"
    },
    "apigatewayv2.CfnVpcLink": {
        "body": [
            "apigatewayv2.CfnVpcLink(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        securityGroupIds=[],",
            "        subnetIds=[], # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: apigatewayv2.CfnVpcLink",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigatewayv2.CfnVpcLink",
            "Attributes: ",
            "  attrVpcLinkId"
        ],
        "prefix": "l1-apigatewayv2-vpclink",
        "scope": "python"
    },
    "appconfig.CfnApplication": {
        "body": [
            "appconfig.CfnApplication(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnApplication",
            "Attributes: ",
            "  attrApplicationId"
        ],
        "prefix": "l1-appconfig-application",
        "scope": "python"
    },
    "appconfig.CfnConfigurationProfile": {
        "body": [
            "appconfig.CfnConfigurationProfile(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        description=${3:str},",
            "        kmsKeyIdentifier=${4:str},",
            "        locationUri=${5:str}, # Required",
            "        name=${6:str}, # Required",
            "        retrievalRoleArn=${7:str},",
            "        tags=[],",
            "        type=${9:str},",
            "        validators=[],",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnConfigurationProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnConfigurationProfile",
            "Attributes: ",
            "  attrConfigurationProfileId",
            "  attrKmsKeyArn"
        ],
        "prefix": "l1-appconfig-configurationprofile",
        "scope": "python"
    },
    "appconfig.CfnDeployment": {
        "body": [
            "appconfig.CfnDeployment(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        configurationProfileId=${3:str}, # Required",
            "        configurationVersion=${4:str}, # Required",
            "        deploymentStrategyId=${5:str}, # Required",
            "        description=${6:str},",
            "        dynamicExtensionParameters=[],",
            "        environmentId=${8:str}, # Required",
            "        kmsKeyIdentifier=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnDeployment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnDeployment"
        ],
        "prefix": "l1-appconfig-deployment",
        "scope": "python"
    },
    "appconfig.CfnDeploymentStrategy": {
        "body": [
            "appconfig.CfnDeploymentStrategy(self, \"${1:id}\", ",
            "        deploymentDurationInMinutes=${2:float}, # Required",
            "        description=${3:str},",
            "        finalBakeTimeInMinutes=${4:float},",
            "        growthFactor=${5:float}, # Required",
            "        growthType=${6:str},",
            "        name=${7:str}, # Required",
            "        replicateTo=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnDeploymentStrategy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnDeploymentStrategy"
        ],
        "prefix": "l1-appconfig-deploymentstrategy",
        "scope": "python"
    },
    "appconfig.CfnEnvironment": {
        "body": [
            "appconfig.CfnEnvironment(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        description=${3:str},",
            "        monitors=[],",
            "        name=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnEnvironment",
            "Attributes: ",
            "  attrEnvironmentId"
        ],
        "prefix": "l1-appconfig-environment",
        "scope": "python"
    },
    "appconfig.CfnExtension": {
        "body": [
            "appconfig.CfnExtension(self, \"${1:id}\", ",
            "        actions=${2:dict}, # Required",
            "        description=${3:str},",
            "        latestVersionNumber=${4:int},",
            "        name=${5:str}, # Required",
            "        parameters={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnExtension",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnExtension",
            "Attributes: ",
            "  attrId",
            "  attrArn",
            "  attrVersionNumber"
        ],
        "prefix": "l1-appconfig-extension",
        "scope": "python"
    },
    "appconfig.CfnExtensionAssociation": {
        "body": [
            "appconfig.CfnExtensionAssociation(self, \"${1:id}\", ",
            "        extensionIdentifier=${2:str},",
            "        extensionVersionNumber=${3:int},",
            "        parameters={",
            "        },",
            "        resourceIdentifier=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnExtensionAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnExtensionAssociation",
            "Attributes: ",
            "  attrResourceArn",
            "  attrExtensionArn",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-appconfig-extensionassociation",
        "scope": "python"
    },
    "appconfig.CfnHostedConfigurationVersion": {
        "body": [
            "appconfig.CfnHostedConfigurationVersion(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        configurationProfileId=${3:str}, # Required",
            "        content=${4:str}, # Required",
            "        contentType=${5:str}, # Required",
            "        description=${6:str},",
            "        latestVersionNumber=${7:int},",
            "        versionLabel=${8:str},",
            ")"
        ],
        "description": [
            "Construct: appconfig.CfnHostedConfigurationVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appconfig.CfnHostedConfigurationVersion",
            "Attributes: ",
            "  attrVersionNumber"
        ],
        "prefix": "l1-appconfig-hostedconfigurationversion",
        "scope": "python"
    },
    "appflow.CfnConnector": {
        "body": [
            "appflow.CfnConnector(self, \"${1:id}\", ",
            "        connectorLabel=${2:str},",
            "        connectorProvisioningConfig={",
            "        },",
            "        connectorProvisioningType=${4:str}, # Required",
            "        description=${5:str},",
            ")"
        ],
        "description": [
            "Construct: appflow.CfnConnector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appflow.CfnConnector",
            "Attributes: ",
            "  attrConnectorArn"
        ],
        "prefix": "l1-appflow-connector",
        "scope": "python"
    },
    "appflow.CfnConnectorProfile": {
        "body": [
            "appflow.CfnConnectorProfile(self, \"${1:id}\", ",
            "        connectionMode=${2:str}, # Required",
            "        connectorLabel=${3:str},",
            "        connectorProfileConfig={",
            "        },",
            "        connectorProfileName=${5:str}, # Required",
            "        connectorType=${6:str}, # Required",
            "        kMSArn=${7:str},",
            ")"
        ],
        "description": [
            "Construct: appflow.CfnConnectorProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appflow.CfnConnectorProfile",
            "Attributes: ",
            "  attrCredentialsArn",
            "  attrConnectorProfileArn"
        ],
        "prefix": "l1-appflow-connectorprofile",
        "scope": "python"
    },
    "appflow.CfnFlow": {
        "body": [
            "appflow.CfnFlow(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        destinationFlowConfigList=[], # Required",
            "        flowName=${4:str}, # Required",
            "        flowStatus=${5:str},",
            "        kMSArn=${6:str},",
            "        metadataCatalogConfig={",
            "        },",
            "        sourceFlowConfig={",
            "            apiVersion=${8:str},",
            "            connectorProfileName=${9:str},",
            "            connectorType=${10:str},",
            "        },",
            "        tags=[],",
            "        tasks=[], # Required",
            "        triggerConfig={",
            "            triggerType=${12:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: appflow.CfnFlow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appflow.CfnFlow",
            "Attributes: ",
            "  attrFlowArn"
        ],
        "prefix": "l1-appflow-flow",
        "scope": "python"
    },
    "appintegrations.CfnApplication": {
        "body": [
            "appintegrations.CfnApplication(self, \"${1:id}\", ",
            "        applicationSourceConfig={",
            "        },",
            "        description=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        namespace=${5:str},",
            "        permissions=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appintegrations.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appintegrations.CfnApplication",
            "Attributes: ",
            "  attrApplicationArn",
            "  attrId"
        ],
        "prefix": "l1-appintegrations-application",
        "scope": "python"
    },
    "appintegrations.CfnDataIntegration": {
        "body": [
            "appintegrations.CfnDataIntegration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        fileConfiguration={",
            "            filters=${3:dict},",
            "            folders=[],",
            "        },",
            "        kmsKey=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        objectConfiguration=${6:dict},",
            "        scheduleConfig={",
            "            firstExecutionFrom=${7:str},",
            "            object=${8:str},",
            "            scheduleExpression=${9:str},",
            "        },",
            "        sourceURI=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appintegrations.CfnDataIntegration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appintegrations.CfnDataIntegration",
            "Attributes: ",
            "  attrDataIntegrationArn",
            "  attrId"
        ],
        "prefix": "l1-appintegrations-dataintegration",
        "scope": "python"
    },
    "appintegrations.CfnEventIntegration": {
        "body": [
            "appintegrations.CfnEventIntegration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        eventBridgeBus=${3:str}, # Required",
            "        eventFilter={",
            "            source=${4:str},",
            "        },",
            "        name=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appintegrations.CfnEventIntegration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appintegrations.CfnEventIntegration",
            "Attributes: ",
            "  attrEventIntegrationArn"
        ],
        "prefix": "l1-appintegrations-eventintegration",
        "scope": "python"
    },
    "applicationautoscaling.CfnScalableTarget": {
        "body": [
            "applicationautoscaling.CfnScalableTarget(self, \"${1:id}\", ",
            "        maxCapacity=${2:int}, # Required",
            "        minCapacity=${3:int}, # Required",
            "        resourceId=${4:str}, # Required",
            "        roleARN=${5:str},",
            "        scalableDimension=${6:str}, # Required",
            "        scheduledActions=[],",
            "        serviceNamespace=${8:str}, # Required",
            "        suspendedState={",
            "            dynamicScalingInSuspended=${9:bool},",
            "            dynamicScalingOutSuspended=${10:bool},",
            "            scheduledScalingSuspended=${11:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: applicationautoscaling.CfnScalableTarget",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-applicationautoscaling.CfnScalableTarget",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-applicationautoscaling-scalabletarget",
        "scope": "python"
    },
    "applicationautoscaling.CfnScalingPolicy": {
        "body": [
            "applicationautoscaling.CfnScalingPolicy(self, \"${1:id}\", ",
            "        policyName=${2:str}, # Required",
            "        policyType=${3:str}, # Required",
            "        resourceId=${4:str},",
            "        scalableDimension=${5:str},",
            "        scalingTargetId=${6:str},",
            "        serviceNamespace=${7:str},",
            "        stepScalingPolicyConfiguration={",
            "            adjustmentType=${8:str},",
            "            cooldown=${9:int},",
            "            metricAggregationType=${10:str},",
            "            minAdjustmentMagnitude=${11:int},",
            "            stepAdjustments=[],",
            "        },",
            "        targetTrackingScalingPolicyConfiguration={",
            "            disableScaleIn=${10:bool},",
            "            scaleInCooldown=${12:int},",
            "            scaleOutCooldown=${13:int},",
            "            targetValue=${14:float},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: applicationautoscaling.CfnScalingPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-applicationautoscaling.CfnScalingPolicy",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-applicationautoscaling-scalingpolicy",
        "scope": "python"
    },
    "applicationinsights.CfnApplication": {
        "body": [
            "applicationinsights.CfnApplication(self, \"${1:id}\", ",
            "        attachMissingPermission=${2:bool},",
            "        autoConfigurationEnabled=${3:bool},",
            "        cWEMonitorEnabled=${4:bool},",
            "        componentMonitoringSettings=[],",
            "        customComponents=[],",
            "        groupingType=${7:str},",
            "        logPatternSets=[],",
            "        opsCenterEnabled=${9:bool},",
            "        opsItemSNSTopicArn=${10:str},",
            "        resourceGroupName=${11:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: applicationinsights.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-applicationinsights.CfnApplication",
            "Attributes: ",
            "  attrApplicationARN"
        ],
        "prefix": "l1-applicationinsights-application",
        "scope": "python"
    },
    "applicationsignals.CfnServiceLevelObjective": {
        "body": [
            "applicationsignals.CfnServiceLevelObjective(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        goal={",
            "            attainmentGoal=${3:float},",
            "            warningThreshold=${5:float},",
            "        },",
            "        name=${4:str}, # Required",
            "        sli={",
            "            comparisonOperator=${5:str},",
            "            metricThreshold=${6:float},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: applicationsignals.CfnServiceLevelObjective",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-applicationsignals.CfnServiceLevelObjective",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-applicationsignals-servicelevelobjective",
        "scope": "python"
    },
    "appmesh.CfnGatewayRoute": {
        "body": [
            "appmesh.CfnGatewayRoute(self, \"${1:id}\", ",
            "        gatewayRouteName=${2:str},",
            "        meshName=${3:str}, # Required",
            "        meshOwner=${4:str},",
            "        spec={",
            "            priority=${8:int},",
            "        },",
            "        tags=[],",
            "        virtualGatewayName=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appmesh.CfnGatewayRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appmesh.CfnGatewayRoute",
            "Attributes: ",
            "  attrUid",
            "  attrMeshName",
            "  attrVirtualGatewayName",
            "  attrMeshOwner",
            "  attrResourceOwner",
            "  attrGatewayRouteName",
            "  attrArn"
        ],
        "prefix": "l1-appmesh-gatewayroute",
        "scope": "python"
    },
    "appmesh.CfnMesh": {
        "body": [
            "appmesh.CfnMesh(self, \"${1:id}\", ",
            "        meshName=${2:str},",
            "        spec={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appmesh.CfnMesh",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appmesh.CfnMesh",
            "Attributes: ",
            "  attrUid",
            "  attrMeshName",
            "  attrMeshOwner",
            "  attrResourceOwner",
            "  attrArn"
        ],
        "prefix": "l1-appmesh-mesh",
        "scope": "python"
    },
    "appmesh.CfnRoute": {
        "body": [
            "appmesh.CfnRoute(self, \"${1:id}\", ",
            "        meshName=${2:str}, # Required",
            "        meshOwner=${3:str},",
            "        routeName=${4:str},",
            "        spec={",
            "            priority=${8:int},",
            "        },",
            "        tags=[],",
            "        virtualRouterName=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appmesh.CfnRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appmesh.CfnRoute",
            "Attributes: ",
            "  attrUid",
            "  attrMeshName",
            "  attrVirtualRouterName",
            "  attrMeshOwner",
            "  attrResourceOwner",
            "  attrRouteName",
            "  attrArn"
        ],
        "prefix": "l1-appmesh-route",
        "scope": "python"
    },
    "appmesh.CfnVirtualGateway": {
        "body": [
            "appmesh.CfnVirtualGateway(self, \"${1:id}\", ",
            "        meshName=${2:str}, # Required",
            "        meshOwner=${3:str},",
            "        spec={",
            "            listeners=[],",
            "        },",
            "        tags=[],",
            "        virtualGatewayName=${6:str},",
            ")"
        ],
        "description": [
            "Construct: appmesh.CfnVirtualGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appmesh.CfnVirtualGateway",
            "Attributes: ",
            "  attrUid",
            "  attrVirtualGatewayName",
            "  attrMeshName",
            "  attrMeshOwner",
            "  attrResourceOwner",
            "  attrArn"
        ],
        "prefix": "l1-appmesh-virtualgateway",
        "scope": "python"
    },
    "appmesh.CfnVirtualNode": {
        "body": [
            "appmesh.CfnVirtualNode(self, \"${1:id}\", ",
            "        meshName=${2:str}, # Required",
            "        meshOwner=${3:str},",
            "        spec={",
            "            backends=[],",
            "            listeners=[],",
            "        },",
            "        tags=[],",
            "        virtualNodeName=${6:str},",
            ")"
        ],
        "description": [
            "Construct: appmesh.CfnVirtualNode",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appmesh.CfnVirtualNode",
            "Attributes: ",
            "  attrUid",
            "  attrMeshName",
            "  attrMeshOwner",
            "  attrResourceOwner",
            "  attrArn",
            "  attrVirtualNodeName"
        ],
        "prefix": "l1-appmesh-virtualnode",
        "scope": "python"
    },
    "appmesh.CfnVirtualRouter": {
        "body": [
            "appmesh.CfnVirtualRouter(self, \"${1:id}\", ",
            "        meshName=${2:str}, # Required",
            "        meshOwner=${3:str},",
            "        spec={",
            "            listeners=[],",
            "        },",
            "        tags=[],",
            "        virtualRouterName=${6:str},",
            ")"
        ],
        "description": [
            "Construct: appmesh.CfnVirtualRouter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appmesh.CfnVirtualRouter",
            "Attributes: ",
            "  attrUid",
            "  attrMeshName",
            "  attrVirtualRouterName",
            "  attrMeshOwner",
            "  attrResourceOwner",
            "  attrArn"
        ],
        "prefix": "l1-appmesh-virtualrouter",
        "scope": "python"
    },
    "appmesh.CfnVirtualService": {
        "body": [
            "appmesh.CfnVirtualService(self, \"${1:id}\", ",
            "        meshName=${2:str}, # Required",
            "        meshOwner=${3:str},",
            "        spec={",
            "        },",
            "        tags=[],",
            "        virtualServiceName=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appmesh.CfnVirtualService",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appmesh.CfnVirtualService",
            "Attributes: ",
            "  attrUid",
            "  attrMeshName",
            "  attrMeshOwner",
            "  attrResourceOwner",
            "  attrVirtualServiceName",
            "  attrArn"
        ],
        "prefix": "l1-appmesh-virtualservice",
        "scope": "python"
    },
    "apprunner.CfnAutoScalingConfiguration": {
        "body": [
            "apprunner.CfnAutoScalingConfiguration(self, \"${1:id}\", ",
            "        autoScalingConfigurationName=${2:str},",
            "        maxConcurrency=${3:int},",
            "        maxSize=${4:int},",
            "        minSize=${5:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: apprunner.CfnAutoScalingConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apprunner.CfnAutoScalingConfiguration",
            "Attributes: ",
            "  attrAutoScalingConfigurationRevision",
            "  attrAutoScalingConfigurationArn",
            "  attrLatest"
        ],
        "prefix": "l1-apprunner-autoscalingconfiguration",
        "scope": "python"
    },
    "apprunner.CfnObservabilityConfiguration": {
        "body": [
            "apprunner.CfnObservabilityConfiguration(self, \"${1:id}\", ",
            "        observabilityConfigurationName=${2:str},",
            "        tags=[],",
            "        traceConfiguration={",
            "            vendor=${4:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: apprunner.CfnObservabilityConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apprunner.CfnObservabilityConfiguration",
            "Attributes: ",
            "  attrObservabilityConfigurationRevision",
            "  attrObservabilityConfigurationArn",
            "  attrLatest"
        ],
        "prefix": "l1-apprunner-observabilityconfiguration",
        "scope": "python"
    },
    "apprunner.CfnService": {
        "body": [
            "apprunner.CfnService(self, \"${1:id}\", ",
            "        autoScalingConfigurationArn=${2:str},",
            "        encryptionConfiguration={",
            "            kmsKey=${3:str},",
            "        },",
            "        healthCheckConfiguration={",
            "            healthyThreshold=${4:int},",
            "            interval=${5:int},",
            "            path=${6:str},",
            "            protocol=${7:str},",
            "            timeout=${8:int},",
            "            unhealthyThreshold=${9:int},",
            "        },",
            "        instanceConfiguration={",
            "            cpu=${5:str},",
            "            instanceRoleArn=${6:str},",
            "            memory=${7:str},",
            "        },",
            "        networkConfiguration={",
            "            ipAddressType=${8:str},",
            "        },",
            "        observabilityConfiguration={",
            "            observabilityConfigurationArn=${7:str},",
            "            observabilityEnabled=${8:bool},",
            "        },",
            "        serviceName=${8:str},",
            "        sourceConfiguration={",
            "            autoDeploymentsEnabled=${10:bool},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: apprunner.CfnService",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apprunner.CfnService",
            "Attributes: ",
            "  attrStatus",
            "  attrServiceUrl",
            "  attrServiceArn",
            "  attrServiceId"
        ],
        "prefix": "l1-apprunner-service",
        "scope": "python"
    },
    "apprunner.CfnVpcConnector": {
        "body": [
            "apprunner.CfnVpcConnector(self, \"${1:id}\", ",
            "        securityGroups=[],",
            "        subnets=[], # Required",
            "        tags=[],",
            "        vpcConnectorName=${5:str},",
            ")"
        ],
        "description": [
            "Construct: apprunner.CfnVpcConnector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apprunner.CfnVpcConnector",
            "Attributes: ",
            "  attrVpcConnectorArn",
            "  attrVpcConnectorRevision"
        ],
        "prefix": "l1-apprunner-vpcconnector",
        "scope": "python"
    },
    "apprunner.CfnVpcIngressConnection": {
        "body": [
            "apprunner.CfnVpcIngressConnection(self, \"${1:id}\", ",
            "        ingressVpcConfiguration={",
            "            vpcEndpointId=${2:str},",
            "            vpcId=${3:str},",
            "        },",
            "        serviceArn=${3:str}, # Required",
            "        tags=[],",
            "        vpcIngressConnectionName=${5:str},",
            ")"
        ],
        "description": [
            "Construct: apprunner.CfnVpcIngressConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apprunner.CfnVpcIngressConnection",
            "Attributes: ",
            "  attrStatus",
            "  attrDomainName",
            "  attrVpcIngressConnectionArn"
        ],
        "prefix": "l1-apprunner-vpcingressconnection",
        "scope": "python"
    },
    "appstream.CfnAppBlock": {
        "body": [
            "appstream.CfnAppBlock(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        displayName=${3:str},",
            "        name=${4:str}, # Required",
            "        packagingType=${5:str},",
            "        postSetupScriptDetails={",
            "            executableParameters=${6:str},",
            "            executablePath=${7:str},",
            "            timeoutInSeconds=${9:int},",
            "        },",
            "        setupScriptDetails={",
            "            executableParameters=${7:str},",
            "            executablePath=${8:str},",
            "            timeoutInSeconds=${10:int},",
            "        },",
            "        sourceS3Location={",
            "            s3Bucket=${8:str},",
            "            s3Key=${9:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnAppBlock",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnAppBlock",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrArn"
        ],
        "prefix": "l1-appstream-appblock",
        "scope": "python"
    },
    "appstream.CfnAppBlockBuilder": {
        "body": [
            "appstream.CfnAppBlockBuilder(self, \"${1:id}\", ",
            "        accessEndpoints=[],",
            "        appBlockArns=[],",
            "        description=${4:str},",
            "        displayName=${5:str},",
            "        enableDefaultInternetAccess=${6:bool},",
            "        iamRoleArn=${7:str},",
            "        instanceType=${8:str}, # Required",
            "        name=${9:str}, # Required",
            "        platform=${10:str}, # Required",
            "        tags=[],",
            "        vpcConfig={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnAppBlockBuilder",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnAppBlockBuilder",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrArn"
        ],
        "prefix": "l1-appstream-appblockbuilder",
        "scope": "python"
    },
    "appstream.CfnApplication": {
        "body": [
            "appstream.CfnApplication(self, \"${1:id}\", ",
            "        appBlockArn=${2:str}, # Required",
            "        attributesToDelete=[],",
            "        description=${4:str},",
            "        displayName=${5:str},",
            "        iconS3Location={",
            "            s3Bucket=${6:str},",
            "            s3Key=${7:str},",
            "        },",
            "        instanceFamilies=[], # Required",
            "        launchParameters=${8:str},",
            "        launchPath=${9:str}, # Required",
            "        name=${10:str}, # Required",
            "        platforms=[], # Required",
            "        tags=[],",
            "        workingDirectory=${13:str},",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnApplication",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrArn"
        ],
        "prefix": "l1-appstream-application",
        "scope": "python"
    },
    "appstream.CfnApplicationEntitlementAssociation": {
        "body": [
            "appstream.CfnApplicationEntitlementAssociation(self, \"${1:id}\", ",
            "        applicationIdentifier=${2:str}, # Required",
            "        entitlementName=${3:str}, # Required",
            "        stackName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnApplicationEntitlementAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnApplicationEntitlementAssociation"
        ],
        "prefix": "l1-appstream-applicationentitlementassociation",
        "scope": "python"
    },
    "appstream.CfnApplicationFleetAssociation": {
        "body": [
            "appstream.CfnApplicationFleetAssociation(self, \"${1:id}\", ",
            "        applicationArn=${2:str}, # Required",
            "        fleetName=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnApplicationFleetAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnApplicationFleetAssociation"
        ],
        "prefix": "l1-appstream-applicationfleetassociation",
        "scope": "python"
    },
    "appstream.CfnDirectoryConfig": {
        "body": [
            "appstream.CfnDirectoryConfig(self, \"${1:id}\", ",
            "        certificateBasedAuthProperties={",
            "            certificateAuthorityArn=${2:str},",
            "            status=${3:str},",
            "        },",
            "        directoryName=${3:str}, # Required",
            "        organizationalUnitDistinguishedNames=[], # Required",
            "        serviceAccountCredentials={",
            "            accountName=${5:str},",
            "            accountPassword=${6:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnDirectoryConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnDirectoryConfig"
        ],
        "prefix": "l1-appstream-directoryconfig",
        "scope": "python"
    },
    "appstream.CfnEntitlement": {
        "body": [
            "appstream.CfnEntitlement(self, \"${1:id}\", ",
            "        appVisibility=${2:str}, # Required",
            "        attributes=[], # Required",
            "        description=${4:str},",
            "        name=${5:str}, # Required",
            "        stackName=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnEntitlement",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnEntitlement",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastModifiedTime"
        ],
        "prefix": "l1-appstream-entitlement",
        "scope": "python"
    },
    "appstream.CfnFleet": {
        "body": [
            "appstream.CfnFleet(self, \"${1:id}\", ",
            "        computeCapacity={",
            "            desiredInstances=${2:int},",
            "            desiredSessions=${3:int},",
            "        },",
            "        description=${3:str},",
            "        disconnectTimeoutInSeconds=${4:int},",
            "        displayName=${5:str},",
            "        domainJoinInfo={",
            "            directoryName=${6:str},",
            "            organizationalUnitDistinguishedName=${7:str},",
            "        },",
            "        enableDefaultInternetAccess=${7:bool},",
            "        fleetType=${8:str},",
            "        iamRoleArn=${9:str},",
            "        idleDisconnectTimeoutInSeconds=${10:int},",
            "        imageArn=${11:str},",
            "        imageName=${12:str},",
            "        instanceType=${13:str}, # Required",
            "        maxConcurrentSessions=${14:int},",
            "        maxSessionsPerInstance=${15:int},",
            "        maxUserDurationInSeconds=${16:int},",
            "        name=${17:str}, # Required",
            "        platform=${18:str},",
            "        sessionScriptS3Location={",
            "            s3Bucket=${19:str},",
            "            s3Key=${20:str},",
            "        },",
            "        streamView=${20:str},",
            "        tags=[],",
            "        usbDeviceFilterStrings=[],",
            "        vpcConfig={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnFleet"
        ],
        "prefix": "l1-appstream-fleet",
        "scope": "python"
    },
    "appstream.CfnImageBuilder": {
        "body": [
            "appstream.CfnImageBuilder(self, \"${1:id}\", ",
            "        accessEndpoints=[],",
            "        appstreamAgentVersion=${3:str},",
            "        description=${4:str},",
            "        displayName=${5:str},",
            "        domainJoinInfo={",
            "            directoryName=${6:str},",
            "            organizationalUnitDistinguishedName=${7:str},",
            "        },",
            "        enableDefaultInternetAccess=${7:bool},",
            "        iamRoleArn=${8:str},",
            "        imageArn=${9:str},",
            "        imageName=${10:str},",
            "        instanceType=${11:str}, # Required",
            "        name=${12:str}, # Required",
            "        tags=[],",
            "        vpcConfig={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnImageBuilder",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnImageBuilder",
            "Attributes: ",
            "  attrStreamingUrl"
        ],
        "prefix": "l1-appstream-imagebuilder",
        "scope": "python"
    },
    "appstream.CfnStack": {
        "body": [
            "appstream.CfnStack(self, \"${1:id}\", ",
            "        accessEndpoints=[],",
            "        applicationSettings={",
            "            enabled=${3:bool},",
            "            settingsGroup=${4:str},",
            "        },",
            "        attributesToDelete=[],",
            "        deleteStorageConnectors=${5:bool},",
            "        description=${6:str},",
            "        displayName=${7:str},",
            "        embedHostDomains=[],",
            "        feedbackURL=${9:str},",
            "        name=${10:str},",
            "        redirectURL=${11:str},",
            "        storageConnectors=[],",
            "        streamingExperienceSettings={",
            "            preferredProtocol=${13:str},",
            "        },",
            "        tags=[],",
            "        userSettings=[],",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnStack",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnStack"
        ],
        "prefix": "l1-appstream-stack",
        "scope": "python"
    },
    "appstream.CfnStackFleetAssociation": {
        "body": [
            "appstream.CfnStackFleetAssociation(self, \"${1:id}\", ",
            "        fleetName=${2:str}, # Required",
            "        stackName=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnStackFleetAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnStackFleetAssociation"
        ],
        "prefix": "l1-appstream-stackfleetassociation",
        "scope": "python"
    },
    "appstream.CfnStackUserAssociation": {
        "body": [
            "appstream.CfnStackUserAssociation(self, \"${1:id}\", ",
            "        authenticationType=${2:str}, # Required",
            "        sendEmailNotification=${3:bool},",
            "        stackName=${4:str}, # Required",
            "        userName=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnStackUserAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnStackUserAssociation"
        ],
        "prefix": "l1-appstream-stackuserassociation",
        "scope": "python"
    },
    "appstream.CfnUser": {
        "body": [
            "appstream.CfnUser(self, \"${1:id}\", ",
            "        authenticationType=${2:str}, # Required",
            "        firstName=${3:str},",
            "        lastName=${4:str},",
            "        messageAction=${5:str},",
            "        userName=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appstream.CfnUser",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appstream.CfnUser"
        ],
        "prefix": "l1-appstream-user",
        "scope": "python"
    },
    "appsync.CfnApiCache": {
        "body": [
            "appsync.CfnApiCache(self, \"${1:id}\", ",
            "        apiCachingBehavior=${2:str}, # Required",
            "        apiId=${3:str}, # Required",
            "        atRestEncryptionEnabled=${4:bool},",
            "        healthMetricsConfig=${5:str},",
            "        transitEncryptionEnabled=${6:bool},",
            "        ttl=${7:float}, # Required",
            "        type=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnApiCache",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnApiCache"
        ],
        "prefix": "l1-appsync-apicache",
        "scope": "python"
    },
    "appsync.CfnApiKey": {
        "body": [
            "appsync.CfnApiKey(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        apiKeyId=${3:str},",
            "        description=${4:str},",
            "        expires=${5:float},",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnApiKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnApiKey",
            "Attributes: ",
            "  attrApiKey",
            "  attrArn"
        ],
        "prefix": "l1-appsync-apikey",
        "scope": "python"
    },
    "appsync.CfnDataSource": {
        "body": [
            "appsync.CfnDataSource(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        description=${3:str},",
            "        dynamoDBConfig={",
            "            awsRegion=${4:str},",
            "            tableName=${6:str},",
            "            useCallerCredentials=${7:bool},",
            "            versioned=${8:bool},",
            "        },",
            "        elasticsearchConfig={",
            "            awsRegion=${5:str},",
            "            endpoint=${6:str},",
            "        },",
            "        eventBridgeConfig={",
            "            eventBusArn=${6:str},",
            "        },",
            "        httpConfig={",
            "            endpoint=${8:str},",
            "        },",
            "        lambdaConfig={",
            "            lambdaFunctionArn=${8:str},",
            "        },",
            "        metricsConfig=${9:str},",
            "        name=${10:str}, # Required",
            "        openSearchServiceConfig={",
            "            awsRegion=${11:str},",
            "            endpoint=${12:str},",
            "        },",
            "        relationalDatabaseConfig={",
            "            relationalDatabaseSourceType=${13:str},",
            "        },",
            "        serviceRoleArn=${13:str},",
            "        type=${14:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnDataSource",
            "Attributes: ",
            "  attrDataSourceArn",
            "  attrName"
        ],
        "prefix": "l1-appsync-datasource",
        "scope": "python"
    },
    "appsync.CfnDomainName": {
        "body": [
            "appsync.CfnDomainName(self, \"${1:id}\", ",
            "        certificateArn=${2:str}, # Required",
            "        description=${3:str},",
            "        domainName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnDomainName",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnDomainName",
            "Attributes: ",
            "  attrAppSyncDomainName",
            "  attrDomainName",
            "  attrHostedZoneId"
        ],
        "prefix": "l1-appsync-domainname",
        "scope": "python"
    },
    "appsync.CfnDomainNameApiAssociation": {
        "body": [
            "appsync.CfnDomainNameApiAssociation(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        domainName=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnDomainNameApiAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnDomainNameApiAssociation",
            "Attributes: ",
            "  attrApiAssociationIdentifier"
        ],
        "prefix": "l1-appsync-domainnameapiassociation",
        "scope": "python"
    },
    "appsync.CfnFunctionConfiguration": {
        "body": [
            "appsync.CfnFunctionConfiguration(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        code=${3:str},",
            "        codeS3Location=${4:str},",
            "        dataSourceName=${5:str}, # Required",
            "        description=${6:str},",
            "        functionVersion=${7:str},",
            "        maxBatchSize=${8:int},",
            "        name=${9:str}, # Required",
            "        requestMappingTemplate=${10:str},",
            "        requestMappingTemplateS3Location=${11:str},",
            "        responseMappingTemplate=${12:str},",
            "        responseMappingTemplateS3Location=${13:str},",
            "        runtime={",
            "            name=${14:str},",
            "            runtimeVersion=${15:str},",
            "        },",
            "        syncConfig={",
            "            conflictDetection=${15:str},",
            "            conflictHandler=${16:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnFunctionConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnFunctionConfiguration",
            "Attributes: ",
            "  attrFunctionId",
            "  attrFunctionArn",
            "  attrDataSourceName",
            "  attrName"
        ],
        "prefix": "l1-appsync-functionconfiguration",
        "scope": "python"
    },
    "appsync.CfnGraphQLApi": {
        "body": [
            "appsync.CfnGraphQLApi(self, \"${1:id}\", ",
            "        additionalAuthenticationProviders=[],",
            "        apiType=${3:str},",
            "        authenticationType=${4:str}, # Required",
            "        enhancedMetricsConfig={",
            "            dataSourceLevelMetricsBehavior=${5:str},",
            "            operationLevelMetricsConfig=${6:str},",
            "            resolverLevelMetricsBehavior=${7:str},",
            "        },",
            "        environmentVariables=${6:dict},",
            "        introspectionConfig=${7:str},",
            "        lambdaAuthorizerConfig={",
            "            authorizerResultTtlInSeconds=${8:float},",
            "            authorizerUri=${9:str},",
            "            identityValidationExpression=${10:str},",
            "        },",
            "        logConfig={",
            "            cloudWatchLogsRoleArn=${9:str},",
            "            excludeVerboseContent=${10:bool},",
            "            fieldLogLevel=${11:str},",
            "        },",
            "        mergedApiExecutionRoleArn=${10:str},",
            "        name=${11:str}, # Required",
            "        openIDConnectConfig={",
            "            authTTL=${12:float},",
            "            clientId=${13:str},",
            "            iatTTL=${14:float},",
            "            issuer=${15:str},",
            "        },",
            "        ownerContact=${13:str},",
            "        queryDepthLimit=${14:int},",
            "        resolverCountLimit=${15:int},",
            "        tags=[],",
            "        userPoolConfig={",
            "            appIdClientRegex=${17:str},",
            "            awsRegion=${18:str},",
            "            defaultAction=${19:str},",
            "            userPoolId=${20:str},",
            "        },",
            "        visibility=${18:str},",
            "        xrayEnabled=${19:bool},",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnGraphQLApi",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnGraphQLApi",
            "Attributes: ",
            "  attrRealtimeUrl",
            "  attrGraphQLUrl",
            "  attrGraphQLDns",
            "  attrRealtimeDns",
            "  attrArn",
            "  attrApiId",
            "  attrGraphQLEndpointArn"
        ],
        "prefix": "l1-appsync-graphqlapi",
        "scope": "python"
    },
    "appsync.CfnGraphQLSchema": {
        "body": [
            "appsync.CfnGraphQLSchema(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        definition=${3:str},",
            "        definitionS3Location=${4:str},",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnGraphQLSchema",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnGraphQLSchema"
        ],
        "prefix": "l1-appsync-graphqlschema",
        "scope": "python"
    },
    "appsync.CfnResolver": {
        "body": [
            "appsync.CfnResolver(self, \"${1:id}\", ",
            "        apiId=${2:str}, # Required",
            "        cachingConfig={",
            "            cachingKeys=[],",
            "            ttl=${4:float},",
            "        },",
            "        code=${4:str},",
            "        codeS3Location=${5:str},",
            "        dataSourceName=${6:str},",
            "        fieldName=${7:str}, # Required",
            "        kind=${8:str},",
            "        maxBatchSize=${9:int},",
            "        metricsConfig=${10:str},",
            "        pipelineConfig={",
            "            functions=[],",
            "        },",
            "        requestMappingTemplate=${12:str},",
            "        requestMappingTemplateS3Location=${13:str},",
            "        responseMappingTemplate=${14:str},",
            "        responseMappingTemplateS3Location=${15:str},",
            "        runtime={",
            "            name=${16:str},",
            "            runtimeVersion=${17:str},",
            "        },",
            "        syncConfig={",
            "            conflictDetection=${17:str},",
            "            conflictHandler=${18:str},",
            "        },",
            "        typeName=${18:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnResolver",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnResolver",
            "Attributes: ",
            "  attrTypeName",
            "  attrResolverArn",
            "  attrFieldName"
        ],
        "prefix": "l1-appsync-resolver",
        "scope": "python"
    },
    "appsync.CfnSourceApiAssociation": {
        "body": [
            "appsync.CfnSourceApiAssociation(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        mergedApiIdentifier=${3:str},",
            "        sourceApiAssociationConfig={",
            "            mergeType=${4:str},",
            "        },",
            "        sourceApiIdentifier=${5:str},",
            ")"
        ],
        "description": [
            "Construct: appsync.CfnSourceApiAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-appsync.CfnSourceApiAssociation",
            "Attributes: ",
            "  attrAssociationArn",
            "  attrMergedApiId",
            "  attrSourceApiArn",
            "  attrLastSuccessfulMergeDate",
            "  attrSourceApiAssociationStatusDetail",
            "  attrMergedApiArn",
            "  attrAssociationId",
            "  attrSourceApiAssociationStatus",
            "  attrSourceApiId"
        ],
        "prefix": "l1-appsync-sourceapiassociation",
        "scope": "python"
    },
    "apptest.CfnTestCase": {
        "body": [
            "apptest.CfnTestCase(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        steps=[], # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: apptest.CfnTestCase",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apptest.CfnTestCase",
            "Attributes: ",
            "  attrStatus",
            "  attrLastUpdateTime",
            "  attrLatestVersion",
            "  attrCreationTime",
            "  attrTestCaseId",
            "  attrLatestVersion.Version",
            "  attrLatestVersion.Status",
            "  attrTestCaseVersion",
            "  attrTestCaseArn"
        ],
        "prefix": "l1-apptest-testcase",
        "scope": "python"
    },
    "aps.CfnRuleGroupsNamespace": {
        "body": [
            "aps.CfnRuleGroupsNamespace(self, \"${1:id}\", ",
            "        data=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        tags=[],",
            "        workspace=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: aps.CfnRuleGroupsNamespace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-aps.CfnRuleGroupsNamespace",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-aps-rulegroupsnamespace",
        "scope": "python"
    },
    "aps.CfnScraper": {
        "body": [
            "aps.CfnScraper(self, \"${1:id}\", ",
            "        alias=${2:str},",
            "        destination={",
            "        },",
            "        scrapeConfiguration={",
            "            configurationBlob=${4:str},",
            "        },",
            "        source={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: aps.CfnScraper",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-aps.CfnScraper",
            "Attributes: ",
            "  attrScraperId",
            "  attrArn",
            "  attrRoleArn"
        ],
        "prefix": "l1-aps-scraper",
        "scope": "python"
    },
    "aps.CfnWorkspace": {
        "body": [
            "aps.CfnWorkspace(self, \"${1:id}\", ",
            "        alertManagerDefinition=${2:str},",
            "        alias=${3:str},",
            "        kmsKeyArn=${4:str},",
            "        loggingConfiguration={",
            "            logGroupArn=${5:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: aps.CfnWorkspace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-aps.CfnWorkspace",
            "Attributes: ",
            "  attrPrometheusEndpoint",
            "  attrWorkspaceId",
            "  attrArn"
        ],
        "prefix": "l1-aps-workspace",
        "scope": "python"
    },
    "arczonalshift.CfnZonalAutoshiftConfiguration": {
        "body": [
            "arczonalshift.CfnZonalAutoshiftConfiguration(self, \"${1:id}\", ",
            "        practiceRunConfiguration={",
            "            blockedDates=[],",
            "            blockedWindows=[],",
            "            blockingAlarms=[],",
            "            outcomeAlarms=[],",
            "        },",
            "        resourceIdentifier=${3:str}, # Required",
            "        zonalAutoshiftStatus=${4:str},",
            ")"
        ],
        "description": [
            "Construct: arczonalshift.CfnZonalAutoshiftConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-arczonalshift.CfnZonalAutoshiftConfiguration"
        ],
        "prefix": "l1-arczonalshift-zonalautoshiftconfiguration",
        "scope": "python"
    },
    "athena.CfnCapacityReservation": {
        "body": [
            "athena.CfnCapacityReservation(self, \"${1:id}\", ",
            "        capacityAssignmentConfiguration={",
            "            capacityAssignments=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=[],",
            "        targetDpus=${5:int}, # Required",
            ")"
        ],
        "description": [
            "Construct: athena.CfnCapacityReservation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-athena.CfnCapacityReservation",
            "Attributes: ",
            "  attrStatus",
            "  attrAllocatedDpus",
            "  attrCreationTime",
            "  attrLastSuccessfulAllocationTime",
            "  attrArn"
        ],
        "prefix": "l1-athena-capacityreservation",
        "scope": "python"
    },
    "athena.CfnDataCatalog": {
        "body": [
            "athena.CfnDataCatalog(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        parameters={",
            "        },",
            "        tags=[],",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: athena.CfnDataCatalog",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-athena.CfnDataCatalog"
        ],
        "prefix": "l1-athena-datacatalog",
        "scope": "python"
    },
    "athena.CfnNamedQuery": {
        "body": [
            "athena.CfnNamedQuery(self, \"${1:id}\", ",
            "        database=${2:str}, # Required",
            "        description=${3:str},",
            "        name=${4:str},",
            "        queryString=${5:str}, # Required",
            "        workGroup=${6:str},",
            ")"
        ],
        "description": [
            "Construct: athena.CfnNamedQuery",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-athena.CfnNamedQuery",
            "Attributes: ",
            "  attrNamedQueryId"
        ],
        "prefix": "l1-athena-namedquery",
        "scope": "python"
    },
    "athena.CfnPreparedStatement": {
        "body": [
            "athena.CfnPreparedStatement(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        queryStatement=${3:str}, # Required",
            "        statementName=${4:str}, # Required",
            "        workGroup=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: athena.CfnPreparedStatement",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-athena.CfnPreparedStatement"
        ],
        "prefix": "l1-athena-preparedstatement",
        "scope": "python"
    },
    "athena.CfnWorkGroup": {
        "body": [
            "athena.CfnWorkGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        recursiveDeleteOption=${4:bool},",
            "        state=${5:str},",
            "        tags=[],",
            "        workGroupConfiguration={",
            "            additionalConfiguration=${7:str},",
            "            bytesScannedCutoffPerQuery=${8:int},",
            "            enforceWorkGroupConfiguration=${10:bool},",
            "            executionRole=${12:str},",
            "            publishCloudWatchMetricsEnabled=${13:bool},",
            "            requesterPaysEnabled=${14:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: athena.CfnWorkGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-athena.CfnWorkGroup",
            "Attributes: ",
            "  attrCreationTime",
            "  attrWorkGroupConfiguration.EngineVersion.EffectiveEngineVersion"
        ],
        "prefix": "l1-athena-workgroup",
        "scope": "python"
    },
    "auditmanager.CfnAssessment": {
        "body": [
            "auditmanager.CfnAssessment(self, \"${1:id}\", ",
            "        assessmentReportsDestination={",
            "            destination=${2:str},",
            "            destinationType=${3:str},",
            "        },",
            "        awsAccount={",
            "            emailAddress=${3:str},",
            "            id=${4:str},",
            "            name=${5:str},",
            "        },",
            "        delegations=[],",
            "        description=${5:str},",
            "        frameworkId=${6:str},",
            "        name=${7:str},",
            "        roles=[],",
            "        scope={",
            "            awsAccounts=[],",
            "            awsServices=[],",
            "        },",
            "        status=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: auditmanager.CfnAssessment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-auditmanager.CfnAssessment",
            "Attributes: ",
            "  attrAssessmentId",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-auditmanager-assessment",
        "scope": "python"
    },
    "autoscaling.CfnAutoScalingGroup": {
        "body": [
            "autoscaling.CfnAutoScalingGroup(self, \"${1:id}\", ",
            "        autoScalingGroupName=${2:str},",
            "        availabilityZones=[],",
            "        capacityRebalance=${4:bool},",
            "        context=${5:str},",
            "        cooldown=${6:str},",
            "        defaultInstanceWarmup=${7:int},",
            "        desiredCapacity=${8:str},",
            "        desiredCapacityType=${9:str},",
            "        healthCheckGracePeriod=${10:int},",
            "        healthCheckType=${11:str},",
            "        instanceId=${12:str},",
            "        instanceMaintenancePolicy={",
            "            maxHealthyPercentage=${13:int},",
            "            minHealthyPercentage=${14:int},",
            "        },",
            "        launchConfigurationName=${14:str},",
            "        launchTemplate={",
            "            launchTemplateId=${15:str},",
            "            launchTemplateName=${16:str},",
            "            version=${17:str},",
            "        },",
            "        lifecycleHookSpecificationList=[],",
            "        loadBalancerNames=[],",
            "        maxInstanceLifetime=${18:int},",
            "        maxSize=${19:str}, # Required",
            "        metricsCollection=[],",
            "        minSize=${21:str}, # Required",
            "        mixedInstancesPolicy={",
            "        },",
            "        newInstancesProtectedFromScaleIn=${23:bool},",
            "        notificationConfigurations=[],",
            "        placementGroup=${25:str},",
            "        serviceLinkedRoleARN=${26:str},",
            "        tags=[],",
            "        targetGroupARNs=[],",
            "        terminationPolicies=[],",
            "        vPCZoneIdentifier=[],",
            ")"
        ],
        "description": [
            "Construct: autoscaling.CfnAutoScalingGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-autoscaling.CfnAutoScalingGroup"
        ],
        "prefix": "l1-autoscaling-autoscalinggroup",
        "scope": "python"
    },
    "autoscaling.CfnLaunchConfiguration": {
        "body": [
            "autoscaling.CfnLaunchConfiguration(self, \"${1:id}\", ",
            "        associatePublicIpAddress=${2:bool},",
            "        blockDeviceMappings=[],",
            "        classicLinkVPCId=${4:str},",
            "        classicLinkVPCSecurityGroups=[],",
            "        ebsOptimized=${6:bool},",
            "        iamInstanceProfile=${7:str},",
            "        imageId=${8:str}, # Required",
            "        instanceId=${9:str},",
            "        instanceMonitoring=${10:bool},",
            "        instanceType=${11:str}, # Required",
            "        kernelId=${12:str},",
            "        keyName=${13:str},",
            "        launchConfigurationName=${14:str},",
            "        metadataOptions={",
            "            httpEndpoint=${15:str},",
            "            httpPutResponseHopLimit=${16:int},",
            "            httpTokens=${17:str},",
            "        },",
            "        placementTenancy=${16:str},",
            "        ramDiskId=${17:str},",
            "        securityGroups=[],",
            "        spotPrice=${19:str},",
            "        userData=${20:str},",
            ")"
        ],
        "description": [
            "Construct: autoscaling.CfnLaunchConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-autoscaling.CfnLaunchConfiguration"
        ],
        "prefix": "l1-autoscaling-launchconfiguration",
        "scope": "python"
    },
    "autoscaling.CfnLifecycleHook": {
        "body": [
            "autoscaling.CfnLifecycleHook(self, \"${1:id}\", ",
            "        autoScalingGroupName=${2:str}, # Required",
            "        defaultResult=${3:str},",
            "        heartbeatTimeout=${4:int},",
            "        lifecycleHookName=${5:str},",
            "        lifecycleTransition=${6:str}, # Required",
            "        notificationMetadata=${7:str},",
            "        notificationTargetARN=${8:str},",
            "        roleARN=${9:str},",
            ")"
        ],
        "description": [
            "Construct: autoscaling.CfnLifecycleHook",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-autoscaling.CfnLifecycleHook"
        ],
        "prefix": "l1-autoscaling-lifecyclehook",
        "scope": "python"
    },
    "autoscaling.CfnScalingPolicy": {
        "body": [
            "autoscaling.CfnScalingPolicy(self, \"${1:id}\", ",
            "        adjustmentType=${2:str},",
            "        autoScalingGroupName=${3:str}, # Required",
            "        cooldown=${4:str},",
            "        estimatedInstanceWarmup=${5:int},",
            "        metricAggregationType=${6:str},",
            "        minAdjustmentMagnitude=${7:int},",
            "        policyType=${8:str},",
            "        predictiveScalingConfiguration={",
            "            maxCapacityBreachBehavior=${9:str},",
            "            maxCapacityBuffer=${10:int},",
            "            metricSpecifications=[],",
            "            mode=${12:str},",
            "            schedulingBufferTime=${13:int},",
            "        },",
            "        scalingAdjustment=${10:int},",
            "        stepAdjustments=[],",
            "        targetTrackingConfiguration={",
            "            disableScaleIn=${13:bool},",
            "            targetValue=${15:float},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: autoscaling.CfnScalingPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-autoscaling.CfnScalingPolicy",
            "Attributes: ",
            "  attrPolicyName",
            "  attrArn"
        ],
        "prefix": "l1-autoscaling-scalingpolicy",
        "scope": "python"
    },
    "autoscaling.CfnScheduledAction": {
        "body": [
            "autoscaling.CfnScheduledAction(self, \"${1:id}\", ",
            "        autoScalingGroupName=${2:str}, # Required",
            "        desiredCapacity=${3:int},",
            "        endTime=${4:str},",
            "        maxSize=${5:int},",
            "        minSize=${6:int},",
            "        recurrence=${7:str},",
            "        startTime=${8:str},",
            "        timeZone=${9:str},",
            ")"
        ],
        "description": [
            "Construct: autoscaling.CfnScheduledAction",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-autoscaling.CfnScheduledAction",
            "Attributes: ",
            "  attrScheduledActionName"
        ],
        "prefix": "l1-autoscaling-scheduledaction",
        "scope": "python"
    },
    "autoscaling.CfnWarmPool": {
        "body": [
            "autoscaling.CfnWarmPool(self, \"${1:id}\", ",
            "        autoScalingGroupName=${2:str}, # Required",
            "        instanceReusePolicy={",
            "            reuseOnScaleIn=${3:bool},",
            "        },",
            "        maxGroupPreparedCapacity=${4:int},",
            "        minSize=${5:int},",
            "        poolState=${6:str},",
            ")"
        ],
        "description": [
            "Construct: autoscaling.CfnWarmPool",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-autoscaling.CfnWarmPool"
        ],
        "prefix": "l1-autoscaling-warmpool",
        "scope": "python"
    },
    "autoscalingplans.CfnScalingPlan": {
        "body": [
            "autoscalingplans.CfnScalingPlan(self, \"${1:id}\", ",
            "        applicationSource={",
            "            cloudFormationStackARN=${2:str},",
            "            tagFilters=[],",
            "        },",
            "        scalingInstructions=[], # Required",
            ")"
        ],
        "description": [
            "Construct: autoscalingplans.CfnScalingPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-autoscalingplans.CfnScalingPlan",
            "Attributes: ",
            "  attrScalingPlanName",
            "  attrScalingPlanVersion"
        ],
        "prefix": "l1-autoscalingplans-scalingplan",
        "scope": "python"
    },
    "b2bi.CfnCapability": {
        "body": [
            "b2bi.CfnCapability(self, \"${1:id}\", ",
            "        configuration={",
            "        },",
            "        instructionsDocuments=[],",
            "        name=${4:str}, # Required",
            "        tags=[],",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: b2bi.CfnCapability",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-b2bi.CfnCapability",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrCapabilityId",
            "  attrCapabilityArn",
            "  attrCreatedAt"
        ],
        "prefix": "l1-b2bi-capability",
        "scope": "python"
    },
    "b2bi.CfnPartnership": {
        "body": [
            "b2bi.CfnPartnership(self, \"${1:id}\", ",
            "        capabilities=[],",
            "        email=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        phone=${5:str},",
            "        profileId=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: b2bi.CfnPartnership",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-b2bi.CfnPartnership",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrTradingPartnerId",
            "  attrPartnershipId",
            "  attrCreatedAt",
            "  attrPartnershipArn"
        ],
        "prefix": "l1-b2bi-partnership",
        "scope": "python"
    },
    "b2bi.CfnProfile": {
        "body": [
            "b2bi.CfnProfile(self, \"${1:id}\", ",
            "        businessName=${2:str}, # Required",
            "        email=${3:str},",
            "        logging=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        phone=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: b2bi.CfnProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-b2bi.CfnProfile",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrProfileId",
            "  attrCreatedAt",
            "  attrLogGroupName",
            "  attrProfileArn"
        ],
        "prefix": "l1-b2bi-profile",
        "scope": "python"
    },
    "b2bi.CfnTransformer": {
        "body": [
            "b2bi.CfnTransformer(self, \"${1:id}\", ",
            "        ediType={",
            "        },",
            "        fileFormat=${3:str}, # Required",
            "        mappingTemplate=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        sampleDocument=${6:str},",
            "        status=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: b2bi.CfnTransformer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-b2bi.CfnTransformer",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrTransformerId",
            "  attrTransformerArn",
            "  attrCreatedAt"
        ],
        "prefix": "l1-b2bi-transformer",
        "scope": "python"
    },
    "backup.CfnBackupPlan": {
        "body": [
            "backup.CfnBackupPlan(self, \"${1:id}\", ",
            "        backupPlan={",
            "            advancedBackupSettings=[],",
            "            backupPlanName=${3:str},",
            "            backupPlanRule=[],",
            "        },",
            "        backupPlanTags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: backup.CfnBackupPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backup.CfnBackupPlan",
            "Attributes: ",
            "  attrVersionId",
            "  attrBackupPlanId",
            "  attrBackupPlanArn"
        ],
        "prefix": "l1-backup-backupplan",
        "scope": "python"
    },
    "backup.CfnBackupSelection": {
        "body": [
            "backup.CfnBackupSelection(self, \"${1:id}\", ",
            "        backupPlanId=${2:str}, # Required",
            "        backupSelection={",
            "            iamRoleArn=${4:str},",
            "            listOfTags=[],",
            "            notResources=[],",
            "            resources=[],",
            "            selectionName=${8:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: backup.CfnBackupSelection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backup.CfnBackupSelection",
            "Attributes: ",
            "  attrBackupPlanId",
            "  attrId",
            "  attrSelectionId"
        ],
        "prefix": "l1-backup-backupselection",
        "scope": "python"
    },
    "backup.CfnBackupVault": {
        "body": [
            "backup.CfnBackupVault(self, \"${1:id}\", ",
            "        accessPolicy=${2:dict},",
            "        backupVaultName=${3:str}, # Required",
            "        backupVaultTags={",
            "        },",
            "        encryptionKeyArn=${5:str},",
            "        lockConfiguration={",
            "            changeableForDays=${6:int},",
            "            maxRetentionDays=${7:int},",
            "            minRetentionDays=${8:int},",
            "        },",
            "        notifications={",
            "            backupVaultEvents=[],",
            "            sNSTopicArn=${8:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: backup.CfnBackupVault",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backup.CfnBackupVault",
            "Attributes: ",
            "  attrBackupVaultName",
            "  attrBackupVaultArn"
        ],
        "prefix": "l1-backup-backupvault",
        "scope": "python"
    },
    "backup.CfnFramework": {
        "body": [
            "backup.CfnFramework(self, \"${1:id}\", ",
            "        frameworkControls=[], # Required",
            "        frameworkDescription=${3:str},",
            "        frameworkName=${4:str},",
            "        frameworkTags=[],",
            ")"
        ],
        "description": [
            "Construct: backup.CfnFramework",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backup.CfnFramework",
            "Attributes: ",
            "  attrCreationTime",
            "  attrFrameworkStatus",
            "  attrDeploymentStatus",
            "  attrFrameworkArn"
        ],
        "prefix": "l1-backup-framework",
        "scope": "python"
    },
    "backup.CfnReportPlan": {
        "body": [
            "backup.CfnReportPlan(self, \"${1:id}\", ",
            "        reportDeliveryChannel={",
            "            formats=[],",
            "            s3BucketName=${3:str},",
            "            s3KeyPrefix=${4:str},",
            "        },",
            "        reportPlanDescription=${3:str},",
            "        reportPlanName=${4:str},",
            "        reportPlanTags=[],",
            "        reportSetting={",
            "            accounts=[],",
            "            frameworkArns=[],",
            "            organizationUnits=[],",
            "            regions=[],",
            "            reportTemplate=${10:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: backup.CfnReportPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backup.CfnReportPlan",
            "Attributes: ",
            "  attrReportPlanArn"
        ],
        "prefix": "l1-backup-reportplan",
        "scope": "python"
    },
    "backup.CfnRestoreTestingPlan": {
        "body": [
            "backup.CfnRestoreTestingPlan(self, \"${1:id}\", ",
            "        recoveryPointSelection={",
            "            algorithm=${2:str},",
            "            excludeVaults=[],",
            "            includeVaults=[],",
            "            recoveryPointTypes=[],",
            "            selectionWindowDays=${6:int},",
            "        },",
            "        restoreTestingPlanName=${3:str}, # Required",
            "        scheduleExpression=${4:str}, # Required",
            "        scheduleExpressionTimezone=${5:str},",
            "        startWindowHours=${6:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: backup.CfnRestoreTestingPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backup.CfnRestoreTestingPlan",
            "Attributes: ",
            "  attrRestoreTestingPlanArn"
        ],
        "prefix": "l1-backup-restoretestingplan",
        "scope": "python"
    },
    "backup.CfnRestoreTestingSelection": {
        "body": [
            "backup.CfnRestoreTestingSelection(self, \"${1:id}\", ",
            "        iamRoleArn=${2:str}, # Required",
            "        protectedResourceArns=[],",
            "        protectedResourceConditions={",
            "            stringEquals=[],",
            "            stringNotEquals=[],",
            "        },",
            "        protectedResourceType=${5:str}, # Required",
            "        restoreMetadataOverrides={",
            "        },",
            "        restoreTestingPlanName=${7:str}, # Required",
            "        restoreTestingSelectionName=${8:str}, # Required",
            "        validationWindowHours=${9:int},",
            ")"
        ],
        "description": [
            "Construct: backup.CfnRestoreTestingSelection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backup.CfnRestoreTestingSelection"
        ],
        "prefix": "l1-backup-restoretestingselection",
        "scope": "python"
    },
    "backupgateway.CfnHypervisor": {
        "body": [
            "backupgateway.CfnHypervisor(self, \"${1:id}\", ",
            "        host=${2:str},",
            "        kmsKeyArn=${3:str},",
            "        logGroupArn=${4:str},",
            "        name=${5:str},",
            "        password=${6:str},",
            "        tags=[],",
            "        username=${8:str},",
            ")"
        ],
        "description": [
            "Construct: backupgateway.CfnHypervisor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-backupgateway.CfnHypervisor",
            "Attributes: ",
            "  attrHypervisorArn"
        ],
        "prefix": "l1-backupgateway-hypervisor",
        "scope": "python"
    },
    "batch.CfnComputeEnvironment": {
        "body": [
            "batch.CfnComputeEnvironment(self, \"${1:id}\", ",
            "        computeEnvironmentName=${2:str},",
            "        computeResources={",
            "            allocationStrategy=${3:str},",
            "            bidPercentage=${4:int},",
            "            desiredvCpus=${5:int},",
            "            ec2Configuration=[],",
            "            ec2KeyPair=${7:str},",
            "            imageId=${8:str},",
            "            instanceRole=${9:str},",
            "            instanceTypes=[],",
            "            maxvCpus=${12:int},",
            "            minvCpus=${13:int},",
            "            placementGroup=${14:str},",
            "            securityGroupIds=[],",
            "            spotIamFleetRole=${16:str},",
            "            subnets=[],",
            "            type=${19:str},",
            "            updateToLatestImageVersion=${20:bool},",
            "        },",
            "        eksConfiguration={",
            "            eksClusterArn=${4:str},",
            "            kubernetesNamespace=${5:str},",
            "        },",
            "        replaceComputeEnvironment=${5:bool},",
            "        serviceRole=${6:str},",
            "        state=${7:str},",
            "        tags={",
            "        },",
            "        type=${9:str}, # Required",
            "        unmanagedvCpus=${10:int},",
            "        updatePolicy={",
            "            jobExecutionTimeoutMinutes=${11:int},",
            "            terminateJobsOnUpdate=${12:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: batch.CfnComputeEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-batch.CfnComputeEnvironment",
            "Attributes: ",
            "  attrComputeEnvironmentArn"
        ],
        "prefix": "l1-batch-computeenvironment",
        "scope": "python"
    },
    "batch.CfnJobDefinition": {
        "body": [
            "batch.CfnJobDefinition(self, \"${1:id}\", ",
            "        containerProperties={",
            "            command=[],",
            "            environment=[],",
            "            executionRoleArn=${5:str},",
            "            image=${7:str},",
            "            instanceType=${8:str},",
            "            jobRoleArn=${9:str},",
            "            memory=${12:int},",
            "            mountPoints=[],",
            "            privileged=${15:bool},",
            "            readonlyRootFilesystem=${16:bool},",
            "            resourceRequirements=[],",
            "            secrets=[],",
            "            ulimits=[],",
            "            user=${22:str},",
            "            vcpus=${23:int},",
            "            volumes=[],",
            "        },",
            "        ecsProperties={",
            "            taskProperties=[],",
            "        },",
            "        eksProperties={",
            "        },",
            "        jobDefinitionName=${5:str},",
            "        nodeProperties={",
            "            mainNode=${6:int},",
            "            nodeRangeProperties=[],",
            "            numNodes=${8:int},",
            "        },",
            "        parameters=${7:dict},",
            "        platformCapabilities=[],",
            "        propagateTags=${9:bool},",
            "        retryStrategy={",
            "            attempts=${10:int},",
            "            evaluateOnExit=[],",
            "        },",
            "        schedulingPriority=${11:int},",
            "        tags=${12:dict},",
            "        timeout={",
            "            attemptDurationSeconds=${13:int},",
            "        },",
            "        type=${14:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: batch.CfnJobDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-batch.CfnJobDefinition"
        ],
        "prefix": "l1-batch-jobdefinition",
        "scope": "python"
    },
    "batch.CfnJobQueue": {
        "body": [
            "batch.CfnJobQueue(self, \"${1:id}\", ",
            "        computeEnvironmentOrder=[], # Required",
            "        jobQueueName=${3:str},",
            "        jobStateTimeLimitActions=[],",
            "        priority=${5:int}, # Required",
            "        schedulingPolicyArn=${6:str},",
            "        state=${7:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: batch.CfnJobQueue",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-batch.CfnJobQueue",
            "Attributes: ",
            "  attrJobQueueArn"
        ],
        "prefix": "l1-batch-jobqueue",
        "scope": "python"
    },
    "batch.CfnSchedulingPolicy": {
        "body": [
            "batch.CfnSchedulingPolicy(self, \"${1:id}\", ",
            "        fairsharePolicy={",
            "            computeReservation=${2:float},",
            "            shareDecaySeconds=${3:float},",
            "            shareDistribution=[],",
            "        },",
            "        name=${3:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: batch.CfnSchedulingPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-batch.CfnSchedulingPolicy",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-batch-schedulingpolicy",
        "scope": "python"
    },
    "bcmdataexports.CfnExport": {
        "body": [
            "bcmdataexports.CfnExport(self, \"${1:id}\", ",
            "        export={",
            "            description=${3:str},",
            "            exportArn=${5:str},",
            "            name=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: bcmdataexports.CfnExport",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-bcmdataexports.CfnExport",
            "Attributes: ",
            "  attrExportArn"
        ],
        "prefix": "l1-bcmdataexports-export",
        "scope": "python"
    },
    "bedrock.CfnAgent": {
        "body": [
            "bedrock.CfnAgent(self, \"${1:id}\", ",
            "        actionGroups=[],",
            "        agentName=${3:str}, # Required",
            "        agentResourceRoleArn=${4:str},",
            "        autoPrepare=${5:bool},",
            "        customerEncryptionKeyArn=${6:str},",
            "        description=${7:str},",
            "        foundationModel=${8:str},",
            "        guardrailConfiguration={",
            "            guardrailIdentifier=${9:str},",
            "            guardrailVersion=${10:str},",
            "        },",
            "        idleSessionTTLInSeconds=${10:float},",
            "        instruction=${11:str},",
            "        knowledgeBases=[],",
            "        promptOverrideConfiguration={",
            "            overrideLambda=${13:str},",
            "            promptConfigurations=[],",
            "        },",
            "        skipResourceInUseCheckOnDelete=${14:bool},",
            "        tags={",
            "        },",
            "        testAliasTags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: bedrock.CfnAgent",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-bedrock.CfnAgent",
            "Attributes: ",
            "  attrAgentArn",
            "  attrAgentStatus",
            "  attrAgentVersion",
            "  attrCreatedAt",
            "  attrPreparedAt",
            "  attrAgentId",
            "  attrFailureReasons",
            "  attrUpdatedAt",
            "  attrRecommendedActions"
        ],
        "prefix": "l1-bedrock-agent",
        "scope": "python"
    },
    "bedrock.CfnAgentAlias": {
        "body": [
            "bedrock.CfnAgentAlias(self, \"${1:id}\", ",
            "        agentAliasName=${2:str}, # Required",
            "        agentId=${3:str}, # Required",
            "        description=${4:str},",
            "        routingConfiguration=[],",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: bedrock.CfnAgentAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-bedrock.CfnAgentAlias",
            "Attributes: ",
            "  attrAgentAliasStatus",
            "  attrAgentAliasArn",
            "  attrAgentAliasHistoryEvents",
            "  attrCreatedAt",
            "  attrAgentAliasId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-bedrock-agentalias",
        "scope": "python"
    },
    "bedrock.CfnDataSource": {
        "body": [
            "bedrock.CfnDataSource(self, \"${1:id}\", ",
            "        dataDeletionPolicy=${2:str},",
            "        dataSourceConfiguration={",
            "            type=${4:str},",
            "        },",
            "        description=${4:str},",
            "        knowledgeBaseId=${5:str}, # Required",
            "        name=${6:str}, # Required",
            "        serverSideEncryptionConfiguration={",
            "            kmsKeyArn=${7:str},",
            "        },",
            "        vectorIngestionConfiguration={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: bedrock.CfnDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-bedrock.CfnDataSource",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrDataSourceStatus",
            "  attrUpdatedAt",
            "  attrFailureReasons",
            "  attrDataSourceId"
        ],
        "prefix": "l1-bedrock-datasource",
        "scope": "python"
    },
    "bedrock.CfnGuardrail": {
        "body": [
            "bedrock.CfnGuardrail(self, \"${1:id}\", ",
            "        blockedInputMessaging=${2:str}, # Required",
            "        blockedOutputsMessaging=${3:str}, # Required",
            "        contentPolicyConfig={",
            "            filtersConfig=[],",
            "        },",
            "        description=${5:str},",
            "        kmsKeyArn=${6:str},",
            "        name=${7:str}, # Required",
            "        sensitiveInformationPolicyConfig={",
            "            piiEntitiesConfig=[],",
            "            regexesConfig=[],",
            "        },",
            "        tags=[],",
            "        topicPolicyConfig={",
            "            topicsConfig=[],",
            "        },",
            "        wordPolicyConfig={",
            "            managedWordListsConfig=[],",
            "            wordsConfig=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: bedrock.CfnGuardrail",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-bedrock.CfnGuardrail",
            "Attributes: ",
            "  attrFailureRecommendations",
            "  attrGuardrailId",
            "  attrStatus",
            "  attrStatusReasons",
            "  attrGuardrailArn",
            "  attrVersion",
            "  attrCreatedAt",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-bedrock-guardrail",
        "scope": "python"
    },
    "bedrock.CfnGuardrailVersion": {
        "body": [
            "bedrock.CfnGuardrailVersion(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        guardrailIdentifier=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: bedrock.CfnGuardrailVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-bedrock.CfnGuardrailVersion",
            "Attributes: ",
            "  attrGuardrailId",
            "  attrGuardrailArn",
            "  attrVersion"
        ],
        "prefix": "l1-bedrock-guardrailversion",
        "scope": "python"
    },
    "bedrock.CfnKnowledgeBase": {
        "body": [
            "bedrock.CfnKnowledgeBase(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        knowledgeBaseConfiguration={",
            "            type=${3:str},",
            "        },",
            "        name=${4:str}, # Required",
            "        roleArn=${5:str}, # Required",
            "        storageConfiguration={",
            "            type=${9:str},",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: bedrock.CfnKnowledgeBase",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-bedrock.CfnKnowledgeBase",
            "Attributes: ",
            "  attrStatus",
            "  attrCreatedAt",
            "  attrKnowledgeBaseArn",
            "  attrKnowledgeBaseId",
            "  attrFailureReasons",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-bedrock-knowledgebase",
        "scope": "python"
    },
    "billingconductor.CfnBillingGroup": {
        "body": [
            "billingconductor.CfnBillingGroup(self, \"${1:id}\", ",
            "        accountGrouping={",
            "            autoAssociate=${2:bool},",
            "            linkedAccountIds=[],",
            "        },",
            "        computationPreference={",
            "            pricingPlanArn=${3:str},",
            "        },",
            "        description=${4:str},",
            "        name=${5:str}, # Required",
            "        primaryAccountId=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: billingconductor.CfnBillingGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-billingconductor.CfnBillingGroup",
            "Attributes: ",
            "  attrStatus",
            "  attrSize",
            "  attrStatusReason",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrArn"
        ],
        "prefix": "l1-billingconductor-billinggroup",
        "scope": "python"
    },
    "billingconductor.CfnCustomLineItem": {
        "body": [
            "billingconductor.CfnCustomLineItem(self, \"${1:id}\", ",
            "        accountId=${2:str},",
            "        billingGroupArn=${3:str}, # Required",
            "        billingPeriodRange={",
            "            exclusiveEndBillingPeriod=${4:str},",
            "            inclusiveStartBillingPeriod=${5:str},",
            "        },",
            "        customLineItemChargeDetails={",
            "            lineItemFilters=[],",
            "            type=${8:str},",
            "        },",
            "        description=${6:str},",
            "        name=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: billingconductor.CfnCustomLineItem",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-billingconductor.CfnCustomLineItem",
            "Attributes: ",
            "  attrCurrencyCode",
            "  attrProductCode",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrAssociationSize",
            "  attrArn"
        ],
        "prefix": "l1-billingconductor-customlineitem",
        "scope": "python"
    },
    "billingconductor.CfnPricingPlan": {
        "body": [
            "billingconductor.CfnPricingPlan(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        pricingRuleArns=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: billingconductor.CfnPricingPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-billingconductor.CfnPricingPlan",
            "Attributes: ",
            "  attrSize",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrArn"
        ],
        "prefix": "l1-billingconductor-pricingplan",
        "scope": "python"
    },
    "billingconductor.CfnPricingRule": {
        "body": [
            "billingconductor.CfnPricingRule(self, \"${1:id}\", ",
            "        billingEntity=${2:str},",
            "        description=${3:str},",
            "        modifierPercentage=${4:float},",
            "        name=${5:str}, # Required",
            "        operation=${6:str},",
            "        scope=${7:str}, # Required",
            "        service=${8:str},",
            "        tags=[],",
            "        tiering={",
            "        },",
            "        type=${11:str}, # Required",
            "        usageType=${12:str},",
            ")"
        ],
        "description": [
            "Construct: billingconductor.CfnPricingRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-billingconductor.CfnPricingRule",
            "Attributes: ",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrAssociatedPricingPlanCount",
            "  attrArn"
        ],
        "prefix": "l1-billingconductor-pricingrule",
        "scope": "python"
    },
    "budgets.CfnBudget": {
        "body": [
            "budgets.CfnBudget(self, \"${1:id}\", ",
            "        budget={",
            "            budgetName=${4:str},",
            "            budgetType=${5:str},",
            "            costFilters=${6:dict},",
            "            plannedBudgetLimits=${8:dict},",
            "            timeUnit=${10:str},",
            "        },",
            "        notificationsWithSubscribers=[],",
            "        resourceTags=[],",
            ")"
        ],
        "description": [
            "Construct: budgets.CfnBudget",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-budgets.CfnBudget"
        ],
        "prefix": "l1-budgets-budget",
        "scope": "python"
    },
    "budgets.CfnBudgetsAction": {
        "body": [
            "budgets.CfnBudgetsAction(self, \"${1:id}\", ",
            "        actionThreshold={",
            "            type=${2:str},",
            "            value=${3:float},",
            "        },",
            "        actionType=${3:str}, # Required",
            "        approvalModel=${4:str},",
            "        budgetName=${5:str}, # Required",
            "        definition={",
            "        },",
            "        executionRoleArn=${7:str}, # Required",
            "        notificationType=${8:str}, # Required",
            "        resourceTags=[],",
            "        subscribers=[], # Required",
            ")"
        ],
        "description": [
            "Construct: budgets.CfnBudgetsAction",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-budgets.CfnBudgetsAction",
            "Attributes: ",
            "  attrActionId"
        ],
        "prefix": "l1-budgets-budgetsaction",
        "scope": "python"
    },
    "cassandra.CfnKeyspace": {
        "body": [
            "cassandra.CfnKeyspace(self, \"${1:id}\", ",
            "        keyspaceName=${2:str},",
            "        replicationSpecification={",
            "            regionList=[],",
            "            replicationStrategy=${4:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cassandra.CfnKeyspace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cassandra.CfnKeyspace"
        ],
        "prefix": "l1-cassandra-keyspace",
        "scope": "python"
    },
    "cassandra.CfnTable": {
        "body": [
            "cassandra.CfnTable(self, \"${1:id}\", ",
            "        autoScalingSpecifications={",
            "        },",
            "        billingMode={",
            "            mode=${3:str},",
            "        },",
            "        clientSideTimestampsEnabled=${4:bool},",
            "        clusteringKeyColumns=[],",
            "        defaultTimeToLive=${6:int},",
            "        encryptionSpecification={",
            "            encryptionType=${7:str},",
            "            kmsKeyIdentifier=${8:str},",
            "        },",
            "        keyspaceName=${8:str}, # Required",
            "        partitionKeyColumns=[], # Required",
            "        pointInTimeRecoveryEnabled=${10:bool},",
            "        regularColumns=[],",
            "        replicaSpecifications=[],",
            "        tableName=${13:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cassandra.CfnTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cassandra.CfnTable"
        ],
        "prefix": "l1-cassandra-table",
        "scope": "python"
    },
    "ce.CfnAnomalyMonitor": {
        "body": [
            "ce.CfnAnomalyMonitor(self, \"${1:id}\", ",
            "        monitorDimension=${2:str},",
            "        monitorName=${3:str}, # Required",
            "        monitorSpecification=${4:str},",
            "        monitorType=${5:str}, # Required",
            "        resourceTags=[],",
            ")"
        ],
        "description": [
            "Construct: ce.CfnAnomalyMonitor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ce.CfnAnomalyMonitor",
            "Attributes: ",
            "  attrLastUpdatedDate",
            "  attrCreationDate",
            "  attrLastEvaluatedDate",
            "  attrMonitorArn",
            "  attrDimensionalValueCount"
        ],
        "prefix": "l1-ce-anomalymonitor",
        "scope": "python"
    },
    "ce.CfnAnomalySubscription": {
        "body": [
            "ce.CfnAnomalySubscription(self, \"${1:id}\", ",
            "        frequency=${2:str}, # Required",
            "        monitorArnList=[], # Required",
            "        resourceTags=[],",
            "        subscribers=[], # Required",
            "        subscriptionName=${6:str}, # Required",
            "        threshold=${7:float},",
            "        thresholdExpression=${8:str},",
            ")"
        ],
        "description": [
            "Construct: ce.CfnAnomalySubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ce.CfnAnomalySubscription",
            "Attributes: ",
            "  attrAccountId",
            "  attrSubscriptionArn"
        ],
        "prefix": "l1-ce-anomalysubscription",
        "scope": "python"
    },
    "ce.CfnCostCategory": {
        "body": [
            "ce.CfnCostCategory(self, \"${1:id}\", ",
            "        defaultValue=${2:str},",
            "        name=${3:str}, # Required",
            "        ruleVersion=${4:str}, # Required",
            "        rules=${5:str}, # Required",
            "        splitChargeRules=${6:str},",
            ")"
        ],
        "description": [
            "Construct: ce.CfnCostCategory",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ce.CfnCostCategory",
            "Attributes: ",
            "  attrEffectiveStart",
            "  attrArn"
        ],
        "prefix": "l1-ce-costcategory",
        "scope": "python"
    },
    "certificatemanager.CfnAccount": {
        "body": [
            "certificatemanager.CfnAccount(self, \"${1:id}\", ",
            "        expiryEventsConfiguration={",
            "            daysBeforeExpiry=${2:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: certificatemanager.CfnAccount",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-certificatemanager.CfnAccount",
            "Attributes: ",
            "  attrAccountId"
        ],
        "prefix": "l1-certificatemanager-account",
        "scope": "python"
    },
    "certificatemanager.CfnCertificate": {
        "body": [
            "certificatemanager.CfnCertificate(self, \"${1:id}\", ",
            "        certificateAuthorityArn=${2:str},",
            "        certificateTransparencyLoggingPreference=${3:str},",
            "        domainName=${4:str}, # Required",
            "        domainValidationOptions=[],",
            "        keyAlgorithm=${6:str},",
            "        subjectAlternativeNames=[],",
            "        tags=[],",
            "        validationMethod=${9:str},",
            ")"
        ],
        "description": [
            "Construct: certificatemanager.CfnCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-certificatemanager.CfnCertificate"
        ],
        "prefix": "l1-certificatemanager-certificate",
        "scope": "python"
    },
    "chatbot.CfnMicrosoftTeamsChannelConfiguration": {
        "body": [
            "chatbot.CfnMicrosoftTeamsChannelConfiguration(self, \"${1:id}\", ",
            "        configurationName=${2:str}, # Required",
            "        guardrailPolicies=[],",
            "        iamRoleArn=${4:str}, # Required",
            "        loggingLevel=${5:str},",
            "        snsTopicArns=[],",
            "        tags=[],",
            "        teamId=${8:str}, # Required",
            "        teamsChannelId=${9:str}, # Required",
            "        teamsTenantId=${10:str}, # Required",
            "        userRoleRequired=${11:bool},",
            ")"
        ],
        "description": [
            "Construct: chatbot.CfnMicrosoftTeamsChannelConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-chatbot.CfnMicrosoftTeamsChannelConfiguration",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-chatbot-microsoftteamschannelconfiguration",
        "scope": "python"
    },
    "chatbot.CfnSlackChannelConfiguration": {
        "body": [
            "chatbot.CfnSlackChannelConfiguration(self, \"${1:id}\", ",
            "        configurationName=${2:str}, # Required",
            "        guardrailPolicies=[],",
            "        iamRoleArn=${4:str}, # Required",
            "        loggingLevel=${5:str},",
            "        slackChannelId=${6:str}, # Required",
            "        slackWorkspaceId=${7:str}, # Required",
            "        snsTopicArns=[],",
            "        tags=[],",
            "        userRoleRequired=${10:bool},",
            ")"
        ],
        "description": [
            "Construct: chatbot.CfnSlackChannelConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-chatbot.CfnSlackChannelConfiguration",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-chatbot-slackchannelconfiguration",
        "scope": "python"
    },
    "cleanrooms.CfnAnalysisTemplate": {
        "body": [
            "cleanrooms.CfnAnalysisTemplate(self, \"${1:id}\", ",
            "        analysisParameters=[],",
            "        description=${3:str},",
            "        format=${4:str}, # Required",
            "        membershipIdentifier=${5:str}, # Required",
            "        name=${6:str}, # Required",
            "        source={",
            "            text=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cleanrooms.CfnAnalysisTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cleanrooms.CfnAnalysisTemplate",
            "Attributes: ",
            "  attrCollaborationIdentifier",
            "  attrSchema.ReferencedTables",
            "  attrMembershipArn",
            "  attrSchema",
            "  attrArn",
            "  attrCollaborationArn",
            "  attrAnalysisTemplateIdentifier"
        ],
        "prefix": "l1-cleanrooms-analysistemplate",
        "scope": "python"
    },
    "cleanrooms.CfnCollaboration": {
        "body": [
            "cleanrooms.CfnCollaboration(self, \"${1:id}\", ",
            "        creatorDisplayName=${2:str}, # Required",
            "        creatorMemberAbilities=[], # Required",
            "        creatorPaymentConfiguration={",
            "        },",
            "        dataEncryptionMetadata={",
            "            allowCleartext=${5:bool},",
            "            allowDuplicates=${6:bool},",
            "            allowJoinsOnColumnsWithDifferentNames=${7:bool},",
            "            preserveNulls=${8:bool},",
            "        },",
            "        description=${6:str}, # Required",
            "        members=[], # Required",
            "        name=${8:str}, # Required",
            "        queryLogStatus=${9:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cleanrooms.CfnCollaboration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cleanrooms.CfnCollaboration",
            "Attributes: ",
            "  attrCollaborationIdentifier",
            "  attrArn"
        ],
        "prefix": "l1-cleanrooms-collaboration",
        "scope": "python"
    },
    "cleanrooms.CfnConfiguredTable": {
        "body": [
            "cleanrooms.CfnConfiguredTable(self, \"${1:id}\", ",
            "        allowedColumns=[], # Required",
            "        analysisMethod=${3:str}, # Required",
            "        analysisRules=[],",
            "        description=${5:str},",
            "        name=${6:str}, # Required",
            "        tableReference={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cleanrooms.CfnConfiguredTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cleanrooms.CfnConfiguredTable",
            "Attributes: ",
            "  attrConfiguredTableIdentifier",
            "  attrArn"
        ],
        "prefix": "l1-cleanrooms-configuredtable",
        "scope": "python"
    },
    "cleanrooms.CfnConfiguredTableAssociation": {
        "body": [
            "cleanrooms.CfnConfiguredTableAssociation(self, \"${1:id}\", ",
            "        configuredTableIdentifier=${2:str}, # Required",
            "        description=${3:str},",
            "        membershipIdentifier=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        roleArn=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cleanrooms.CfnConfiguredTableAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cleanrooms.CfnConfiguredTableAssociation",
            "Attributes: ",
            "  attrConfiguredTableAssociationIdentifier",
            "  attrArn"
        ],
        "prefix": "l1-cleanrooms-configuredtableassociation",
        "scope": "python"
    },
    "cleanrooms.CfnMembership": {
        "body": [
            "cleanrooms.CfnMembership(self, \"${1:id}\", ",
            "        collaborationIdentifier=${2:str}, # Required",
            "        defaultResultConfiguration={",
            "            roleArn=${4:str},",
            "        },",
            "        paymentConfiguration={",
            "        },",
            "        queryLogStatus=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cleanrooms.CfnMembership",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cleanrooms.CfnMembership",
            "Attributes: ",
            "  attrMembershipIdentifier",
            "  attrArn",
            "  attrCollaborationCreatorAccountId",
            "  attrCollaborationArn"
        ],
        "prefix": "l1-cleanrooms-membership",
        "scope": "python"
    },
    "cleanrooms.CfnPrivacyBudgetTemplate": {
        "body": [
            "cleanrooms.CfnPrivacyBudgetTemplate(self, \"${1:id}\", ",
            "        autoRefresh=${2:str}, # Required",
            "        membershipIdentifier=${3:str}, # Required",
            "        parameters={",
            "            epsilon=${4:int},",
            "            usersNoisePerQuery=${5:int},",
            "        },",
            "        privacyBudgetType=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cleanrooms.CfnPrivacyBudgetTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cleanrooms.CfnPrivacyBudgetTemplate",
            "Attributes: ",
            "  attrCollaborationIdentifier",
            "  attrMembershipArn",
            "  attrPrivacyBudgetTemplateIdentifier",
            "  attrArn",
            "  attrCollaborationArn"
        ],
        "prefix": "l1-cleanrooms-privacybudgettemplate",
        "scope": "python"
    },
    "cleanroomsml.CfnTrainingDataset": {
        "body": [
            "cleanroomsml.CfnTrainingDataset(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            "        tags=[],",
            "        trainingData=[], # Required",
            ")"
        ],
        "description": [
            "Construct: cleanroomsml.CfnTrainingDataset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cleanroomsml.CfnTrainingDataset",
            "Attributes: ",
            "  attrStatus",
            "  attrTrainingDatasetArn"
        ],
        "prefix": "l1-cleanroomsml-trainingdataset",
        "scope": "python"
    },
    "cloud9.CfnEnvironmentEC2": {
        "body": [
            "cloud9.CfnEnvironmentEC2(self, \"${1:id}\", ",
            "        automaticStopTimeMinutes=${2:int},",
            "        connectionType=${3:str},",
            "        description=${4:str},",
            "        imageId=${5:str}, # Required",
            "        instanceType=${6:str}, # Required",
            "        name=${7:str},",
            "        ownerArn=${8:str},",
            "        repositories=[],",
            "        subnetId=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cloud9.CfnEnvironmentEC2",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloud9.CfnEnvironmentEC2",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-cloud9-environmentec2",
        "scope": "python"
    },
    "cloudformation.CfnCustomResource": {
        "body": [
            "cloudformation.CfnCustomResource(self, \"${1:id}\", ",
            "        serviceToken=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnCustomResource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnCustomResource"
        ],
        "prefix": "l1-cloudformation-customresource",
        "scope": "python"
    },
    "cloudformation.CfnHookDefaultVersion": {
        "body": [
            "cloudformation.CfnHookDefaultVersion(self, \"${1:id}\", ",
            "        typeName=${2:str},",
            "        typeVersionArn=${3:str},",
            "        versionId=${4:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnHookDefaultVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnHookDefaultVersion",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-cloudformation-hookdefaultversion",
        "scope": "python"
    },
    "cloudformation.CfnHookTypeConfig": {
        "body": [
            "cloudformation.CfnHookTypeConfig(self, \"${1:id}\", ",
            "        configuration=${2:str}, # Required",
            "        configurationAlias=${3:str},",
            "        typeArn=${4:str},",
            "        typeName=${5:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnHookTypeConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnHookTypeConfig",
            "Attributes: ",
            "  attrConfigurationArn"
        ],
        "prefix": "l1-cloudformation-hooktypeconfig",
        "scope": "python"
    },
    "cloudformation.CfnHookVersion": {
        "body": [
            "cloudformation.CfnHookVersion(self, \"${1:id}\", ",
            "        executionRoleArn=${2:str},",
            "        loggingConfig={",
            "            logGroupName=${3:str},",
            "            logRoleArn=${4:str},",
            "        },",
            "        schemaHandlerPackage=${4:str}, # Required",
            "        typeName=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnHookVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnHookVersion",
            "Attributes: ",
            "  attrVersionId",
            "  attrIsDefaultVersion",
            "  attrVisibility",
            "  attrArn",
            "  attrTypeArn"
        ],
        "prefix": "l1-cloudformation-hookversion",
        "scope": "python"
    },
    "cloudformation.CfnMacro": {
        "body": [
            "cloudformation.CfnMacro(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        functionName=${3:str}, # Required",
            "        logGroupName=${4:str},",
            "        logRoleARN=${5:str},",
            "        name=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnMacro",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnMacro"
        ],
        "prefix": "l1-cloudformation-macro",
        "scope": "python"
    },
    "cloudformation.CfnModuleDefaultVersion": {
        "body": [
            "cloudformation.CfnModuleDefaultVersion(self, \"${1:id}\", ",
            "        arn=${2:str},",
            "        moduleName=${3:str},",
            "        versionId=${4:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnModuleDefaultVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnModuleDefaultVersion"
        ],
        "prefix": "l1-cloudformation-moduledefaultversion",
        "scope": "python"
    },
    "cloudformation.CfnModuleVersion": {
        "body": [
            "cloudformation.CfnModuleVersion(self, \"${1:id}\", ",
            "        moduleName=${2:str}, # Required",
            "        modulePackage=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnModuleVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnModuleVersion",
            "Attributes: ",
            "  attrTimeCreated",
            "  attrVersionId",
            "  attrDescription",
            "  attrSchema",
            "  attrIsDefaultVersion",
            "  attrVisibility",
            "  attrArn",
            "  attrDocumentationUrl"
        ],
        "prefix": "l1-cloudformation-moduleversion",
        "scope": "python"
    },
    "cloudformation.CfnPublicTypeVersion": {
        "body": [
            "cloudformation.CfnPublicTypeVersion(self, \"${1:id}\", ",
            "        arn=${2:str},",
            "        logDeliveryBucket=${3:str},",
            "        publicVersionNumber=${4:str},",
            "        type=${5:str},",
            "        typeName=${6:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnPublicTypeVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnPublicTypeVersion",
            "Attributes: ",
            "  attrPublicTypeArn",
            "  attrPublisherId",
            "  attrTypeVersionArn"
        ],
        "prefix": "l1-cloudformation-publictypeversion",
        "scope": "python"
    },
    "cloudformation.CfnPublisher": {
        "body": [
            "cloudformation.CfnPublisher(self, \"${1:id}\", ",
            "        acceptTermsAndConditions=${2:bool}, # Required",
            "        connectionArn=${3:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnPublisher",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnPublisher",
            "Attributes: ",
            "  attrPublisherId",
            "  attrIdentityProvider",
            "  attrPublisherProfile",
            "  attrPublisherStatus"
        ],
        "prefix": "l1-cloudformation-publisher",
        "scope": "python"
    },
    "cloudformation.CfnResourceDefaultVersion": {
        "body": [
            "cloudformation.CfnResourceDefaultVersion(self, \"${1:id}\", ",
            "        typeName=${2:str},",
            "        typeVersionArn=${3:str},",
            "        versionId=${4:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnResourceDefaultVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnResourceDefaultVersion",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-cloudformation-resourcedefaultversion",
        "scope": "python"
    },
    "cloudformation.CfnResourceVersion": {
        "body": [
            "cloudformation.CfnResourceVersion(self, \"${1:id}\", ",
            "        executionRoleArn=${2:str},",
            "        loggingConfig={",
            "            logGroupName=${3:str},",
            "            logRoleArn=${4:str},",
            "        },",
            "        schemaHandlerPackage=${4:str}, # Required",
            "        typeName=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnResourceVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnResourceVersion",
            "Attributes: ",
            "  attrVersionId",
            "  attrProvisioningType",
            "  attrIsDefaultVersion",
            "  attrVisibility",
            "  attrArn",
            "  attrTypeArn"
        ],
        "prefix": "l1-cloudformation-resourceversion",
        "scope": "python"
    },
    "cloudformation.CfnStack": {
        "body": [
            "cloudformation.CfnStack(self, \"${1:id}\", ",
            "        notificationARNs=[],",
            "        parameters={",
            "        },",
            "        tags=[],",
            "        templateURL=${5:str}, # Required",
            "        timeoutInMinutes=${6:int},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnStack",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnStack"
        ],
        "prefix": "l1-cloudformation-stack",
        "scope": "python"
    },
    "cloudformation.CfnStackSet": {
        "body": [
            "cloudformation.CfnStackSet(self, \"${1:id}\", ",
            "        administrationRoleARN=${2:str},",
            "        autoDeployment={",
            "            enabled=${3:bool},",
            "            retainStacksOnAccountRemoval=${4:bool},",
            "        },",
            "        callAs=${4:str},",
            "        capabilities=[],",
            "        description=${6:str},",
            "        executionRoleName=${7:str},",
            "        managedExecution={",
            "            active=${8:bool},",
            "        },",
            "        operationPreferences={",
            "            failureToleranceCount=${9:int},",
            "            failureTolerancePercentage=${10:int},",
            "            maxConcurrentCount=${11:int},",
            "            maxConcurrentPercentage=${12:int},",
            "            regionConcurrencyType=${13:str},",
            "            regionOrder=[],",
            "        },",
            "        parameters=[],",
            "        permissionModel=${11:str}, # Required",
            "        stackInstancesGroup=[],",
            "        stackSetName=${13:str}, # Required",
            "        tags=[],",
            "        templateBody=${15:str},",
            "        templateURL=${16:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnStackSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnStackSet",
            "Attributes: ",
            "  attrStackSetId"
        ],
        "prefix": "l1-cloudformation-stackset",
        "scope": "python"
    },
    "cloudformation.CfnTypeActivation": {
        "body": [
            "cloudformation.CfnTypeActivation(self, \"${1:id}\", ",
            "        autoUpdate=${2:bool},",
            "        executionRoleArn=${3:str},",
            "        loggingConfig={",
            "            logGroupName=${4:str},",
            "            logRoleArn=${5:str},",
            "        },",
            "        majorVersion=${5:str},",
            "        publicTypeArn=${6:str},",
            "        publisherId=${7:str},",
            "        type=${8:str},",
            "        typeName=${9:str},",
            "        typeNameAlias=${10:str},",
            "        versionBump=${11:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnTypeActivation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnTypeActivation",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-cloudformation-typeactivation",
        "scope": "python"
    },
    "cloudformation.CfnWaitCondition": {
        "body": [
            "cloudformation.CfnWaitCondition(self, \"${1:id}\", ",
            "        count=${2:int},",
            "        handle=${3:str},",
            "        timeout=${4:str},",
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnWaitCondition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnWaitCondition",
            "Attributes: ",
            "  attrData"
        ],
        "prefix": "l1-cloudformation-waitcondition",
        "scope": "python"
    },
    "cloudformation.CfnWaitConditionHandle": {
        "body": [
            ")"
        ],
        "description": [
            "Construct: cloudformation.CfnWaitConditionHandle",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudformation.CfnWaitConditionHandle"
        ],
        "prefix": "l1-cloudformation-waitconditionhandle",
        "scope": "python"
    },
    "cloudfront.CfnCachePolicy": {
        "body": [
            "cloudfront.CfnCachePolicy(self, \"${1:id}\", ",
            "        cachePolicyConfig={",
            "            comment=${2:str},",
            "            defaultTTL=${3:float},",
            "            maxTTL=${4:float},",
            "            minTTL=${5:float},",
            "            name=${6:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnCachePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnCachePolicy",
            "Attributes: ",
            "  attrLastModifiedTime",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-cachepolicy",
        "scope": "python"
    },
    "cloudfront.CfnCloudFrontOriginAccessIdentity": {
        "body": [
            "cloudfront.CfnCloudFrontOriginAccessIdentity(self, \"${1:id}\", ",
            "        cloudFrontOriginAccessIdentityConfig={",
            "            comment=${2:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnCloudFrontOriginAccessIdentity",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnCloudFrontOriginAccessIdentity",
            "Attributes: ",
            "  attrS3CanonicalUserId",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-cloudfrontoriginaccessidentity",
        "scope": "python"
    },
    "cloudfront.CfnContinuousDeploymentPolicy": {
        "body": [
            "cloudfront.CfnContinuousDeploymentPolicy(self, \"${1:id}\", ",
            "        continuousDeploymentPolicyConfig={",
            "            enabled=${2:bool},",
            "            stagingDistributionDnsNames=[],",
            "            type=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnContinuousDeploymentPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnContinuousDeploymentPolicy",
            "Attributes: ",
            "  attrLastModifiedTime",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-continuousdeploymentpolicy",
        "scope": "python"
    },
    "cloudfront.CfnDistribution": {
        "body": [
            "cloudfront.CfnDistribution(self, \"${1:id}\", ",
            "        distributionConfig={",
            "            aliases=[],",
            "            cNAMEs=[],",
            "            cacheBehaviors=[],",
            "            comment=${5:str},",
            "            continuousDeploymentPolicyId=${6:str},",
            "            customErrorResponses=[],",
            "            defaultRootObject=${10:str},",
            "            enabled=${11:bool},",
            "            httpVersion=${12:str},",
            "            iPV6Enabled=${13:bool},",
            "            origins=[],",
            "            priceClass=${17:str},",
            "            staging=${20:bool},",
            "            webACLId=${22:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnDistribution",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnDistribution",
            "Attributes: ",
            "  attrDomainName",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-distribution",
        "scope": "python"
    },
    "cloudfront.CfnFunction": {
        "body": [
            "cloudfront.CfnFunction(self, \"${1:id}\", ",
            "        autoPublish=${2:bool},",
            "        functionCode=${3:str}, # Required",
            "        functionConfig={",
            "            comment=${4:str},",
            "            keyValueStoreAssociations=[],",
            "            runtime=${6:str},",
            "        },",
            "        functionMetadata={",
            "            functionARN=${5:str},",
            "        },",
            "        name=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnFunction",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnFunction",
            "Attributes: ",
            "  attrFunctionARN",
            "  attrFunctionMetadata.FunctionARN",
            "  attrStage"
        ],
        "prefix": "l1-cloudfront-function",
        "scope": "python"
    },
    "cloudfront.CfnKeyGroup": {
        "body": [
            "cloudfront.CfnKeyGroup(self, \"${1:id}\", ",
            "        keyGroupConfig={",
            "            comment=${2:str},",
            "            items=[],",
            "            name=${4:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnKeyGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnKeyGroup",
            "Attributes: ",
            "  attrLastModifiedTime",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-keygroup",
        "scope": "python"
    },
    "cloudfront.CfnKeyValueStore": {
        "body": [
            "cloudfront.CfnKeyValueStore(self, \"${1:id}\", ",
            "        comment=${2:str},",
            "        importSource={",
            "            sourceArn=${3:str},",
            "            sourceType=${4:str},",
            "        },",
            "        name=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnKeyValueStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnKeyValueStore",
            "Attributes: ",
            "  attrStatus",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-cloudfront-keyvaluestore",
        "scope": "python"
    },
    "cloudfront.CfnMonitoringSubscription": {
        "body": [
            "cloudfront.CfnMonitoringSubscription(self, \"${1:id}\", ",
            "        distributionId=${2:str}, # Required",
            "        monitoringSubscription={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnMonitoringSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnMonitoringSubscription"
        ],
        "prefix": "l1-cloudfront-monitoringsubscription",
        "scope": "python"
    },
    "cloudfront.CfnOriginAccessControl": {
        "body": [
            "cloudfront.CfnOriginAccessControl(self, \"${1:id}\", ",
            "        originAccessControlConfig={",
            "            description=${2:str},",
            "            name=${3:str},",
            "            originAccessControlOriginType=${4:str},",
            "            signingBehavior=${5:str},",
            "            signingProtocol=${6:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnOriginAccessControl",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnOriginAccessControl",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-originaccesscontrol",
        "scope": "python"
    },
    "cloudfront.CfnOriginRequestPolicy": {
        "body": [
            "cloudfront.CfnOriginRequestPolicy(self, \"${1:id}\", ",
            "        originRequestPolicyConfig={",
            "            comment=${2:str},",
            "            name=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnOriginRequestPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnOriginRequestPolicy",
            "Attributes: ",
            "  attrLastModifiedTime",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-originrequestpolicy",
        "scope": "python"
    },
    "cloudfront.CfnPublicKey": {
        "body": [
            "cloudfront.CfnPublicKey(self, \"${1:id}\", ",
            "        publicKeyConfig={",
            "            callerReference=${2:str},",
            "            comment=${3:str},",
            "            encodedKey=${4:str},",
            "            name=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnPublicKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnPublicKey",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-publickey",
        "scope": "python"
    },
    "cloudfront.CfnRealtimeLogConfig": {
        "body": [
            "cloudfront.CfnRealtimeLogConfig(self, \"${1:id}\", ",
            "        endPoints=[], # Required",
            "        fields=[], # Required",
            "        name=${4:str}, # Required",
            "        samplingRate=${5:float}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnRealtimeLogConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnRealtimeLogConfig",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-cloudfront-realtimelogconfig",
        "scope": "python"
    },
    "cloudfront.CfnResponseHeadersPolicy": {
        "body": [
            "cloudfront.CfnResponseHeadersPolicy(self, \"${1:id}\", ",
            "        responseHeadersPolicyConfig={",
            "            comment=${2:str},",
            "            name=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnResponseHeadersPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnResponseHeadersPolicy",
            "Attributes: ",
            "  attrLastModifiedTime",
            "  attrId"
        ],
        "prefix": "l1-cloudfront-responseheaderspolicy",
        "scope": "python"
    },
    "cloudfront.CfnStreamingDistribution": {
        "body": [
            "cloudfront.CfnStreamingDistribution(self, \"${1:id}\", ",
            "        streamingDistributionConfig={",
            "            aliases=[],",
            "            comment=${3:str},",
            "            enabled=${4:bool},",
            "            priceClass=${6:str},",
            "        },",
            "        tags=[], # Required",
            ")"
        ],
        "description": [
            "Construct: cloudfront.CfnStreamingDistribution",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudfront.CfnStreamingDistribution",
            "Attributes: ",
            "  attrDomainName"
        ],
        "prefix": "l1-cloudfront-streamingdistribution",
        "scope": "python"
    },
    "cloudtrail.CfnChannel": {
        "body": [
            "cloudtrail.CfnChannel(self, \"${1:id}\", ",
            "        destinations=[],",
            "        name=${3:str},",
            "        source=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cloudtrail.CfnChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudtrail.CfnChannel",
            "Attributes: ",
            "  attrChannelArn"
        ],
        "prefix": "l1-cloudtrail-channel",
        "scope": "python"
    },
    "cloudtrail.CfnEventDataStore": {
        "body": [
            "cloudtrail.CfnEventDataStore(self, \"${1:id}\", ",
            "        advancedEventSelectors=[],",
            "        billingMode=${3:str},",
            "        federationEnabled=${4:bool},",
            "        federationRoleArn=${5:str},",
            "        ingestionEnabled=${6:bool},",
            "        insightSelectors=[],",
            "        insightsDestination=${8:str},",
            "        kmsKeyId=${9:str},",
            "        multiRegionEnabled=${10:bool},",
            "        name=${11:str},",
            "        organizationEnabled=${12:bool},",
            "        retentionPeriod=${13:int},",
            "        tags=[],",
            "        terminationProtectionEnabled=${15:bool},",
            ")"
        ],
        "description": [
            "Construct: cloudtrail.CfnEventDataStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudtrail.CfnEventDataStore",
            "Attributes: ",
            "  attrStatus",
            "  attrUpdatedTimestamp",
            "  attrEventDataStoreArn",
            "  attrCreatedTimestamp"
        ],
        "prefix": "l1-cloudtrail-eventdatastore",
        "scope": "python"
    },
    "cloudtrail.CfnResourcePolicy": {
        "body": [
            "cloudtrail.CfnResourcePolicy(self, \"${1:id}\", ",
            "        resourceArn=${2:str}, # Required",
            "        resourcePolicy=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: cloudtrail.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudtrail.CfnResourcePolicy"
        ],
        "prefix": "l1-cloudtrail-resourcepolicy",
        "scope": "python"
    },
    "cloudtrail.CfnTrail": {
        "body": [
            "cloudtrail.CfnTrail(self, \"${1:id}\", ",
            "        advancedEventSelectors=[],",
            "        cloudWatchLogsLogGroupArn=${3:str},",
            "        cloudWatchLogsRoleArn=${4:str},",
            "        enableLogFileValidation=${5:bool},",
            "        eventSelectors=[],",
            "        includeGlobalServiceEvents=${7:bool},",
            "        insightSelectors=[],",
            "        isLogging=${9:bool}, # Required",
            "        isMultiRegionTrail=${10:bool},",
            "        isOrganizationTrail=${11:bool},",
            "        kMSKeyId=${12:str},",
            "        s3BucketName=${13:str}, # Required",
            "        s3KeyPrefix=${14:str},",
            "        snsTopicName=${15:str},",
            "        tags=[],",
            "        trailName=${17:str},",
            ")"
        ],
        "description": [
            "Construct: cloudtrail.CfnTrail",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudtrail.CfnTrail",
            "Attributes: ",
            "  attrSnsTopicArn",
            "  attrArn"
        ],
        "prefix": "l1-cloudtrail-trail",
        "scope": "python"
    },
    "cloudwatch.CfnAlarm": {
        "body": [
            "cloudwatch.CfnAlarm(self, \"${1:id}\", ",
            "        actionsEnabled=${2:bool},",
            "        alarmActions=[],",
            "        alarmDescription=${4:str},",
            "        alarmName=${5:str},",
            "        comparisonOperator=${6:str}, # Required",
            "        datapointsToAlarm=${7:int},",
            "        dimensions=[],",
            "        evaluateLowSampleCountPercentile=${9:str},",
            "        evaluationPeriods=${10:int}, # Required",
            "        extendedStatistic=${11:str},",
            "        insufficientDataActions=[],",
            "        metricName=${13:str},",
            "        metrics=[],",
            "        namespace=${15:str},",
            "        oKActions=[],",
            "        period=${17:int},",
            "        statistic=${18:str},",
            "        tags=[],",
            "        threshold=${20:float},",
            "        thresholdMetricId=${21:str},",
            "        treatMissingData=${22:str},",
            "        unit=${23:str},",
            ")"
        ],
        "description": [
            "Construct: cloudwatch.CfnAlarm",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudwatch.CfnAlarm",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-cloudwatch-alarm",
        "scope": "python"
    },
    "cloudwatch.CfnAnomalyDetector": {
        "body": [
            "cloudwatch.CfnAnomalyDetector(self, \"${1:id}\", ",
            "        configuration={",
            "            excludedTimeRanges=[],",
            "            metricTimeZone=${3:str},",
            "        },",
            "        dimensions=[],",
            "        metricCharacteristics={",
            "            periodicSpikes=${4:bool},",
            "        },",
            "        metricMathAnomalyDetector={",
            "            metricDataQueries=[],",
            "        },",
            "        metricName=${6:str},",
            "        namespace=${7:str},",
            "        singleMetricAnomalyDetector={",
            "            accountId=${8:str},",
            "            dimensions=[],",
            "            metricName=${10:str},",
            "            namespace=${11:str},",
            "            stat=${12:str},",
            "        },",
            "        stat=${9:str},",
            ")"
        ],
        "description": [
            "Construct: cloudwatch.CfnAnomalyDetector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudwatch.CfnAnomalyDetector"
        ],
        "prefix": "l1-cloudwatch-anomalydetector",
        "scope": "python"
    },
    "cloudwatch.CfnCompositeAlarm": {
        "body": [
            "cloudwatch.CfnCompositeAlarm(self, \"${1:id}\", ",
            "        actionsEnabled=${2:bool},",
            "        actionsSuppressor=${3:str},",
            "        actionsSuppressorExtensionPeriod=${4:int},",
            "        actionsSuppressorWaitPeriod=${5:int},",
            "        alarmActions=[],",
            "        alarmDescription=${7:str},",
            "        alarmName=${8:str},",
            "        alarmRule=${9:str}, # Required",
            "        insufficientDataActions=[],",
            "        oKActions=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cloudwatch.CfnCompositeAlarm",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudwatch.CfnCompositeAlarm",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-cloudwatch-compositealarm",
        "scope": "python"
    },
    "cloudwatch.CfnDashboard": {
        "body": [
            "cloudwatch.CfnDashboard(self, \"${1:id}\", ",
            "        dashboardBody=${2:str}, # Required",
            "        dashboardName=${3:str},",
            ")"
        ],
        "description": [
            "Construct: cloudwatch.CfnDashboard",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudwatch.CfnDashboard"
        ],
        "prefix": "l1-cloudwatch-dashboard",
        "scope": "python"
    },
    "cloudwatch.CfnInsightRule": {
        "body": [
            "cloudwatch.CfnInsightRule(self, \"${1:id}\", ",
            "        ruleBody=${2:str}, # Required",
            "        ruleName=${3:str}, # Required",
            "        ruleState=${4:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cloudwatch.CfnInsightRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudwatch.CfnInsightRule",
            "Attributes: ",
            "  attrArn",
            "  attrRuleName"
        ],
        "prefix": "l1-cloudwatch-insightrule",
        "scope": "python"
    },
    "cloudwatch.CfnMetricStream": {
        "body": [
            "cloudwatch.CfnMetricStream(self, \"${1:id}\", ",
            "        excludeFilters=[],",
            "        firehoseArn=${3:str}, # Required",
            "        includeFilters=[],",
            "        includeLinkedAccountsMetrics=${5:bool},",
            "        name=${6:str},",
            "        outputFormat=${7:str}, # Required",
            "        roleArn=${8:str}, # Required",
            "        statisticsConfigurations=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: cloudwatch.CfnMetricStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cloudwatch.CfnMetricStream",
            "Attributes: ",
            "  attrCreationDate",
            "  attrState",
            "  attrArn",
            "  attrLastUpdateDate"
        ],
        "prefix": "l1-cloudwatch-metricstream",
        "scope": "python"
    },
    "codeartifact.CfnDomain": {
        "body": [
            "codeartifact.CfnDomain(self, \"${1:id}\", ",
            "        domainName=${2:str}, # Required",
            "        encryptionKey=${3:str},",
            "        permissionsPolicyDocument=${4:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codeartifact.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codeartifact.CfnDomain",
            "Attributes: ",
            "  attrOwner",
            "  attrEncryptionKey",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-codeartifact-domain",
        "scope": "python"
    },
    "codeartifact.CfnPackageGroup": {
        "body": [
            "codeartifact.CfnPackageGroup(self, \"${1:id}\", ",
            "        contactInfo=${2:str},",
            "        description=${3:str},",
            "        domainName=${4:str}, # Required",
            "        domainOwner=${5:str},",
            "        originConfiguration={",
            "        },",
            "        pattern=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codeartifact.CfnPackageGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codeartifact.CfnPackageGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-codeartifact-packagegroup",
        "scope": "python"
    },
    "codeartifact.CfnRepository": {
        "body": [
            "codeartifact.CfnRepository(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        domainName=${3:str}, # Required",
            "        domainOwner=${4:str},",
            "        externalConnections=[],",
            "        permissionsPolicyDocument=${6:dict},",
            "        repositoryName=${7:str}, # Required",
            "        tags=[],",
            "        upstreams=[],",
            ")"
        ],
        "description": [
            "Construct: codeartifact.CfnRepository",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codeartifact.CfnRepository",
            "Attributes: ",
            "  attrDomainName",
            "  attrArn",
            "  attrDomainOwner",
            "  attrName"
        ],
        "prefix": "l1-codeartifact-repository",
        "scope": "python"
    },
    "codebuild.CfnFleet": {
        "body": [
            "codebuild.CfnFleet(self, \"${1:id}\", ",
            "        baseCapacity=${2:int},",
            "        computeType=${3:str},",
            "        environmentType=${4:str},",
            "        fleetServiceRole=${5:str},",
            "        fleetVpcConfig={",
            "            securityGroupIds=[],",
            "            subnets=[],",
            "            vpcId=${8:str},",
            "        },",
            "        name=${7:str},",
            "        overflowBehavior=${8:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codebuild.CfnFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codebuild.CfnFleet",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-codebuild-fleet",
        "scope": "python"
    },
    "codebuild.CfnProject": {
        "body": [
            "codebuild.CfnProject(self, \"${1:id}\", ",
            "        artifacts={",
            "            artifactIdentifier=${2:str},",
            "            encryptionDisabled=${3:bool},",
            "            location=${4:str},",
            "            name=${5:str},",
            "            namespaceType=${6:str},",
            "            overrideArtifactName=${7:bool},",
            "            packaging=${8:str},",
            "            path=${9:str},",
            "            type=${10:str},",
            "        },",
            "        badgeEnabled=${3:bool},",
            "        buildBatchConfig={",
            "            batchReportMode=${4:str},",
            "            combineArtifacts=${5:bool},",
            "            serviceRole=${7:str},",
            "            timeoutInMins=${8:int},",
            "        },",
            "        cache={",
            "            location=${5:str},",
            "            modes=[],",
            "            type=${7:str},",
            "        },",
            "        concurrentBuildLimit=${6:int},",
            "        description=${7:str},",
            "        encryptionKey=${8:str},",
            "        environment={",
            "            certificate=${9:str},",
            "            computeType=${10:str},",
            "            environmentVariables=[],",
            "            image=${13:str},",
            "            imagePullCredentialsType=${14:str},",
            "            privilegedMode=${15:bool},",
            "            type=${17:str},",
            "        },",
            "        fileSystemLocations=[],",
            "        logsConfig={",
            "        },",
            "        name=${12:str},",
            "        queuedTimeoutInMinutes=${13:int},",
            "        resourceAccessRole=${14:str},",
            "        secondaryArtifacts=[],",
            "        secondarySourceVersions=[],",
            "        secondarySources=[],",
            "        serviceRole=${18:str}, # Required",
            "        source={",
            "            buildSpec=${20:str},",
            "            gitCloneDepth=${22:int},",
            "            insecureSsl=${24:bool},",
            "            location=${25:str},",
            "            reportBuildStatus=${26:bool},",
            "            sourceIdentifier=${27:str},",
            "            type=${28:str},",
            "        },",
            "        sourceVersion=${20:str},",
            "        tags=[],",
            "        timeoutInMinutes=${22:int},",
            "        triggers={",
            "            buildType=${23:str},",
            "            filterGroups=[],",
            "            webhook=${26:bool},",
            "        },",
            "        visibility=${24:str},",
            "        vpcConfig={",
            "            securityGroupIds=[],",
            "            subnets=[],",
            "            vpcId=${27:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: codebuild.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codebuild.CfnProject",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-codebuild-project",
        "scope": "python"
    },
    "codebuild.CfnReportGroup": {
        "body": [
            "codebuild.CfnReportGroup(self, \"${1:id}\", ",
            "        deleteReports=${2:bool},",
            "        exportConfig={",
            "            exportConfigType=${3:str},",
            "        },",
            "        name=${4:str},",
            "        tags=[],",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: codebuild.CfnReportGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codebuild.CfnReportGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-codebuild-reportgroup",
        "scope": "python"
    },
    "codebuild.CfnSourceCredential": {
        "body": [
            "codebuild.CfnSourceCredential(self, \"${1:id}\", ",
            "        authType=${2:str}, # Required",
            "        serverType=${3:str}, # Required",
            "        token=${4:str}, # Required",
            "        username=${5:str},",
            ")"
        ],
        "description": [
            "Construct: codebuild.CfnSourceCredential",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codebuild.CfnSourceCredential"
        ],
        "prefix": "l1-codebuild-sourcecredential",
        "scope": "python"
    },
    "codecommit.CfnRepository": {
        "body": [
            "codecommit.CfnRepository(self, \"${1:id}\", ",
            "        code={",
            "            branchName=${2:str},",
            "        },",
            "        kmsKeyId=${3:str},",
            "        repositoryDescription=${4:str},",
            "        repositoryName=${5:str}, # Required",
            "        tags=[],",
            "        triggers=[],",
            ")"
        ],
        "description": [
            "Construct: codecommit.CfnRepository",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codecommit.CfnRepository",
            "Attributes: ",
            "  attrCloneUrlHttp",
            "  attrKmsKeyId",
            "  attrCloneUrlSsh",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-codecommit-repository",
        "scope": "python"
    },
    "codeconnections.CfnConnection": {
        "body": [
            "codeconnections.CfnConnection(self, \"${1:id}\", ",
            "        connectionName=${2:str}, # Required",
            "        hostArn=${3:str},",
            "        providerType=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codeconnections.CfnConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codeconnections.CfnConnection",
            "Attributes: ",
            "  attrConnectionArn",
            "  attrConnectionStatus",
            "  attrOwnerAccountId"
        ],
        "prefix": "l1-codeconnections-connection",
        "scope": "python"
    },
    "codedeploy.CfnApplication": {
        "body": [
            "codedeploy.CfnApplication(self, \"${1:id}\", ",
            "        applicationName=${2:str},",
            "        computePlatform=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codedeploy.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codedeploy.CfnApplication"
        ],
        "prefix": "l1-codedeploy-application",
        "scope": "python"
    },
    "codedeploy.CfnDeploymentConfig": {
        "body": [
            "codedeploy.CfnDeploymentConfig(self, \"${1:id}\", ",
            "        computePlatform=${2:str},",
            "        deploymentConfigName=${3:str},",
            "        minimumHealthyHosts={",
            "            type=${4:str},",
            "            value=${5:int},",
            "        },",
            "        trafficRoutingConfig={",
            "            type=${7:str},",
            "        },",
            "        zonalConfig={",
            "            firstZoneMonitorDurationInSeconds=${6:int},",
            "            monitorDurationInSeconds=${8:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: codedeploy.CfnDeploymentConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codedeploy.CfnDeploymentConfig"
        ],
        "prefix": "l1-codedeploy-deploymentconfig",
        "scope": "python"
    },
    "codedeploy.CfnDeploymentGroup": {
        "body": [
            "codedeploy.CfnDeploymentGroup(self, \"${1:id}\", ",
            "        alarmConfiguration={",
            "            alarms=[],",
            "            enabled=${3:bool},",
            "            ignorePollAlarmFailure=${4:bool},",
            "        },",
            "        applicationName=${3:str}, # Required",
            "        autoRollbackConfiguration={",
            "            enabled=${4:bool},",
            "            events=[],",
            "        },",
            "        autoScalingGroups=[],",
            "        blueGreenDeploymentConfiguration={",
            "        },",
            "        deployment={",
            "            description=${7:str},",
            "            ignoreApplicationStopFailures=${8:bool},",
            "        },",
            "        deploymentConfigName=${8:str},",
            "        deploymentGroupName=${9:str},",
            "        deploymentStyle={",
            "            deploymentOption=${10:str},",
            "            deploymentType=${11:str},",
            "        },",
            "        eCSServices=[],",
            "        ec2TagFilters=[],",
            "        ec2TagSet={",
            "            ec2TagSetList=[],",
            "        },",
            "        loadBalancerInfo={",
            "            elbInfoList=[],",
            "            targetGroupInfoList=[],",
            "            targetGroupPairInfoList=[],",
            "        },",
            "        onPremisesInstanceTagFilters=[],",
            "        onPremisesTagSet={",
            "            onPremisesTagSetList=[],",
            "        },",
            "        outdatedInstancesStrategy=${17:str},",
            "        serviceRoleArn=${18:str}, # Required",
            "        tags=[],",
            "        terminationHookEnabled=${20:bool},",
            "        triggerConfigurations=[],",
            ")"
        ],
        "description": [
            "Construct: codedeploy.CfnDeploymentGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codedeploy.CfnDeploymentGroup"
        ],
        "prefix": "l1-codedeploy-deploymentgroup",
        "scope": "python"
    },
    "codeguruprofiler.CfnProfilingGroup": {
        "body": [
            "codeguruprofiler.CfnProfilingGroup(self, \"${1:id}\", ",
            "        agentPermissions={",
            "            principals=[],",
            "        },",
            "        anomalyDetectionNotificationConfiguration=[],",
            "        computePlatform=${4:str},",
            "        profilingGroupName=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codeguruprofiler.CfnProfilingGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codeguruprofiler.CfnProfilingGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-codeguruprofiler-profilinggroup",
        "scope": "python"
    },
    "codegurureviewer.CfnRepositoryAssociation": {
        "body": [
            "codegurureviewer.CfnRepositoryAssociation(self, \"${1:id}\", ",
            "        bucketName=${2:str},",
            "        connectionArn=${3:str},",
            "        name=${4:str}, # Required",
            "        owner=${5:str},",
            "        tags=[],",
            "        type=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: codegurureviewer.CfnRepositoryAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codegurureviewer.CfnRepositoryAssociation",
            "Attributes: ",
            "  attrAssociationArn"
        ],
        "prefix": "l1-codegurureviewer-repositoryassociation",
        "scope": "python"
    },
    "codepipeline.CfnCustomActionType": {
        "body": [
            "codepipeline.CfnCustomActionType(self, \"${1:id}\", ",
            "        category=${2:str}, # Required",
            "        configurationProperties=[],",
            "        inputArtifactDetails={",
            "            maximumCount=${4:int},",
            "            minimumCount=${5:int},",
            "        },",
            "        outputArtifactDetails={",
            "            maximumCount=${5:int},",
            "            minimumCount=${6:int},",
            "        },",
            "        provider=${6:str}, # Required",
            "        settings={",
            "            entityUrlTemplate=${7:str},",
            "            executionUrlTemplate=${8:str},",
            "            revisionUrlTemplate=${9:str},",
            "            thirdPartyConfigurationUrl=${10:str},",
            "        },",
            "        tags=[],",
            "        version=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: codepipeline.CfnCustomActionType",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codepipeline.CfnCustomActionType",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-codepipeline-customactiontype",
        "scope": "python"
    },
    "codepipeline.CfnPipeline": {
        "body": [
            "codepipeline.CfnPipeline(self, \"${1:id}\", ",
            "        artifactStore={",
            "            location=${3:str},",
            "            type=${4:str},",
            "        },",
            "        artifactStores=[],",
            "        disableInboundStageTransitions=[],",
            "        executionMode=${5:str},",
            "        name=${6:str},",
            "        pipelineType=${7:str},",
            "        restartExecutionOnUpdate=${8:bool},",
            "        roleArn=${9:str}, # Required",
            "        stages=[], # Required",
            "        tags=[],",
            "        triggers=[],",
            "        variables=[],",
            ")"
        ],
        "description": [
            "Construct: codepipeline.CfnPipeline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codepipeline.CfnPipeline",
            "Attributes: ",
            "  attrVersion"
        ],
        "prefix": "l1-codepipeline-pipeline",
        "scope": "python"
    },
    "codepipeline.CfnWebhook": {
        "body": [
            "codepipeline.CfnWebhook(self, \"${1:id}\", ",
            "        authentication=${2:str}, # Required",
            "        authenticationConfiguration={",
            "            allowedIPRange=${3:str},",
            "            secretToken=${4:str},",
            "        },",
            "        filters=[], # Required",
            "        name=${5:str},",
            "        registerWithThirdParty=${6:bool},",
            "        targetAction=${7:str}, # Required",
            "        targetPipeline=${8:str}, # Required",
            "        targetPipelineVersion=${9:int}, # Required",
            ")"
        ],
        "description": [
            "Construct: codepipeline.CfnWebhook",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codepipeline.CfnWebhook",
            "Attributes: ",
            "  attrUrl"
        ],
        "prefix": "l1-codepipeline-webhook",
        "scope": "python"
    },
    "codestar.CfnGitHubRepository": {
        "body": [
            "codestar.CfnGitHubRepository(self, \"${1:id}\", ",
            "        code={",
            "        },",
            "        connectionArn=${3:str},",
            "        enableIssues=${4:bool},",
            "        isPrivate=${5:bool},",
            "        repositoryAccessToken=${6:str},",
            "        repositoryDescription=${7:str},",
            "        repositoryName=${8:str}, # Required",
            "        repositoryOwner=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: codestar.CfnGitHubRepository",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codestar.CfnGitHubRepository"
        ],
        "prefix": "l1-codestar-githubrepository",
        "scope": "python"
    },
    "codestarconnections.CfnConnection": {
        "body": [
            "codestarconnections.CfnConnection(self, \"${1:id}\", ",
            "        connectionName=${2:str}, # Required",
            "        hostArn=${3:str},",
            "        providerType=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codestarconnections.CfnConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codestarconnections.CfnConnection",
            "Attributes: ",
            "  attrConnectionArn",
            "  attrConnectionStatus",
            "  attrOwnerAccountId"
        ],
        "prefix": "l1-codestarconnections-connection",
        "scope": "python"
    },
    "codestarconnections.CfnRepositoryLink": {
        "body": [
            "codestarconnections.CfnRepositoryLink(self, \"${1:id}\", ",
            "        connectionArn=${2:str}, # Required",
            "        encryptionKeyArn=${3:str},",
            "        ownerId=${4:str}, # Required",
            "        repositoryName=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: codestarconnections.CfnRepositoryLink",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codestarconnections.CfnRepositoryLink",
            "Attributes: ",
            "  attrRepositoryLinkArn",
            "  attrProviderType",
            "  attrRepositoryLinkId"
        ],
        "prefix": "l1-codestarconnections-repositorylink",
        "scope": "python"
    },
    "codestarconnections.CfnSyncConfiguration": {
        "body": [
            "codestarconnections.CfnSyncConfiguration(self, \"${1:id}\", ",
            "        branch=${2:str}, # Required",
            "        configFile=${3:str}, # Required",
            "        publishDeploymentStatus=${4:str},",
            "        repositoryLinkId=${5:str}, # Required",
            "        resourceName=${6:str}, # Required",
            "        roleArn=${7:str}, # Required",
            "        syncType=${8:str}, # Required",
            "        triggerResourceUpdateOn=${9:str},",
            ")"
        ],
        "description": [
            "Construct: codestarconnections.CfnSyncConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codestarconnections.CfnSyncConfiguration",
            "Attributes: ",
            "  attrOwnerId",
            "  attrRepositoryName",
            "  attrProviderType"
        ],
        "prefix": "l1-codestarconnections-syncconfiguration",
        "scope": "python"
    },
    "codestarnotifications.CfnNotificationRule": {
        "body": [
            "codestarnotifications.CfnNotificationRule(self, \"${1:id}\", ",
            "        createdBy=${2:str},",
            "        detailType=${3:str}, # Required",
            "        eventTypeId=${4:str},",
            "        eventTypeIds=[], # Required",
            "        name=${6:str}, # Required",
            "        resource=${7:str}, # Required",
            "        status=${8:str},",
            "        tags={",
            "        },",
            "        targetAddress=${10:str},",
            "        targets=[], # Required",
            ")"
        ],
        "description": [
            "Construct: codestarnotifications.CfnNotificationRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codestarnotifications.CfnNotificationRule",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-codestarnotifications-notificationrule",
        "scope": "python"
    },
    "cognito.CfnIdentityPool": {
        "body": [
            "cognito.CfnIdentityPool(self, \"${1:id}\", ",
            "        allowClassicFlow=${2:bool},",
            "        allowUnauthenticatedIdentities=${3:bool}, # Required",
            "        cognitoEvents=${4:dict},",
            "        cognitoIdentityProviders=[],",
            "        cognitoStreams={",
            "            roleArn=${6:str},",
            "            streamName=${7:str},",
            "            streamingStatus=${8:str},",
            "        },",
            "        developerProviderName=${7:str},",
            "        identityPoolName=${8:str},",
            "        openIdConnectProviderARNs=[],",
            "        pushSync={",
            "            applicationArns=[],",
            "            roleArn=${11:str},",
            "        },",
            "        samlProviderARNs=[],",
            "        supportedLoginProviders=${12:dict},",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnIdentityPool",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnIdentityPool",
            "Attributes: ",
            "  attrId",
            "  attrName"
        ],
        "prefix": "l1-cognito-identitypool",
        "scope": "python"
    },
    "cognito.CfnIdentityPoolPrincipalTag": {
        "body": [
            "cognito.CfnIdentityPoolPrincipalTag(self, \"${1:id}\", ",
            "        identityPoolId=${2:str}, # Required",
            "        identityProviderName=${3:str}, # Required",
            "        principalTags=${4:dict},",
            "        useDefaults=${5:bool},",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnIdentityPoolPrincipalTag",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnIdentityPoolPrincipalTag"
        ],
        "prefix": "l1-cognito-identitypoolprincipaltag",
        "scope": "python"
    },
    "cognito.CfnIdentityPoolRoleAttachment": {
        "body": [
            "cognito.CfnIdentityPoolRoleAttachment(self, \"${1:id}\", ",
            "        identityPoolId=${2:str}, # Required",
            "        roleMappings={",
            "        },",
            "        roles={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnIdentityPoolRoleAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnIdentityPoolRoleAttachment",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-cognito-identitypoolroleattachment",
        "scope": "python"
    },
    "cognito.CfnLogDeliveryConfiguration": {
        "body": [
            "cognito.CfnLogDeliveryConfiguration(self, \"${1:id}\", ",
            "        logConfigurations=[],",
            "        userPoolId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnLogDeliveryConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnLogDeliveryConfiguration",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-cognito-logdeliveryconfiguration",
        "scope": "python"
    },
    "cognito.CfnUserPool": {
        "body": [
            "cognito.CfnUserPool(self, \"${1:id}\", ",
            "        accountRecoverySetting={",
            "            recoveryMechanisms=[],",
            "        },",
            "        adminCreateUserConfig={",
            "            allowAdminCreateUserOnly=${3:bool},",
            "            unusedAccountValidityDays=${5:int},",
            "        },",
            "        aliasAttributes=[],",
            "        autoVerifiedAttributes=[],",
            "        deletionProtection=${6:str},",
            "        deviceConfiguration={",
            "            challengeRequiredOnNewDevice=${7:bool},",
            "            deviceOnlyRememberedOnUserPrompt=${8:bool},",
            "        },",
            "        emailConfiguration={",
            "            configurationSet=${8:str},",
            "            emailSendingAccount=${9:str},",
            "            from=${10:str},",
            "            replyToEmailAddress=${11:str},",
            "            sourceArn=${12:str},",
            "        },",
            "        emailVerificationMessage=${9:str},",
            "        emailVerificationSubject=${10:str},",
            "        enabledMfas=[],",
            "        lambdaConfig={",
            "            createAuthChallenge=${12:str},",
            "            customMessage=${14:str},",
            "            defineAuthChallenge=${16:str},",
            "            kMSKeyID=${17:str},",
            "            postAuthentication=${18:str},",
            "            postConfirmation=${19:str},",
            "            preAuthentication=${20:str},",
            "            preSignUp=${21:str},",
            "            preTokenGeneration=${22:str},",
            "            userMigration=${24:str},",
            "            verifyAuthChallengeResponse=${25:str},",
            "        },",
            "        mfaConfiguration=${13:str},",
            "        policies={",
            "        },",
            "        schema=[],",
            "        smsAuthenticationMessage=${16:str},",
            "        smsConfiguration={",
            "            externalId=${17:str},",
            "            snsCallerArn=${18:str},",
            "            snsRegion=${19:str},",
            "        },",
            "        smsVerificationMessage=${18:str},",
            "        userAttributeUpdateSettings={",
            "            attributesRequireVerificationBeforeUpdate=[],",
            "        },",
            "        userPoolAddOns={",
            "            advancedSecurityMode=${20:str},",
            "        },",
            "        userPoolName=${21:str},",
            "        userPoolTags={",
            "        },",
            "        usernameAttributes=[],",
            "        usernameConfiguration={",
            "            caseSensitive=${24:bool},",
            "        },",
            "        verificationMessageTemplate={",
            "            defaultEmailOption=${25:str},",
            "            emailMessage=${26:str},",
            "            emailMessageByLink=${27:str},",
            "            emailSubject=${28:str},",
            "            emailSubjectByLink=${29:str},",
            "            smsMessage=${30:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPool",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPool",
            "Attributes: ",
            "  attrProviderName",
            "  attrUserPoolId",
            "  attrProviderURL",
            "  attrArn"
        ],
        "prefix": "l1-cognito-userpool",
        "scope": "python"
    },
    "cognito.CfnUserPoolClient": {
        "body": [
            "cognito.CfnUserPoolClient(self, \"${1:id}\", ",
            "        accessTokenValidity=${2:int},",
            "        allowedOAuthFlows=[],",
            "        allowedOAuthFlowsUserPoolClient=${4:bool},",
            "        allowedOAuthScopes=[],",
            "        analyticsConfiguration={",
            "            applicationArn=${6:str},",
            "            applicationId=${7:str},",
            "            externalId=${8:str},",
            "            roleArn=${9:str},",
            "            userDataShared=${10:bool},",
            "        },",
            "        authSessionValidity=${7:int},",
            "        callbackURLs=[],",
            "        clientName=${9:str},",
            "        defaultRedirectURI=${10:str},",
            "        enablePropagateAdditionalUserContextData=${11:bool},",
            "        enableTokenRevocation=${12:bool},",
            "        explicitAuthFlows=[],",
            "        generateSecret=${14:bool},",
            "        idTokenValidity=${15:int},",
            "        logoutURLs=[],",
            "        preventUserExistenceErrors=${17:str},",
            "        readAttributes=[],",
            "        refreshTokenValidity=${19:int},",
            "        supportedIdentityProviders=[],",
            "        tokenValidityUnits={",
            "            accessToken=${21:str},",
            "            idToken=${22:str},",
            "            refreshToken=${23:str},",
            "        },",
            "        userPoolId=${22:str}, # Required",
            "        writeAttributes=[],",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolClient",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolClient",
            "Attributes: ",
            "  attrClientSecret",
            "  attrClientId",
            "  attrName"
        ],
        "prefix": "l1-cognito-userpoolclient",
        "scope": "python"
    },
    "cognito.CfnUserPoolDomain": {
        "body": [
            "cognito.CfnUserPoolDomain(self, \"${1:id}\", ",
            "        customDomainConfig={",
            "            certificateArn=${2:str},",
            "        },",
            "        domain=${3:str}, # Required",
            "        userPoolId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolDomain",
            "Attributes: ",
            "  attrCloudFrontDistribution"
        ],
        "prefix": "l1-cognito-userpooldomain",
        "scope": "python"
    },
    "cognito.CfnUserPoolGroup": {
        "body": [
            "cognito.CfnUserPoolGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        groupName=${3:str},",
            "        precedence=${4:int},",
            "        roleArn=${5:str},",
            "        userPoolId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolGroup"
        ],
        "prefix": "l1-cognito-userpoolgroup",
        "scope": "python"
    },
    "cognito.CfnUserPoolIdentityProvider": {
        "body": [
            "cognito.CfnUserPoolIdentityProvider(self, \"${1:id}\", ",
            "        attributeMapping=${2:dict},",
            "        idpIdentifiers=[],",
            "        providerDetails=${4:dict},",
            "        providerName=${5:str}, # Required",
            "        providerType=${6:str}, # Required",
            "        userPoolId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolIdentityProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolIdentityProvider"
        ],
        "prefix": "l1-cognito-userpoolidentityprovider",
        "scope": "python"
    },
    "cognito.CfnUserPoolResourceServer": {
        "body": [
            "cognito.CfnUserPoolResourceServer(self, \"${1:id}\", ",
            "        identifier=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        scopes=[],",
            "        userPoolId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolResourceServer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolResourceServer"
        ],
        "prefix": "l1-cognito-userpoolresourceserver",
        "scope": "python"
    },
    "cognito.CfnUserPoolRiskConfigurationAttachment": {
        "body": [
            "cognito.CfnUserPoolRiskConfigurationAttachment(self, \"${1:id}\", ",
            "        accountTakeoverRiskConfiguration={",
            "        },",
            "        clientId=${3:str}, # Required",
            "        compromisedCredentialsRiskConfiguration={",
            "            eventFilter=[],",
            "        },",
            "        riskExceptionConfiguration={",
            "            blockedIPRangeList=[],",
            "            skippedIPRangeList=[],",
            "        },",
            "        userPoolId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolRiskConfigurationAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolRiskConfigurationAttachment"
        ],
        "prefix": "l1-cognito-userpoolriskconfigurationattachment",
        "scope": "python"
    },
    "cognito.CfnUserPoolUICustomizationAttachment": {
        "body": [
            "cognito.CfnUserPoolUICustomizationAttachment(self, \"${1:id}\", ",
            "        cSS=${2:str},",
            "        clientId=${3:str}, # Required",
            "        userPoolId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolUICustomizationAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolUICustomizationAttachment"
        ],
        "prefix": "l1-cognito-userpooluicustomizationattachment",
        "scope": "python"
    },
    "cognito.CfnUserPoolUser": {
        "body": [
            "cognito.CfnUserPoolUser(self, \"${1:id}\", ",
            "        clientMetadata={",
            "        },",
            "        desiredDeliveryMediums=[],",
            "        forceAliasCreation=${4:bool},",
            "        messageAction=${5:str},",
            "        userAttributes=[],",
            "        userPoolId=${7:str}, # Required",
            "        username=${8:str},",
            "        validationData=[],",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolUser",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolUser"
        ],
        "prefix": "l1-cognito-userpooluser",
        "scope": "python"
    },
    "cognito.CfnUserPoolUserToGroupAttachment": {
        "body": [
            "cognito.CfnUserPoolUserToGroupAttachment(self, \"${1:id}\", ",
            "        groupName=${2:str}, # Required",
            "        userPoolId=${3:str}, # Required",
            "        username=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cognito.CfnUserPoolUserToGroupAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cognito.CfnUserPoolUserToGroupAttachment"
        ],
        "prefix": "l1-cognito-userpoolusertogroupattachment",
        "scope": "python"
    },
    "comprehend.CfnDocumentClassifier": {
        "body": [
            "comprehend.CfnDocumentClassifier(self, \"${1:id}\", ",
            "        dataAccessRoleArn=${2:str}, # Required",
            "        documentClassifierName=${3:str}, # Required",
            "        inputDataConfig={",
            "            augmentedManifests=[],",
            "            dataFormat=${5:str},",
            "            documentType=${7:str},",
            "            labelDelimiter=${9:str},",
            "            s3Uri=${10:str},",
            "            testS3Uri=${11:str},",
            "        },",
            "        languageCode=${5:str}, # Required",
            "        mode=${6:str},",
            "        modelKmsKeyId=${7:str},",
            "        modelPolicy=${8:str},",
            "        outputDataConfig={",
            "            kmsKeyId=${9:str},",
            "            s3Uri=${10:str},",
            "        },",
            "        tags=[],",
            "        versionName=${11:str},",
            "        volumeKmsKeyId=${12:str},",
            "        vpcConfig={",
            "            securityGroupIds=[],",
            "            subnets=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: comprehend.CfnDocumentClassifier",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-comprehend.CfnDocumentClassifier",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-comprehend-documentclassifier",
        "scope": "python"
    },
    "comprehend.CfnFlywheel": {
        "body": [
            "comprehend.CfnFlywheel(self, \"${1:id}\", ",
            "        activeModelArn=${2:str},",
            "        dataAccessRoleArn=${3:str}, # Required",
            "        dataLakeS3Uri=${4:str}, # Required",
            "        dataSecurityConfig={",
            "            dataLakeKmsKeyId=${5:str},",
            "            modelKmsKeyId=${6:str},",
            "            volumeKmsKeyId=${7:str},",
            "        },",
            "        flywheelName=${6:str}, # Required",
            "        modelType=${7:str},",
            "        tags=[],",
            "        taskConfig={",
            "            languageCode=${11:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: comprehend.CfnFlywheel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-comprehend.CfnFlywheel",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-comprehend-flywheel",
        "scope": "python"
    },
    "config.CfnAggregationAuthorization": {
        "body": [
            "config.CfnAggregationAuthorization(self, \"${1:id}\", ",
            "        authorizedAccountId=${2:str}, # Required",
            "        authorizedAwsRegion=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: config.CfnAggregationAuthorization",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnAggregationAuthorization",
            "Attributes: ",
            "  attrAggregationAuthorizationArn"
        ],
        "prefix": "l1-config-aggregationauthorization",
        "scope": "python"
    },
    "config.CfnConfigRule": {
        "body": [
            "config.CfnConfigRule(self, \"${1:id}\", ",
            "        compliance={",
            "            type=${2:str},",
            "        },",
            "        configRuleName=${3:str},",
            "        description=${4:str},",
            "        evaluationModes=[],",
            "        inputParameters=${6:dict},",
            "        maximumExecutionFrequency=${7:str},",
            "        scope={",
            "            complianceResourceId=${8:str},",
            "            complianceResourceTypes=[],",
            "            tagKey=${10:str},",
            "            tagValue=${11:str},",
            "        },",
            "        source={",
            "            owner=${10:str},",
            "            sourceDetails=[],",
            "            sourceIdentifier=${12:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: config.CfnConfigRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnConfigRule",
            "Attributes: ",
            "  attrConfigRuleId",
            "  attrCompliance.Type",
            "  attrArn"
        ],
        "prefix": "l1-config-configrule",
        "scope": "python"
    },
    "config.CfnConfigurationAggregator": {
        "body": [
            "config.CfnConfigurationAggregator(self, \"${1:id}\", ",
            "        accountAggregationSources=[],",
            "        configurationAggregatorName=${3:str},",
            "        organizationAggregationSource={",
            "            allAwsRegions=${4:bool},",
            "            awsRegions=[],",
            "            roleArn=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: config.CfnConfigurationAggregator",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnConfigurationAggregator",
            "Attributes: ",
            "  attrConfigurationAggregatorArn"
        ],
        "prefix": "l1-config-configurationaggregator",
        "scope": "python"
    },
    "config.CfnConfigurationRecorder": {
        "body": [
            "config.CfnConfigurationRecorder(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        recordingGroup={",
            "            allSupported=${3:bool},",
            "            includeGlobalResourceTypes=${5:bool},",
            "            resourceTypes=[],",
            "        },",
            "        recordingMode={",
            "            recordingFrequency=${4:str},",
            "            recordingModeOverrides=[],",
            "        },",
            "        roleARN=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: config.CfnConfigurationRecorder",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnConfigurationRecorder"
        ],
        "prefix": "l1-config-configurationrecorder",
        "scope": "python"
    },
    "config.CfnConformancePack": {
        "body": [
            "config.CfnConformancePack(self, \"${1:id}\", ",
            "        conformancePackInputParameters=[],",
            "        conformancePackName=${3:str}, # Required",
            "        deliveryS3Bucket=${4:str},",
            "        deliveryS3KeyPrefix=${5:str},",
            "        templateBody=${6:str},",
            "        templateS3Uri=${7:str},",
            "        templateSSMDocumentDetails={",
            "            documentName=${8:str},",
            "            documentVersion=${9:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: config.CfnConformancePack",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnConformancePack"
        ],
        "prefix": "l1-config-conformancepack",
        "scope": "python"
    },
    "config.CfnDeliveryChannel": {
        "body": [
            "config.CfnDeliveryChannel(self, \"${1:id}\", ",
            "        configSnapshotDeliveryProperties={",
            "            deliveryFrequency=${2:str},",
            "        },",
            "        name=${3:str},",
            "        s3BucketName=${4:str}, # Required",
            "        s3KeyPrefix=${5:str},",
            "        s3KmsKeyArn=${6:str},",
            "        snsTopicARN=${7:str},",
            ")"
        ],
        "description": [
            "Construct: config.CfnDeliveryChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnDeliveryChannel"
        ],
        "prefix": "l1-config-deliverychannel",
        "scope": "python"
    },
    "config.CfnOrganizationConfigRule": {
        "body": [
            "config.CfnOrganizationConfigRule(self, \"${1:id}\", ",
            "        excludedAccounts=[],",
            "        organizationConfigRuleName=${3:str}, # Required",
            "        organizationCustomPolicyRuleMetadata={",
            "            debugLogDeliveryAccounts=[],",
            "            description=${5:str},",
            "            inputParameters=${6:str},",
            "            maximumExecutionFrequency=${7:str},",
            "            organizationConfigRuleTriggerTypes=[],",
            "            policyText=${9:str},",
            "            resourceIdScope=${10:str},",
            "            resourceTypesScope=[],",
            "            runtime=${12:str},",
            "            tagKeyScope=${13:str},",
            "            tagValueScope=${14:str},",
            "        },",
            "        organizationCustomRuleMetadata={",
            "            description=${5:str},",
            "            inputParameters=${6:str},",
            "            lambdaFunctionArn=${7:str},",
            "            maximumExecutionFrequency=${8:str},",
            "            organizationConfigRuleTriggerTypes=[],",
            "            resourceIdScope=${10:str},",
            "            resourceTypesScope=[],",
            "            tagKeyScope=${12:str},",
            "            tagValueScope=${13:str},",
            "        },",
            "        organizationManagedRuleMetadata={",
            "            description=${6:str},",
            "            inputParameters=${7:str},",
            "            maximumExecutionFrequency=${8:str},",
            "            resourceIdScope=${9:str},",
            "            resourceTypesScope=[],",
            "            ruleIdentifier=${11:str},",
            "            tagKeyScope=${12:str},",
            "            tagValueScope=${13:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: config.CfnOrganizationConfigRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnOrganizationConfigRule"
        ],
        "prefix": "l1-config-organizationconfigrule",
        "scope": "python"
    },
    "config.CfnOrganizationConformancePack": {
        "body": [
            "config.CfnOrganizationConformancePack(self, \"${1:id}\", ",
            "        conformancePackInputParameters=[],",
            "        deliveryS3Bucket=${3:str},",
            "        deliveryS3KeyPrefix=${4:str},",
            "        excludedAccounts=[],",
            "        organizationConformancePackName=${6:str}, # Required",
            "        templateBody=${7:str},",
            "        templateS3Uri=${8:str},",
            ")"
        ],
        "description": [
            "Construct: config.CfnOrganizationConformancePack",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnOrganizationConformancePack"
        ],
        "prefix": "l1-config-organizationconformancepack",
        "scope": "python"
    },
    "config.CfnRemediationConfiguration": {
        "body": [
            "config.CfnRemediationConfiguration(self, \"${1:id}\", ",
            "        automatic=${2:bool},",
            "        configRuleName=${3:str}, # Required",
            "        executionControls={",
            "        },",
            "        maximumAutomaticAttempts=${5:int},",
            "        parameters=${6:dict},",
            "        resourceType=${7:str},",
            "        retryAttemptSeconds=${8:int},",
            "        targetId=${9:str}, # Required",
            "        targetType=${10:str}, # Required",
            "        targetVersion=${11:str},",
            ")"
        ],
        "description": [
            "Construct: config.CfnRemediationConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnRemediationConfiguration"
        ],
        "prefix": "l1-config-remediationconfiguration",
        "scope": "python"
    },
    "config.CfnStoredQuery": {
        "body": [
            "config.CfnStoredQuery(self, \"${1:id}\", ",
            "        queryDescription=${2:str},",
            "        queryExpression=${3:str}, # Required",
            "        queryName=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: config.CfnStoredQuery",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-config.CfnStoredQuery",
            "Attributes: ",
            "  attrQueryArn",
            "  attrQueryId"
        ],
        "prefix": "l1-config-storedquery",
        "scope": "python"
    },
    "connect.CfnApprovedOrigin": {
        "body": [
            "connect.CfnApprovedOrigin(self, \"${1:id}\", ",
            "        instanceId=${2:str}, # Required",
            "        origin=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnApprovedOrigin",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnApprovedOrigin"
        ],
        "prefix": "l1-connect-approvedorigin",
        "scope": "python"
    },
    "connect.CfnContactFlow": {
        "body": [
            "connect.CfnContactFlow(self, \"${1:id}\", ",
            "        content=${2:str}, # Required",
            "        description=${3:str},",
            "        instanceArn=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        state=${6:str},",
            "        tags=[],",
            "        type=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnContactFlow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnContactFlow",
            "Attributes: ",
            "  attrContactFlowArn"
        ],
        "prefix": "l1-connect-contactflow",
        "scope": "python"
    },
    "connect.CfnContactFlowModule": {
        "body": [
            "connect.CfnContactFlowModule(self, \"${1:id}\", ",
            "        content=${2:str}, # Required",
            "        description=${3:str},",
            "        instanceArn=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        state=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnContactFlowModule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnContactFlowModule",
            "Attributes: ",
            "  attrContactFlowModuleArn",
            "  attrStatus"
        ],
        "prefix": "l1-connect-contactflowmodule",
        "scope": "python"
    },
    "connect.CfnEvaluationForm": {
        "body": [
            "connect.CfnEvaluationForm(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        instanceArn=${3:str}, # Required",
            "        items=[], # Required",
            "        scoringStrategy={",
            "            mode=${5:str},",
            "            status=${6:str},",
            "        },",
            "        status=${6:str}, # Required",
            "        tags=[],",
            "        title=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnEvaluationForm",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnEvaluationForm",
            "Attributes: ",
            "  attrEvaluationFormArn"
        ],
        "prefix": "l1-connect-evaluationform",
        "scope": "python"
    },
    "connect.CfnHoursOfOperation": {
        "body": [
            "connect.CfnHoursOfOperation(self, \"${1:id}\", ",
            "        config=[], # Required",
            "        description=${3:str},",
            "        instanceArn=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        tags=[],",
            "        timeZone=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnHoursOfOperation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnHoursOfOperation",
            "Attributes: ",
            "  attrHoursOfOperationArn"
        ],
        "prefix": "l1-connect-hoursofoperation",
        "scope": "python"
    },
    "connect.CfnInstance": {
        "body": [
            "connect.CfnInstance(self, \"${1:id}\", ",
            "        attributes={",
            "            autoResolveBestVoices=${2:bool},",
            "            contactLens=${3:bool},",
            "            contactflowLogs=${4:bool},",
            "            earlyMedia=${5:bool},",
            "            inboundCalls=${6:bool},",
            "            outboundCalls=${7:bool},",
            "            useCustomTTSVoices=${8:bool},",
            "        },",
            "        directoryId=${3:str},",
            "        identityManagementType=${4:str}, # Required",
            "        instanceAlias=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnInstance",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrServiceRole",
            "  attrInstanceStatus",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-connect-instance",
        "scope": "python"
    },
    "connect.CfnInstanceStorageConfig": {
        "body": [
            "connect.CfnInstanceStorageConfig(self, \"${1:id}\", ",
            "        instanceArn=${2:str}, # Required",
            "        kinesisFirehoseConfig={",
            "            firehoseArn=${3:str},",
            "        },",
            "        kinesisStreamConfig={",
            "            streamArn=${4:str},",
            "        },",
            "        kinesisVideoStreamConfig={",
            "            prefix=${6:str},",
            "            retentionPeriodHours=${7:float},",
            "        },",
            "        resourceType=${6:str}, # Required",
            "        s3Config={",
            "            bucketName=${7:str},",
            "            bucketPrefix=${8:str},",
            "        },",
            "        storageType=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnInstanceStorageConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnInstanceStorageConfig",
            "Attributes: ",
            "  attrAssociationId"
        ],
        "prefix": "l1-connect-instancestorageconfig",
        "scope": "python"
    },
    "connect.CfnIntegrationAssociation": {
        "body": [
            "connect.CfnIntegrationAssociation(self, \"${1:id}\", ",
            "        instanceId=${2:str}, # Required",
            "        integrationArn=${3:str}, # Required",
            "        integrationType=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnIntegrationAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnIntegrationAssociation",
            "Attributes: ",
            "  attrIntegrationAssociationId"
        ],
        "prefix": "l1-connect-integrationassociation",
        "scope": "python"
    },
    "connect.CfnPhoneNumber": {
        "body": [
            "connect.CfnPhoneNumber(self, \"${1:id}\", ",
            "        countryCode=${2:str},",
            "        description=${3:str},",
            "        prefix=${4:str},",
            "        sourcePhoneNumberArn=${5:str},",
            "        tags=[],",
            "        targetArn=${7:str}, # Required",
            "        type=${8:str},",
            ")"
        ],
        "description": [
            "Construct: connect.CfnPhoneNumber",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnPhoneNumber",
            "Attributes: ",
            "  attrAddress",
            "  attrPhoneNumberArn"
        ],
        "prefix": "l1-connect-phonenumber",
        "scope": "python"
    },
    "connect.CfnPredefinedAttribute": {
        "body": [
            "connect.CfnPredefinedAttribute(self, \"${1:id}\", ",
            "        instanceArn=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        values={",
            "            stringList=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: connect.CfnPredefinedAttribute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnPredefinedAttribute",
            "Attributes: ",
            "  attrLastModifiedTime",
            "  attrLastModifiedRegion"
        ],
        "prefix": "l1-connect-predefinedattribute",
        "scope": "python"
    },
    "connect.CfnPrompt": {
        "body": [
            "connect.CfnPrompt(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        instanceArn=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        s3Uri=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnPrompt",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnPrompt",
            "Attributes: ",
            "  attrPromptArn"
        ],
        "prefix": "l1-connect-prompt",
        "scope": "python"
    },
    "connect.CfnQueue": {
        "body": [
            "connect.CfnQueue(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        hoursOfOperationArn=${3:str}, # Required",
            "        instanceArn=${4:str}, # Required",
            "        maxContacts=${5:int},",
            "        name=${6:str}, # Required",
            "        outboundCallerConfig={",
            "            outboundCallerIdName=${7:str},",
            "            outboundCallerIdNumberArn=${8:str},",
            "            outboundFlowArn=${9:str},",
            "        },",
            "        quickConnectArns=[],",
            "        status=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnQueue",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnQueue",
            "Attributes: ",
            "  attrType",
            "  attrQueueArn"
        ],
        "prefix": "l1-connect-queue",
        "scope": "python"
    },
    "connect.CfnQuickConnect": {
        "body": [
            "connect.CfnQuickConnect(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        instanceArn=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        quickConnectConfig={",
            "            quickConnectType=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnQuickConnect",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnQuickConnect",
            "Attributes: ",
            "  attrQuickConnectArn",
            "  attrQuickConnectType"
        ],
        "prefix": "l1-connect-quickconnect",
        "scope": "python"
    },
    "connect.CfnRoutingProfile": {
        "body": [
            "connect.CfnRoutingProfile(self, \"${1:id}\", ",
            "        agentAvailabilityTimer=${2:str},",
            "        defaultOutboundQueueArn=${3:str}, # Required",
            "        description=${4:str}, # Required",
            "        instanceArn=${5:str}, # Required",
            "        mediaConcurrencies=[], # Required",
            "        name=${7:str}, # Required",
            "        queueConfigs=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnRoutingProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnRoutingProfile",
            "Attributes: ",
            "  attrRoutingProfileArn"
        ],
        "prefix": "l1-connect-routingprofile",
        "scope": "python"
    },
    "connect.CfnRule": {
        "body": [
            "connect.CfnRule(self, \"${1:id}\", ",
            "        actions={",
            "            assignContactCategoryActions=[],",
            "            createCaseActions=[],",
            "            endAssociatedTasksActions=[],",
            "            eventBridgeActions=[],",
            "            sendNotificationActions=[],",
            "            submitAutoEvaluationActions=[],",
            "            taskActions=[],",
            "            updateCaseActions=[],",
            "        },",
            "        function=${3:str}, # Required",
            "        instanceArn=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        publishStatus=${6:str}, # Required",
            "        tags=[],",
            "        triggerEventSource={",
            "            eventSourceName=${8:str},",
            "            integrationAssociationArn=${9:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: connect.CfnRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnRule",
            "Attributes: ",
            "  attrRuleArn"
        ],
        "prefix": "l1-connect-rule",
        "scope": "python"
    },
    "connect.CfnSecurityKey": {
        "body": [
            "connect.CfnSecurityKey(self, \"${1:id}\", ",
            "        instanceId=${2:str}, # Required",
            "        key=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnSecurityKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnSecurityKey",
            "Attributes: ",
            "  attrAssociationId"
        ],
        "prefix": "l1-connect-securitykey",
        "scope": "python"
    },
    "connect.CfnSecurityProfile": {
        "body": [
            "connect.CfnSecurityProfile(self, \"${1:id}\", ",
            "        allowedAccessControlHierarchyGroupId=${2:str},",
            "        allowedAccessControlTags=[],",
            "        applications=[],",
            "        description=${5:str},",
            "        hierarchyRestrictedResources=[],",
            "        instanceArn=${7:str}, # Required",
            "        permissions=[],",
            "        securityProfileName=${9:str}, # Required",
            "        tagRestrictedResources=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnSecurityProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnSecurityProfile",
            "Attributes: ",
            "  attrSecurityProfileArn",
            "  attrLastModifiedTime",
            "  attrLastModifiedRegion"
        ],
        "prefix": "l1-connect-securityprofile",
        "scope": "python"
    },
    "connect.CfnTaskTemplate": {
        "body": [
            "connect.CfnTaskTemplate(self, \"${1:id}\", ",
            "        clientToken=${2:str},",
            "        constraints={",
            "            invisibleFields=[],",
            "            readOnlyFields=[],",
            "            requiredFields=[],",
            "        },",
            "        contactFlowArn=${4:str},",
            "        defaults=[],",
            "        description=${6:str},",
            "        fields=[],",
            "        instanceArn=${8:str}, # Required",
            "        name=${9:str},",
            "        status=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnTaskTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnTaskTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-connect-tasktemplate",
        "scope": "python"
    },
    "connect.CfnTrafficDistributionGroup": {
        "body": [
            "connect.CfnTrafficDistributionGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        instanceArn=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnTrafficDistributionGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnTrafficDistributionGroup",
            "Attributes: ",
            "  attrStatus",
            "  attrIsDefault",
            "  attrTrafficDistributionGroupArn"
        ],
        "prefix": "l1-connect-trafficdistributiongroup",
        "scope": "python"
    },
    "connect.CfnUser": {
        "body": [
            "connect.CfnUser(self, \"${1:id}\", ",
            "        directoryUserId=${2:str},",
            "        hierarchyGroupArn=${3:str},",
            "        identityInfo={",
            "            email=${4:str},",
            "            firstName=${5:str},",
            "            lastName=${6:str},",
            "            mobile=${7:str},",
            "            secondaryEmail=${8:str},",
            "        },",
            "        instanceArn=${5:str}, # Required",
            "        password=${6:str},",
            "        phoneConfig={",
            "            afterContactWorkTimeLimit=${7:int},",
            "            autoAccept=${8:bool},",
            "            deskPhoneNumber=${9:str},",
            "            phoneType=${10:str},",
            "        },",
            "        routingProfileArn=${8:str}, # Required",
            "        securityProfileArns=[], # Required",
            "        tags=[],",
            "        userProficiencies=[],",
            "        username=${12:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnUser",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnUser",
            "Attributes: ",
            "  attrUserArn"
        ],
        "prefix": "l1-connect-user",
        "scope": "python"
    },
    "connect.CfnUserHierarchyGroup": {
        "body": [
            "connect.CfnUserHierarchyGroup(self, \"${1:id}\", ",
            "        instanceArn=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        parentGroupArn=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connect.CfnUserHierarchyGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnUserHierarchyGroup",
            "Attributes: ",
            "  attrUserHierarchyGroupArn"
        ],
        "prefix": "l1-connect-userhierarchygroup",
        "scope": "python"
    },
    "connect.CfnView": {
        "body": [
            "connect.CfnView(self, \"${1:id}\", ",
            "        actions=[], # Required",
            "        description=${3:str},",
            "        instanceArn=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        tags=[],",
            "        template=${7:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: connect.CfnView",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnView",
            "Attributes: ",
            "  attrViewArn",
            "  attrViewContentSha256",
            "  attrViewId"
        ],
        "prefix": "l1-connect-view",
        "scope": "python"
    },
    "connect.CfnViewVersion": {
        "body": [
            "connect.CfnViewVersion(self, \"${1:id}\", ",
            "        versionDescription=${2:str},",
            "        viewArn=${3:str}, # Required",
            "        viewContentSha256=${4:str},",
            ")"
        ],
        "description": [
            "Construct: connect.CfnViewVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connect.CfnViewVersion",
            "Attributes: ",
            "  attrViewVersionArn",
            "  attrVersion"
        ],
        "prefix": "l1-connect-viewversion",
        "scope": "python"
    },
    "connectcampaigns.CfnCampaign": {
        "body": [
            "connectcampaigns.CfnCampaign(self, \"${1:id}\", ",
            "        connectInstanceArn=${2:str}, # Required",
            "        dialerConfig={",
            "        },",
            "        name=${4:str}, # Required",
            "        outboundCallConfig={",
            "            connectContactFlowArn=${6:str},",
            "            connectQueueArn=${7:str},",
            "            connectSourcePhoneNumber=${8:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: connectcampaigns.CfnCampaign",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-connectcampaigns.CfnCampaign",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-connectcampaigns-campaign",
        "scope": "python"
    },
    "controltower.CfnEnabledBaseline": {
        "body": [
            "controltower.CfnEnabledBaseline(self, \"${1:id}\", ",
            "        baselineIdentifier=${2:str}, # Required",
            "        baselineVersion=${3:str}, # Required",
            "        parameters=[],",
            "        tags=[],",
            "        targetIdentifier=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: controltower.CfnEnabledBaseline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-controltower.CfnEnabledBaseline",
            "Attributes: ",
            "  attrEnabledBaselineIdentifier"
        ],
        "prefix": "l1-controltower-enabledbaseline",
        "scope": "python"
    },
    "controltower.CfnEnabledControl": {
        "body": [
            "controltower.CfnEnabledControl(self, \"${1:id}\", ",
            "        controlIdentifier=${2:str}, # Required",
            "        parameters=[],",
            "        tags=[],",
            "        targetIdentifier=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: controltower.CfnEnabledControl",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-controltower.CfnEnabledControl"
        ],
        "prefix": "l1-controltower-enabledcontrol",
        "scope": "python"
    },
    "controltower.CfnLandingZone": {
        "body": [
            "controltower.CfnLandingZone(self, \"${1:id}\", ",
            "        manifest=${2:dict}, # Required",
            "        tags=[],",
            "        version=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: controltower.CfnLandingZone",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-controltower.CfnLandingZone",
            "Attributes: ",
            "  attrStatus",
            "  attrLatestAvailableVersion",
            "  attrDriftStatus",
            "  attrArn",
            "  attrLandingZoneIdentifier"
        ],
        "prefix": "l1-controltower-landingzone",
        "scope": "python"
    },
    "cur.CfnReportDefinition": {
        "body": [
            "cur.CfnReportDefinition(self, \"${1:id}\", ",
            "        additionalArtifacts=[],",
            "        additionalSchemaElements=[],",
            "        billingViewArn=${4:str},",
            "        compression=${5:str}, # Required",
            "        format=${6:str}, # Required",
            "        refreshClosedReports=${7:bool}, # Required",
            "        reportName=${8:str}, # Required",
            "        reportVersioning=${9:str}, # Required",
            "        s3Bucket=${10:str}, # Required",
            "        s3Prefix=${11:str}, # Required",
            "        s3Region=${12:str}, # Required",
            "        timeUnit=${13:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: cur.CfnReportDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-cur.CfnReportDefinition"
        ],
        "prefix": "l1-cur-reportdefinition",
        "scope": "python"
    },
    "customerprofiles.CfnCalculatedAttributeDefinition": {
        "body": [
            "customerprofiles.CfnCalculatedAttributeDefinition(self, \"${1:id}\", ",
            "        attributeDetails={",
            "            attributes=[],",
            "            expression=${3:str},",
            "        },",
            "        calculatedAttributeName=${3:str}, # Required",
            "        conditions={",
            "            objectCount=${4:int},",
            "        },",
            "        description=${5:str},",
            "        displayName=${6:str},",
            "        domainName=${7:str}, # Required",
            "        statistic=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: customerprofiles.CfnCalculatedAttributeDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-customerprofiles.CfnCalculatedAttributeDefinition",
            "Attributes: ",
            "  attrLastUpdatedAt",
            "  attrCreatedAt"
        ],
        "prefix": "l1-customerprofiles-calculatedattributedefinition",
        "scope": "python"
    },
    "customerprofiles.CfnDomain": {
        "body": [
            "customerprofiles.CfnDomain(self, \"${1:id}\", ",
            "        deadLetterQueueUrl=${2:str},",
            "        defaultEncryptionKey=${3:str},",
            "        defaultExpirationDays=${4:int}, # Required",
            "        domainName=${5:str}, # Required",
            "        matching={",
            "            enabled=${7:bool},",
            "        },",
            "        ruleBasedMatching={",
            "            enabled=${9:bool},",
            "            matchingRules=[],",
            "            maxAllowedRuleLevelForMatching=${12:int},",
            "            maxAllowedRuleLevelForMerging=${13:int},",
            "            status=${14:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: customerprofiles.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-customerprofiles.CfnDomain",
            "Attributes: ",
            "  attrStats.ProfileCount",
            "  attrStats.ObjectCount",
            "  attrLastUpdatedAt",
            "  attrCreatedAt",
            "  attrStats",
            "  attrStats.MeteringProfileCount",
            "  attrStats.TotalSize",
            "  attrRuleBasedMatching.Status"
        ],
        "prefix": "l1-customerprofiles-domain",
        "scope": "python"
    },
    "customerprofiles.CfnEventStream": {
        "body": [
            "customerprofiles.CfnEventStream(self, \"${1:id}\", ",
            "        domainName=${2:str}, # Required",
            "        eventStreamName=${3:str}, # Required",
            "        tags=[],",
            "        uri=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: customerprofiles.CfnEventStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-customerprofiles.CfnEventStream",
            "Attributes: ",
            "  attrDestinationDetails.Status",
            "  attrEventStreamArn",
            "  attrState",
            "  attrCreatedAt",
            "  attrDestinationDetails.Uri",
            "  attrDestinationDetails"
        ],
        "prefix": "l1-customerprofiles-eventstream",
        "scope": "python"
    },
    "customerprofiles.CfnIntegration": {
        "body": [
            "customerprofiles.CfnIntegration(self, \"${1:id}\", ",
            "        domainName=${2:str}, # Required",
            "        flowDefinition={",
            "            description=${3:str},",
            "            flowName=${4:str},",
            "            kmsArn=${5:str},",
            "            tasks=[],",
            "        },",
            "        objectTypeName=${4:str},",
            "        objectTypeNames=[],",
            "        tags=[],",
            "        uri=${7:str},",
            ")"
        ],
        "description": [
            "Construct: customerprofiles.CfnIntegration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-customerprofiles.CfnIntegration",
            "Attributes: ",
            "  attrLastUpdatedAt",
            "  attrCreatedAt"
        ],
        "prefix": "l1-customerprofiles-integration",
        "scope": "python"
    },
    "customerprofiles.CfnObjectType": {
        "body": [
            "customerprofiles.CfnObjectType(self, \"${1:id}\", ",
            "        allowProfileCreation=${2:bool},",
            "        description=${3:str}, # Required",
            "        domainName=${4:str}, # Required",
            "        encryptionKey=${5:str},",
            "        expirationDays=${6:int},",
            "        fields=[],",
            "        keys=[],",
            "        objectTypeName=${9:str}, # Required",
            "        sourceLastUpdatedTimestampFormat=${10:str},",
            "        tags=[],",
            "        templateId=${12:str},",
            ")"
        ],
        "description": [
            "Construct: customerprofiles.CfnObjectType",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-customerprofiles.CfnObjectType",
            "Attributes: ",
            "  attrLastUpdatedAt",
            "  attrCreatedAt"
        ],
        "prefix": "l1-customerprofiles-objecttype",
        "scope": "python"
    },
    "databrew.CfnDataset": {
        "body": [
            "databrew.CfnDataset(self, \"${1:id}\", ",
            "        format=${2:str},",
            "        formatOptions={",
            "        },",
            "        input={",
            "        },",
            "        name=${5:str}, # Required",
            "        pathOptions={",
            "            parameters=[],",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: databrew.CfnDataset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-databrew.CfnDataset"
        ],
        "prefix": "l1-databrew-dataset",
        "scope": "python"
    },
    "databrew.CfnJob": {
        "body": [
            "databrew.CfnJob(self, \"${1:id}\", ",
            "        dataCatalogOutputs=[],",
            "        databaseOutputs=[],",
            "        datasetName=${4:str},",
            "        encryptionKeyArn=${5:str},",
            "        encryptionMode=${6:str},",
            "        jobSample={",
            "            mode=${7:str},",
            "            size=${8:int},",
            "        },",
            "        logSubscription=${8:str},",
            "        maxCapacity=${9:int},",
            "        maxRetries=${10:int},",
            "        name=${11:str}, # Required",
            "        outputLocation={",
            "            bucket=${12:str},",
            "            bucketOwner=${13:str},",
            "            key=${14:str},",
            "        },",
            "        outputs=[],",
            "        profileConfiguration={",
            "            columnStatisticsConfigurations=[],",
            "            profileColumns=[],",
            "        },",
            "        projectName=${15:str},",
            "        recipe={",
            "            name=${16:str},",
            "            version=${17:str},",
            "        },",
            "        roleArn=${17:str}, # Required",
            "        tags=[],",
            "        timeout=${19:int},",
            "        type=${20:str}, # Required",
            "        validationConfigurations=[],",
            ")"
        ],
        "description": [
            "Construct: databrew.CfnJob",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-databrew.CfnJob"
        ],
        "prefix": "l1-databrew-job",
        "scope": "python"
    },
    "databrew.CfnProject": {
        "body": [
            "databrew.CfnProject(self, \"${1:id}\", ",
            "        datasetName=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        recipeName=${4:str}, # Required",
            "        roleArn=${5:str}, # Required",
            "        sample={",
            "            size=${6:int},",
            "            type=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: databrew.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-databrew.CfnProject"
        ],
        "prefix": "l1-databrew-project",
        "scope": "python"
    },
    "databrew.CfnRecipe": {
        "body": [
            "databrew.CfnRecipe(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        steps=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: databrew.CfnRecipe",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-databrew.CfnRecipe"
        ],
        "prefix": "l1-databrew-recipe",
        "scope": "python"
    },
    "databrew.CfnRuleset": {
        "body": [
            "databrew.CfnRuleset(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        rules=[], # Required",
            "        tags=[],",
            "        targetArn=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: databrew.CfnRuleset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-databrew.CfnRuleset"
        ],
        "prefix": "l1-databrew-ruleset",
        "scope": "python"
    },
    "databrew.CfnSchedule": {
        "body": [
            "databrew.CfnSchedule(self, \"${1:id}\", ",
            "        cronExpression=${2:str}, # Required",
            "        jobNames=[],",
            "        name=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: databrew.CfnSchedule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-databrew.CfnSchedule"
        ],
        "prefix": "l1-databrew-schedule",
        "scope": "python"
    },
    "datapipeline.CfnPipeline": {
        "body": [
            "datapipeline.CfnPipeline(self, \"${1:id}\", ",
            "        activate=${2:bool},",
            "        description=${3:str},",
            "        name=${4:str}, # Required",
            "        parameterObjects=[],",
            "        parameterValues=[],",
            "        pipelineObjects=[],",
            "        pipelineTags=[],",
            ")"
        ],
        "description": [
            "Construct: datapipeline.CfnPipeline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datapipeline.CfnPipeline",
            "Attributes: ",
            "  attrPipelineId"
        ],
        "prefix": "l1-datapipeline-pipeline",
        "scope": "python"
    },
    "datasync.CfnAgent": {
        "body": [
            "datasync.CfnAgent(self, \"${1:id}\", ",
            "        activationKey=${2:str},",
            "        agentName=${3:str},",
            "        securityGroupArns=[],",
            "        subnetArns=[],",
            "        tags=[],",
            "        vpcEndpointId=${7:str},",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnAgent",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnAgent",
            "Attributes: ",
            "  attrAgentArn",
            "  attrEndpointType"
        ],
        "prefix": "l1-datasync-agent",
        "scope": "python"
    },
    "datasync.CfnLocationAzureBlob": {
        "body": [
            "datasync.CfnLocationAzureBlob(self, \"${1:id}\", ",
            "        agentArns=[], # Required",
            "        azureAccessTier=${3:str},",
            "        azureBlobAuthenticationType=${4:str}, # Required",
            "        azureBlobContainerUrl=${5:str},",
            "        azureBlobSasConfiguration={",
            "            azureBlobSasToken=${6:str},",
            "        },",
            "        azureBlobType=${7:str},",
            "        subdirectory=${8:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationAzureBlob",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationAzureBlob",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationazureblob",
        "scope": "python"
    },
    "datasync.CfnLocationEFS": {
        "body": [
            "datasync.CfnLocationEFS(self, \"${1:id}\", ",
            "        accessPointArn=${2:str},",
            "        ec2Config={",
            "            securityGroupArns=[],",
            "            subnetArn=${4:str},",
            "        },",
            "        efsFilesystemArn=${4:str},",
            "        fileSystemAccessRoleArn=${5:str},",
            "        inTransitEncryption=${6:str},",
            "        subdirectory=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationEFS",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationEFS",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationefs",
        "scope": "python"
    },
    "datasync.CfnLocationFSxLustre": {
        "body": [
            "datasync.CfnLocationFSxLustre(self, \"${1:id}\", ",
            "        fsxFilesystemArn=${2:str},",
            "        securityGroupArns=[], # Required",
            "        subdirectory=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationFSxLustre",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationFSxLustre",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationfsxlustre",
        "scope": "python"
    },
    "datasync.CfnLocationFSxONTAP": {
        "body": [
            "datasync.CfnLocationFSxONTAP(self, \"${1:id}\", ",
            "        protocol={",
            "        },",
            "        securityGroupArns=[], # Required",
            "        storageVirtualMachineArn=${4:str}, # Required",
            "        subdirectory=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationFSxONTAP",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationFSxONTAP",
            "Attributes: ",
            "  attrLocationUri",
            "  attrFsxFilesystemArn",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationfsxontap",
        "scope": "python"
    },
    "datasync.CfnLocationFSxOpenZFS": {
        "body": [
            "datasync.CfnLocationFSxOpenZFS(self, \"${1:id}\", ",
            "        fsxFilesystemArn=${2:str},",
            "        protocol={",
            "        },",
            "        securityGroupArns=[], # Required",
            "        subdirectory=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationFSxOpenZFS",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationFSxOpenZFS",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationfsxopenzfs",
        "scope": "python"
    },
    "datasync.CfnLocationFSxWindows": {
        "body": [
            "datasync.CfnLocationFSxWindows(self, \"${1:id}\", ",
            "        domain=${2:str},",
            "        fsxFilesystemArn=${3:str},",
            "        password=${4:str},",
            "        securityGroupArns=[], # Required",
            "        subdirectory=${6:str},",
            "        tags=[],",
            "        user=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationFSxWindows",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationFSxWindows",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationfsxwindows",
        "scope": "python"
    },
    "datasync.CfnLocationHDFS": {
        "body": [
            "datasync.CfnLocationHDFS(self, \"${1:id}\", ",
            "        agentArns=[], # Required",
            "        authenticationType=${3:str}, # Required",
            "        blockSize=${4:int},",
            "        kerberosKeytab=${5:str},",
            "        kerberosKrb5Conf=${6:str},",
            "        kerberosPrincipal=${7:str},",
            "        kmsKeyProviderUri=${8:str},",
            "        nameNodes=[], # Required",
            "        qopConfiguration={",
            "            dataTransferProtection=${10:str},",
            "            rpcProtection=${11:str},",
            "        },",
            "        replicationFactor=${11:int},",
            "        simpleUser=${12:str},",
            "        subdirectory=${13:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationHDFS",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationHDFS",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationhdfs",
        "scope": "python"
    },
    "datasync.CfnLocationNFS": {
        "body": [
            "datasync.CfnLocationNFS(self, \"${1:id}\", ",
            "        mountOptions={",
            "            version=${2:str},",
            "        },",
            "        onPremConfig={",
            "            agentArns=[],",
            "        },",
            "        serverHostname=${4:str},",
            "        subdirectory=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationNFS",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationNFS",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationnfs",
        "scope": "python"
    },
    "datasync.CfnLocationObjectStorage": {
        "body": [
            "datasync.CfnLocationObjectStorage(self, \"${1:id}\", ",
            "        accessKey=${2:str},",
            "        agentArns=[], # Required",
            "        bucketName=${4:str},",
            "        secretKey=${5:str},",
            "        serverCertificate=${6:str},",
            "        serverHostname=${7:str},",
            "        serverPort=${8:int},",
            "        serverProtocol=${9:str},",
            "        subdirectory=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationObjectStorage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationObjectStorage",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationobjectstorage",
        "scope": "python"
    },
    "datasync.CfnLocationS3": {
        "body": [
            "datasync.CfnLocationS3(self, \"${1:id}\", ",
            "        s3BucketArn=${2:str},",
            "        s3Config={",
            "            bucketAccessRoleArn=${3:str},",
            "        },",
            "        s3StorageClass=${4:str},",
            "        subdirectory=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationS3",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationS3",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locations3",
        "scope": "python"
    },
    "datasync.CfnLocationSMB": {
        "body": [
            "datasync.CfnLocationSMB(self, \"${1:id}\", ",
            "        agentArns=[], # Required",
            "        domain=${3:str},",
            "        mountOptions={",
            "            version=${4:str},",
            "        },",
            "        password=${5:str},",
            "        serverHostname=${6:str},",
            "        subdirectory=${7:str},",
            "        tags=[],",
            "        user=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnLocationSMB",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnLocationSMB",
            "Attributes: ",
            "  attrLocationUri",
            "  attrLocationArn"
        ],
        "prefix": "l1-datasync-locationsmb",
        "scope": "python"
    },
    "datasync.CfnStorageSystem": {
        "body": [
            "datasync.CfnStorageSystem(self, \"${1:id}\", ",
            "        agentArns=[], # Required",
            "        cloudWatchLogGroupArn=${3:str},",
            "        name=${4:str},",
            "        serverConfiguration={",
            "            serverHostname=${5:str},",
            "            serverPort=${6:int},",
            "        },",
            "        serverCredentials={",
            "            password=${6:str},",
            "            username=${7:str},",
            "        },",
            "        systemType=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnStorageSystem",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnStorageSystem",
            "Attributes: ",
            "  attrConnectivityStatus",
            "  attrStorageSystemArn",
            "  attrSecretsManagerArn"
        ],
        "prefix": "l1-datasync-storagesystem",
        "scope": "python"
    },
    "datasync.CfnTask": {
        "body": [
            "datasync.CfnTask(self, \"${1:id}\", ",
            "        cloudWatchLogGroupArn=${2:str},",
            "        destinationLocationArn=${3:str}, # Required",
            "        excludes=[],",
            "        includes=[],",
            "        manifestConfig={",
            "            action=${6:str},",
            "            format=${7:str},",
            "        },",
            "        name=${7:str},",
            "        options={",
            "            atime=${8:str},",
            "            bytesPerSecond=${9:int},",
            "            gid=${10:str},",
            "            logLevel=${11:str},",
            "            mtime=${12:str},",
            "            objectTags=${13:str},",
            "            overwriteMode=${14:str},",
            "            posixPermissions=${15:str},",
            "            preserveDeletedFiles=${16:str},",
            "            preserveDevices=${17:str},",
            "            securityDescriptorCopyFlags=${18:str},",
            "            taskQueueing=${19:str},",
            "            transferMode=${20:str},",
            "            uid=${21:str},",
            "            verifyMode=${22:str},",
            "        },",
            "        schedule={",
            "            scheduleExpression=${9:str},",
            "            status=${10:str},",
            "        },",
            "        sourceLocationArn=${10:str}, # Required",
            "        tags=[],",
            "        taskReportConfig={",
            "            objectVersionIds=${13:str},",
            "            outputType=${14:str},",
            "            reportLevel=${16:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: datasync.CfnTask",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datasync.CfnTask",
            "Attributes: ",
            "  attrStatus",
            "  attrSourceNetworkInterfaceArns",
            "  attrDestinationNetworkInterfaceArns",
            "  attrTaskArn"
        ],
        "prefix": "l1-datasync-task",
        "scope": "python"
    },
    "datazone.CfnDataSource": {
        "body": [
            "datazone.CfnDataSource(self, \"${1:id}\", ",
            "        assetFormsInput=[],",
            "        configuration={",
            "        },",
            "        description=${4:str},",
            "        domainIdentifier=${5:str}, # Required",
            "        enableSetting=${6:str},",
            "        environmentIdentifier=${7:str}, # Required",
            "        name=${8:str}, # Required",
            "        projectIdentifier=${9:str}, # Required",
            "        publishOnImport=${10:bool},",
            "        recommendation={",
            "            enableBusinessNameGeneration=${11:bool},",
            "        },",
            "        schedule={",
            "            schedule=${12:str},",
            "            timezone=${13:str},",
            "        },",
            "        type=${13:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnDataSource",
            "Attributes: ",
            "  attrStatus",
            "  attrEnvironmentId",
            "  attrDomainId",
            "  attrLastRunAssetCount",
            "  attrLastRunAt",
            "  attrCreatedAt",
            "  attrProjectId",
            "  attrLastRunStatus",
            "  attrId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-datazone-datasource",
        "scope": "python"
    },
    "datazone.CfnDomain": {
        "body": [
            "datazone.CfnDomain(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        domainExecutionRole=${3:str}, # Required",
            "        kmsKeyIdentifier=${4:str},",
            "        name=${5:str}, # Required",
            "        singleSignOn={",
            "            type=${6:str},",
            "            userAssignment=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnDomain",
            "Attributes: ",
            "  attrStatus",
            "  attrLastUpdatedAt",
            "  attrPortalUrl",
            "  attrCreatedAt",
            "  attrId",
            "  attrManagedAccountId",
            "  attrArn"
        ],
        "prefix": "l1-datazone-domain",
        "scope": "python"
    },
    "datazone.CfnEnvironment": {
        "body": [
            "datazone.CfnEnvironment(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        domainIdentifier=${3:str}, # Required",
            "        environmentProfileIdentifier=${4:str}, # Required",
            "        glossaryTerms=[],",
            "        name=${6:str}, # Required",
            "        projectIdentifier=${7:str}, # Required",
            "        userParameters=[],",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnEnvironment",
            "Attributes: ",
            "  attrStatus",
            "  attrCreatedBy",
            "  attrDomainId",
            "  attrEnvironmentProfileId",
            "  attrAwsAccountRegion",
            "  attrCreatedAt",
            "  attrProjectId",
            "  attrAwsAccountId",
            "  attrEnvironmentBlueprintId",
            "  attrId",
            "  attrUpdatedAt",
            "  attrProvider"
        ],
        "prefix": "l1-datazone-environment",
        "scope": "python"
    },
    "datazone.CfnEnvironmentBlueprintConfiguration": {
        "body": [
            "datazone.CfnEnvironmentBlueprintConfiguration(self, \"${1:id}\", ",
            "        domainIdentifier=${2:str}, # Required",
            "        enabledRegions=[], # Required",
            "        environmentBlueprintIdentifier=${4:str}, # Required",
            "        manageAccessRoleArn=${5:str},",
            "        provisioningRoleArn=${6:str},",
            "        regionalParameters=[],",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnEnvironmentBlueprintConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnEnvironmentBlueprintConfiguration",
            "Attributes: ",
            "  attrDomainId",
            "  attrCreatedAt",
            "  attrEnvironmentBlueprintId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-datazone-environmentblueprintconfiguration",
        "scope": "python"
    },
    "datazone.CfnEnvironmentProfile": {
        "body": [
            "datazone.CfnEnvironmentProfile(self, \"${1:id}\", ",
            "        awsAccountId=${2:str}, # Required",
            "        awsAccountRegion=${3:str}, # Required",
            "        description=${4:str},",
            "        domainIdentifier=${5:str}, # Required",
            "        environmentBlueprintIdentifier=${6:str}, # Required",
            "        name=${7:str}, # Required",
            "        projectIdentifier=${8:str}, # Required",
            "        userParameters=[],",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnEnvironmentProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnEnvironmentProfile",
            "Attributes: ",
            "  attrCreatedBy",
            "  attrDomainId",
            "  attrCreatedAt",
            "  attrProjectId",
            "  attrEnvironmentBlueprintId",
            "  attrId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-datazone-environmentprofile",
        "scope": "python"
    },
    "datazone.CfnGroupProfile": {
        "body": [
            "datazone.CfnGroupProfile(self, \"${1:id}\", ",
            "        domainIdentifier=${2:str}, # Required",
            "        groupIdentifier=${3:str}, # Required",
            "        status=${4:str},",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnGroupProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnGroupProfile",
            "Attributes: ",
            "  attrGroupName",
            "  attrDomainId",
            "  attrId"
        ],
        "prefix": "l1-datazone-groupprofile",
        "scope": "python"
    },
    "datazone.CfnProject": {
        "body": [
            "datazone.CfnProject(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        domainIdentifier=${3:str}, # Required",
            "        glossaryTerms=[],",
            "        name=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnProject",
            "Attributes: ",
            "  attrCreatedBy",
            "  attrDomainId",
            "  attrLastUpdatedAt",
            "  attrCreatedAt",
            "  attrId"
        ],
        "prefix": "l1-datazone-project",
        "scope": "python"
    },
    "datazone.CfnProjectMembership": {
        "body": [
            "datazone.CfnProjectMembership(self, \"${1:id}\", ",
            "        designation=${2:str}, # Required",
            "        domainIdentifier=${3:str}, # Required",
            "        member={",
            "            groupIdentifier=${4:str},",
            "            userIdentifier=${5:str},",
            "        },",
            "        projectIdentifier=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnProjectMembership",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnProjectMembership"
        ],
        "prefix": "l1-datazone-projectmembership",
        "scope": "python"
    },
    "datazone.CfnSubscriptionTarget": {
        "body": [
            "datazone.CfnSubscriptionTarget(self, \"${1:id}\", ",
            "        applicableAssetTypes=[], # Required",
            "        authorizedPrincipals=[], # Required",
            "        domainIdentifier=${4:str}, # Required",
            "        environmentIdentifier=${5:str}, # Required",
            "        manageAccessRole=${6:str}, # Required",
            "        name=${7:str}, # Required",
            "        provider=${8:str},",
            "        subscriptionTargetConfig=[], # Required",
            "        type=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnSubscriptionTarget",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnSubscriptionTarget",
            "Attributes: ",
            "  attrUpdatedBy",
            "  attrEnvironmentId",
            "  attrCreatedBy",
            "  attrDomainId",
            "  attrCreatedAt",
            "  attrProjectId",
            "  attrId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-datazone-subscriptiontarget",
        "scope": "python"
    },
    "datazone.CfnUserProfile": {
        "body": [
            "datazone.CfnUserProfile(self, \"${1:id}\", ",
            "        domainIdentifier=${2:str}, # Required",
            "        status=${3:str},",
            "        userIdentifier=${4:str}, # Required",
            "        userType=${5:str},",
            ")"
        ],
        "description": [
            "Construct: datazone.CfnUserProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-datazone.CfnUserProfile",
            "Attributes: ",
            "  attrType",
            "  attrDetails.Sso",
            "  attrDetails",
            "  attrDomainId",
            "  attrDetails.Sso.FirstName",
            "  attrDetails.Iam",
            "  attrDetails.Sso.Username",
            "  attrId",
            "  attrDetails.Sso.LastName",
            "  attrDetails.Iam.Arn"
        ],
        "prefix": "l1-datazone-userprofile",
        "scope": "python"
    },
    "dax.CfnCluster": {
        "body": [
            "dax.CfnCluster(self, \"${1:id}\", ",
            "        availabilityZones=[],",
            "        clusterEndpointEncryptionType=${3:str},",
            "        clusterName=${4:str},",
            "        description=${5:str},",
            "        iAMRoleARN=${6:str}, # Required",
            "        nodeType=${7:str}, # Required",
            "        notificationTopicARN=${8:str},",
            "        parameterGroupName=${9:str},",
            "        preferredMaintenanceWindow=${10:str},",
            "        replicationFactor=${11:int}, # Required",
            "        sSESpecification={",
            "            sSEEnabled=${12:bool},",
            "        },",
            "        securityGroupIds=[],",
            "        subnetGroupName=${14:str},",
            "        tags=${15:dict},",
            ")"
        ],
        "description": [
            "Construct: dax.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dax.CfnCluster",
            "Attributes: ",
            "  attrClusterDiscoveryEndpointURL",
            "  attrClusterDiscoveryEndpoint",
            "  attrArn"
        ],
        "prefix": "l1-dax-cluster",
        "scope": "python"
    },
    "dax.CfnParameterGroup": {
        "body": [
            "dax.CfnParameterGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        parameterGroupName=${3:str},",
            "        parameterNameValues=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: dax.CfnParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dax.CfnParameterGroup"
        ],
        "prefix": "l1-dax-parametergroup",
        "scope": "python"
    },
    "dax.CfnSubnetGroup": {
        "body": [
            "dax.CfnSubnetGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        subnetGroupName=${3:str},",
            "        subnetIds=[], # Required",
            ")"
        ],
        "description": [
            "Construct: dax.CfnSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dax.CfnSubnetGroup"
        ],
        "prefix": "l1-dax-subnetgroup",
        "scope": "python"
    },
    "deadline.CfnFarm": {
        "body": [
            "deadline.CfnFarm(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        displayName=${3:str}, # Required",
            "        kmsKeyArn=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnFarm",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnFarm",
            "Attributes: ",
            "  attrArn",
            "  attrFarmId"
        ],
        "prefix": "l1-deadline-farm",
        "scope": "python"
    },
    "deadline.CfnFleet": {
        "body": [
            "deadline.CfnFleet(self, \"${1:id}\", ",
            "        configuration={",
            "        },",
            "        description=${3:str},",
            "        displayName=${4:str}, # Required",
            "        farmId=${5:str},",
            "        maxWorkerCount=${6:int}, # Required",
            "        minWorkerCount=${7:int},",
            "        roleArn=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnFleet",
            "Attributes: ",
            "  attrStatus",
            "  attrCapabilities.Amounts",
            "  attrCapabilities.Attributes",
            "  attrCapabilities",
            "  attrFleetId",
            "  attrWorkerCount",
            "  attrArn"
        ],
        "prefix": "l1-deadline-fleet",
        "scope": "python"
    },
    "deadline.CfnLicenseEndpoint": {
        "body": [
            "deadline.CfnLicenseEndpoint(self, \"${1:id}\", ",
            "        securityGroupIds=[], # Required",
            "        subnetIds=[], # Required",
            "        tags=[],",
            "        vpcId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnLicenseEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnLicenseEndpoint",
            "Attributes: ",
            "  attrStatus",
            "  attrDnsName",
            "  attrLicenseEndpointId",
            "  attrArn",
            "  attrStatusMessage"
        ],
        "prefix": "l1-deadline-licenseendpoint",
        "scope": "python"
    },
    "deadline.CfnMeteredProduct": {
        "body": [
            "deadline.CfnMeteredProduct(self, \"${1:id}\", ",
            "        family=${2:str},",
            "        licenseEndpointId=${3:str},",
            "        port=${4:int},",
            "        productId=${5:str},",
            "        vendor=${6:str},",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnMeteredProduct",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnMeteredProduct",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-deadline-meteredproduct",
        "scope": "python"
    },
    "deadline.CfnMonitor": {
        "body": [
            "deadline.CfnMonitor(self, \"${1:id}\", ",
            "        displayName=${2:str}, # Required",
            "        identityCenterInstanceArn=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            "        subdomain=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnMonitor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnMonitor",
            "Attributes: ",
            "  attrIdentityCenterApplicationArn",
            "  attrArn",
            "  attrMonitorId",
            "  attrUrl"
        ],
        "prefix": "l1-deadline-monitor",
        "scope": "python"
    },
    "deadline.CfnQueue": {
        "body": [
            "deadline.CfnQueue(self, \"${1:id}\", ",
            "        allowedStorageProfileIds=[],",
            "        defaultBudgetAction=${3:str},",
            "        description=${4:str},",
            "        displayName=${5:str}, # Required",
            "        farmId=${6:str},",
            "        jobAttachmentSettings={",
            "            rootPrefix=${7:str},",
            "            s3BucketName=${8:str},",
            "        },",
            "        jobRunAsUser={",
            "            runAs=${9:str},",
            "        },",
            "        requiredFileSystemLocationNames=[],",
            "        roleArn=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnQueue",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnQueue",
            "Attributes: ",
            "  attrQueueId",
            "  attrArn"
        ],
        "prefix": "l1-deadline-queue",
        "scope": "python"
    },
    "deadline.CfnQueueEnvironment": {
        "body": [
            "deadline.CfnQueueEnvironment(self, \"${1:id}\", ",
            "        farmId=${2:str}, # Required",
            "        priority=${3:int}, # Required",
            "        queueId=${4:str}, # Required",
            "        template=${5:str}, # Required",
            "        templateType=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnQueueEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnQueueEnvironment",
            "Attributes: ",
            "  attrQueueEnvironmentId",
            "  attrName"
        ],
        "prefix": "l1-deadline-queueenvironment",
        "scope": "python"
    },
    "deadline.CfnQueueFleetAssociation": {
        "body": [
            "deadline.CfnQueueFleetAssociation(self, \"${1:id}\", ",
            "        farmId=${2:str}, # Required",
            "        fleetId=${3:str}, # Required",
            "        queueId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnQueueFleetAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnQueueFleetAssociation"
        ],
        "prefix": "l1-deadline-queuefleetassociation",
        "scope": "python"
    },
    "deadline.CfnStorageProfile": {
        "body": [
            "deadline.CfnStorageProfile(self, \"${1:id}\", ",
            "        displayName=${2:str}, # Required",
            "        farmId=${3:str},",
            "        fileSystemLocations=[],",
            "        osFamily=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: deadline.CfnStorageProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-deadline.CfnStorageProfile",
            "Attributes: ",
            "  attrStorageProfileId"
        ],
        "prefix": "l1-deadline-storageprofile",
        "scope": "python"
    },
    "detective.CfnGraph": {
        "body": [
            "detective.CfnGraph(self, \"${1:id}\", ",
            "        autoEnableMembers=${2:bool},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: detective.CfnGraph",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-detective.CfnGraph",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-detective-graph",
        "scope": "python"
    },
    "detective.CfnMemberInvitation": {
        "body": [
            "detective.CfnMemberInvitation(self, \"${1:id}\", ",
            "        disableEmailNotification=${2:bool},",
            "        graphArn=${3:str}, # Required",
            "        memberEmailAddress=${4:str}, # Required",
            "        memberId=${5:str}, # Required",
            "        message=${6:str},",
            ")"
        ],
        "description": [
            "Construct: detective.CfnMemberInvitation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-detective.CfnMemberInvitation"
        ],
        "prefix": "l1-detective-memberinvitation",
        "scope": "python"
    },
    "detective.CfnOrganizationAdmin": {
        "body": [
            "detective.CfnOrganizationAdmin(self, \"${1:id}\", ",
            "        accountId=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: detective.CfnOrganizationAdmin",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-detective.CfnOrganizationAdmin",
            "Attributes: ",
            "  attrGraphArn"
        ],
        "prefix": "l1-detective-organizationadmin",
        "scope": "python"
    },
    "devopsguru.CfnLogAnomalyDetectionIntegration": {
        "body": [
            ")"
        ],
        "description": [
            "Construct: devopsguru.CfnLogAnomalyDetectionIntegration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-devopsguru.CfnLogAnomalyDetectionIntegration",
            "Attributes: ",
            "  attrAccountId"
        ],
        "prefix": "l1-devopsguru-loganomalydetectionintegration",
        "scope": "python"
    },
    "devopsguru.CfnNotificationChannel": {
        "body": [
            "devopsguru.CfnNotificationChannel(self, \"${1:id}\", ",
            "        config={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: devopsguru.CfnNotificationChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-devopsguru.CfnNotificationChannel",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-devopsguru-notificationchannel",
        "scope": "python"
    },
    "devopsguru.CfnResourceCollection": {
        "body": [
            "devopsguru.CfnResourceCollection(self, \"${1:id}\", ",
            "        resourceCollectionFilter={",
            "            tags=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: devopsguru.CfnResourceCollection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-devopsguru.CfnResourceCollection",
            "Attributes: ",
            "  attrResourceCollectionType"
        ],
        "prefix": "l1-devopsguru-resourcecollection",
        "scope": "python"
    },
    "directoryservice.CfnMicrosoftAD": {
        "body": [
            "directoryservice.CfnMicrosoftAD(self, \"${1:id}\", ",
            "        createAlias=${2:bool},",
            "        edition=${3:str},",
            "        enableSso=${4:bool},",
            "        name=${5:str}, # Required",
            "        password=${6:str}, # Required",
            "        shortName=${7:str},",
            "        vpcSettings={",
            "            subnetIds=[],",
            "            vpcId=${9:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: directoryservice.CfnMicrosoftAD",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-directoryservice.CfnMicrosoftAD",
            "Attributes: ",
            "  attrAlias",
            "  attrDnsIpAddresses"
        ],
        "prefix": "l1-directoryservice-microsoftad",
        "scope": "python"
    },
    "directoryservice.CfnSimpleAD": {
        "body": [
            "directoryservice.CfnSimpleAD(self, \"${1:id}\", ",
            "        createAlias=${2:bool},",
            "        description=${3:str},",
            "        enableSso=${4:bool},",
            "        name=${5:str}, # Required",
            "        password=${6:str},",
            "        shortName=${7:str},",
            "        size=${8:str}, # Required",
            "        vpcSettings={",
            "            subnetIds=[],",
            "            vpcId=${10:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: directoryservice.CfnSimpleAD",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-directoryservice.CfnSimpleAD",
            "Attributes: ",
            "  attrDirectoryId",
            "  attrAlias",
            "  attrDnsIpAddresses"
        ],
        "prefix": "l1-directoryservice-simplead",
        "scope": "python"
    },
    "dlm.CfnLifecyclePolicy": {
        "body": [
            "dlm.CfnLifecyclePolicy(self, \"${1:id}\", ",
            "        copyTags=${2:bool},",
            "        createInterval=${3:int},",
            "        crossRegionCopyTargets={",
            "        },",
            "        defaultPolicy=${5:str},",
            "        description=${6:str},",
            "        exclusions={",
            "            excludeBootVolumes=${7:bool},",
            "        },",
            "        executionRoleArn=${8:str},",
            "        extendDeletion=${9:bool},",
            "        policyDetails={",
            "            actions=[],",
            "            copyTags=${11:bool},",
            "            createInterval=${12:int},",
            "            extendDeletion=${16:bool},",
            "            policyLanguage=${18:str},",
            "            policyType=${19:str},",
            "            resourceLocations=[],",
            "            resourceType=${21:str},",
            "            resourceTypes=[],",
            "            retainInterval=${23:int},",
            "            schedules=[],",
            "            targetTags=[],",
            "        },",
            "        retainInterval=${11:int},",
            "        state=${12:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: dlm.CfnLifecyclePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dlm.CfnLifecyclePolicy",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-dlm-lifecyclepolicy",
        "scope": "python"
    },
    "dms.CfnCertificate": {
        "body": [
            "dms.CfnCertificate(self, \"${1:id}\", ",
            "        certificateIdentifier=${2:str},",
            "        certificatePem=${3:str},",
            "        certificateWallet=${4:str},",
            ")"
        ],
        "description": [
            "Construct: dms.CfnCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnCertificate"
        ],
        "prefix": "l1-dms-certificate",
        "scope": "python"
    },
    "dms.CfnDataProvider": {
        "body": [
            "dms.CfnDataProvider(self, \"${1:id}\", ",
            "        dataProviderIdentifier=${2:str},",
            "        dataProviderName=${3:str},",
            "        description=${4:str},",
            "        engine=${5:str}, # Required",
            "        exactSettings=${6:bool},",
            "        settings={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: dms.CfnDataProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnDataProvider",
            "Attributes: ",
            "  attrDataProviderArn",
            "  attrDataProviderCreationTime"
        ],
        "prefix": "l1-dms-dataprovider",
        "scope": "python"
    },
    "dms.CfnEndpoint": {
        "body": [
            "dms.CfnEndpoint(self, \"${1:id}\", ",
            "        certificateArn=${2:str},",
            "        databaseName=${3:str},",
            "        docDbSettings={",
            "            docsToInvestigate=${4:int},",
            "            extractDocId=${5:bool},",
            "            nestingLevel=${6:str},",
            "            secretsManagerAccessRoleArn=${7:str},",
            "            secretsManagerSecretId=${8:str},",
            "        },",
            "        dynamoDbSettings={",
            "            serviceAccessRoleArn=${5:str},",
            "        },",
            "        elasticsearchSettings={",
            "            endpointUri=${6:str},",
            "            errorRetryDuration=${7:int},",
            "            fullLoadErrorPercentage=${8:int},",
            "            serviceAccessRoleArn=${9:str},",
            "        },",
            "        endpointIdentifier=${7:str},",
            "        endpointType=${8:str}, # Required",
            "        engineName=${9:str}, # Required",
            "        extraConnectionAttributes=${10:str},",
            "        gcpMySQLSettings={",
            "            afterConnectScript=${11:str},",
            "            cleanSourceMetadataOnMismatch=${12:bool},",
            "            databaseName=${13:str},",
            "            eventsPollInterval=${14:int},",
            "            maxFileSize=${15:int},",
            "            parallelLoadThreads=${16:int},",
            "            password=${17:str},",
            "            port=${18:int},",
            "            secretsManagerAccessRoleArn=${19:str},",
            "            secretsManagerSecretId=${20:str},",
            "            serverName=${21:str},",
            "            serverTimezone=${22:str},",
            "            username=${23:str},",
            "        },",
            "        ibmDb2Settings={",
            "            currentLsn=${12:str},",
            "            keepCsvFiles=${13:bool},",
            "            loadTimeout=${14:int},",
            "            maxFileSize=${15:int},",
            "            maxKBytesPerRead=${16:int},",
            "            secretsManagerAccessRoleArn=${17:str},",
            "            secretsManagerSecretId=${18:str},",
            "            setDataCaptureChanges=${19:bool},",
            "            writeBufferSize=${20:int},",
            "        },",
            "        kafkaSettings={",
            "            broker=${13:str},",
            "            includeControlDetails=${14:bool},",
            "            includeNullAndEmpty=${15:bool},",
            "            includePartitionValue=${16:bool},",
            "            includeTableAlterOperations=${17:bool},",
            "            includeTransactionDetails=${18:bool},",
            "            messageFormat=${19:str},",
            "            messageMaxBytes=${20:int},",
            "            noHexPrefix=${21:bool},",
            "            partitionIncludeSchemaTable=${22:bool},",
            "            saslPassword=${23:str},",
            "            saslUserName=${24:str},",
            "            securityProtocol=${25:str},",
            "            sslCaCertificateArn=${26:str},",
            "            sslClientCertificateArn=${27:str},",
            "            sslClientKeyArn=${28:str},",
            "            sslClientKeyPassword=${29:str},",
            "            topic=${30:str},",
            "        },",
            "        kinesisSettings={",
            "            includeControlDetails=${14:bool},",
            "            includeNullAndEmpty=${15:bool},",
            "            includePartitionValue=${16:bool},",
            "            includeTableAlterOperations=${17:bool},",
            "            includeTransactionDetails=${18:bool},",
            "            messageFormat=${19:str},",
            "            noHexPrefix=${20:bool},",
            "            partitionIncludeSchemaTable=${21:bool},",
            "            serviceAccessRoleArn=${22:str},",
            "            streamArn=${23:str},",
            "        },",
            "        kmsKeyId=${15:str},",
            "        microsoftSqlServerSettings={",
            "            bcpPacketSize=${16:int},",
            "            controlTablesFileGroup=${17:str},",
            "            databaseName=${18:str},",
            "            forceLobLookup=${19:bool},",
            "            password=${20:str},",
            "            port=${21:int},",
            "            querySingleAlwaysOnNode=${22:bool},",
            "            readBackupOnly=${23:bool},",
            "            safeguardPolicy=${24:str},",
            "            secretsManagerAccessRoleArn=${25:str},",
            "            secretsManagerSecretId=${26:str},",
            "            serverName=${27:str},",
            "            tlogAccessMode=${28:str},",
            "            trimSpaceInChar=${29:bool},",
            "            useBcpFullLoad=${30:bool},",
            "            useThirdPartyBackupDevice=${31:bool},",
            "            username=${32:str},",
            "        },",
            "        mongoDbSettings={",
            "            authMechanism=${17:str},",
            "            authSource=${18:str},",
            "            authType=${19:str},",
            "            databaseName=${20:str},",
            "            docsToInvestigate=${21:str},",
            "            extractDocId=${22:str},",
            "            nestingLevel=${23:str},",
            "            password=${24:str},",
            "            port=${25:int},",
            "            secretsManagerAccessRoleArn=${26:str},",
            "            secretsManagerSecretId=${27:str},",
            "            serverName=${28:str},",
            "            username=${29:str},",
            "        },",
            "        mySqlSettings={",
            "            afterConnectScript=${18:str},",
            "            cleanSourceMetadataOnMismatch=${19:bool},",
            "            eventsPollInterval=${20:int},",
            "            maxFileSize=${21:int},",
            "            parallelLoadThreads=${22:int},",
            "            secretsManagerAccessRoleArn=${23:str},",
            "            secretsManagerSecretId=${24:str},",
            "            serverTimezone=${25:str},",
            "            targetDbType=${26:str},",
            "        },",
            "        neptuneSettings={",
            "            errorRetryDuration=${19:int},",
            "            iamAuthEnabled=${20:bool},",
            "            maxFileSize=${21:int},",
            "            maxRetryCount=${22:int},",
            "            s3BucketFolder=${23:str},",
            "            s3BucketName=${24:str},",
            "            serviceAccessRoleArn=${25:str},",
            "        },",
            "        oracleSettings={",
            "            accessAlternateDirectly=${20:bool},",
            "            addSupplementalLogging=${21:bool},",
            "            additionalArchivedLogDestId=${22:int},",
            "            allowSelectNestedTables=${23:bool},",
            "            archivedLogDestId=${24:int},",
            "            archivedLogsOnly=${25:bool},",
            "            asmPassword=${26:str},",
            "            asmServer=${27:str},",
            "            asmUser=${28:str},",
            "            charLengthSemantics=${29:str},",
            "            directPathNoLog=${30:bool},",
            "            directPathParallelLoad=${31:bool},",
            "            enableHomogenousTablespace=${32:bool},",
            "            extraArchivedLogDestIds=[],",
            "            failTasksOnLobTruncation=${34:bool},",
            "            numberDatatypeScale=${35:int},",
            "            oraclePathPrefix=${36:str},",
            "            parallelAsmReadThreads=${37:int},",
            "            readAheadBlocks=${38:int},",
            "            readTableSpaceName=${39:bool},",
            "            replacePathPrefix=${40:bool},",
            "            retryInterval=${41:int},",
            "            secretsManagerAccessRoleArn=${42:str},",
            "            secretsManagerOracleAsmAccessRoleArn=${43:str},",
            "            secretsManagerOracleAsmSecretId=${44:str},",
            "            secretsManagerSecretId=${45:str},",
            "            securityDbEncryption=${46:str},",
            "            securityDbEncryptionName=${47:str},",
            "            spatialDataOptionToGeoJsonFunctionName=${48:str},",
            "            standbyDelayTime=${49:int},",
            "            useAlternateFolderForOnline=${50:bool},",
            "            useBFile=${51:bool},",
            "            useDirectPathFullLoad=${52:bool},",
            "            useLogminerReader=${53:bool},",
            "            usePathPrefix=${54:str},",
            "        },",
            "        password=${21:str},",
            "        port=${22:int},",
            "        postgreSqlSettings={",
            "            afterConnectScript=${23:str},",
            "            babelfishDatabaseName=${24:str},",
            "            captureDdls=${25:bool},",
            "            databaseMode=${26:str},",
            "            ddlArtifactsSchema=${27:str},",
            "            executeTimeout=${28:int},",
            "            failTasksOnLobTruncation=${29:bool},",
            "            heartbeatEnable=${30:bool},",
            "            heartbeatFrequency=${31:int},",
            "            heartbeatSchema=${32:str},",
            "            mapBooleanAsBoolean=${33:bool},",
            "            maxFileSize=${34:int},",
            "            pluginName=${35:str},",
            "            secretsManagerAccessRoleArn=${36:str},",
            "            secretsManagerSecretId=${37:str},",
            "            slotName=${38:str},",
            "        },",
            "        redisSettings={",
            "            authPassword=${24:str},",
            "            authType=${25:str},",
            "            authUserName=${26:str},",
            "            port=${27:float},",
            "            serverName=${28:str},",
            "            sslCaCertificateArn=${29:str},",
            "            sslSecurityProtocol=${30:str},",
            "        },",
            "        redshiftSettings={",
            "            acceptAnyDate=${25:bool},",
            "            afterConnectScript=${26:str},",
            "            bucketFolder=${27:str},",
            "            bucketName=${28:str},",
            "            caseSensitiveNames=${29:bool},",
            "            compUpdate=${30:bool},",
            "            connectionTimeout=${31:int},",
            "            dateFormat=${32:str},",
            "            emptyAsNull=${33:bool},",
            "            encryptionMode=${34:str},",
            "            explicitIds=${35:bool},",
            "            fileTransferUploadStreams=${36:int},",
            "            loadTimeout=${37:int},",
            "            mapBooleanAsBoolean=${38:bool},",
            "            maxFileSize=${39:int},",
            "            removeQuotes=${40:bool},",
            "            replaceChars=${41:str},",
            "            replaceInvalidChars=${42:str},",
            "            secretsManagerAccessRoleArn=${43:str},",
            "            secretsManagerSecretId=${44:str},",
            "            serverSideEncryptionKmsKeyId=${45:str},",
            "            serviceAccessRoleArn=${46:str},",
            "            timeFormat=${47:str},",
            "            trimBlanks=${48:bool},",
            "            truncateColumns=${49:bool},",
            "            writeBufferSize=${50:int},",
            "        },",
            "        resourceIdentifier=${26:str},",
            "        s3Settings={",
            "            addColumnName=${27:bool},",
            "            addTrailingPaddingCharacter=${28:bool},",
            "            bucketFolder=${29:str},",
            "            bucketName=${30:str},",
            "            cannedAclForObjects=${31:str},",
            "            cdcInsertsAndUpdates=${32:bool},",
            "            cdcInsertsOnly=${33:bool},",
            "            cdcMaxBatchInterval=${34:int},",
            "            cdcMinFileSize=${35:int},",
            "            cdcPath=${36:str},",
            "            compressionType=${37:str},",
            "            csvDelimiter=${38:str},",
            "            csvNoSupValue=${39:str},",
            "            csvNullValue=${40:str},",
            "            csvRowDelimiter=${41:str},",
            "            dataFormat=${42:str},",
            "            dataPageSize=${43:int},",
            "            datePartitionDelimiter=${44:str},",
            "            datePartitionEnabled=${45:bool},",
            "            datePartitionSequence=${46:str},",
            "            datePartitionTimezone=${47:str},",
            "            dictPageSizeLimit=${48:int},",
            "            enableStatistics=${49:bool},",
            "            encodingType=${50:str},",
            "            encryptionMode=${51:str},",
            "            expectedBucketOwner=${52:str},",
            "            externalTableDefinition=${53:str},",
            "            glueCatalogGeneration=${54:bool},",
            "            ignoreHeaderRows=${55:int},",
            "            includeOpForFullLoad=${56:bool},",
            "            maxFileSize=${57:int},",
            "            parquetTimestampInMillisecond=${58:bool},",
            "            parquetVersion=${59:str},",
            "            preserveTransactions=${60:bool},",
            "            rfc4180=${61:bool},",
            "            rowGroupLength=${62:int},",
            "            serverSideEncryptionKmsKeyId=${63:str},",
            "            serviceAccessRoleArn=${64:str},",
            "            timestampColumnName=${65:str},",
            "            useCsvNoSupValue=${66:bool},",
            "            useTaskStartTimeForFullLoadTimestamp=${67:bool},",
            "        },",
            "        serverName=${28:str},",
            "        sslMode=${29:str},",
            "        sybaseSettings={",
            "            secretsManagerAccessRoleArn=${30:str},",
            "            secretsManagerSecretId=${31:str},",
            "        },",
            "        tags=[],",
            "        username=${32:str},",
            ")"
        ],
        "description": [
            "Construct: dms.CfnEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnEndpoint",
            "Attributes: ",
            "  attrExternalId"
        ],
        "prefix": "l1-dms-endpoint",
        "scope": "python"
    },
    "dms.CfnEventSubscription": {
        "body": [
            "dms.CfnEventSubscription(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        eventCategories=[],",
            "        snsTopicArn=${4:str}, # Required",
            "        sourceIds=[],",
            "        sourceType=${6:str},",
            "        subscriptionName=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: dms.CfnEventSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnEventSubscription"
        ],
        "prefix": "l1-dms-eventsubscription",
        "scope": "python"
    },
    "dms.CfnInstanceProfile": {
        "body": [
            "dms.CfnInstanceProfile(self, \"${1:id}\", ",
            "        availabilityZone=${2:str},",
            "        description=${3:str},",
            "        instanceProfileIdentifier=${4:str},",
            "        instanceProfileName=${5:str},",
            "        kmsKeyArn=${6:str},",
            "        networkType=${7:str},",
            "        publiclyAccessible=${8:bool},",
            "        subnetGroupIdentifier=${9:str},",
            "        tags=[],",
            "        vpcSecurityGroups=[],",
            ")"
        ],
        "description": [
            "Construct: dms.CfnInstanceProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnInstanceProfile",
            "Attributes: ",
            "  attrInstanceProfileCreationTime",
            "  attrInstanceProfileArn"
        ],
        "prefix": "l1-dms-instanceprofile",
        "scope": "python"
    },
    "dms.CfnMigrationProject": {
        "body": [
            "dms.CfnMigrationProject(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        instanceProfileArn=${3:str},",
            "        instanceProfileIdentifier=${4:str},",
            "        instanceProfileName=${5:str},",
            "        migrationProjectIdentifier=${6:str},",
            "        migrationProjectName=${7:str},",
            "        schemaConversionApplicationAttributes={",
            "            s3BucketPath=${8:str},",
            "            s3BucketRoleArn=${9:str},",
            "        },",
            "        sourceDataProviderDescriptors=[],",
            "        tags=[],",
            "        targetDataProviderDescriptors=[],",
            "        transformationRules=${12:str},",
            ")"
        ],
        "description": [
            "Construct: dms.CfnMigrationProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnMigrationProject",
            "Attributes: ",
            "  attrMigrationProjectArn"
        ],
        "prefix": "l1-dms-migrationproject",
        "scope": "python"
    },
    "dms.CfnReplicationConfig": {
        "body": [
            "dms.CfnReplicationConfig(self, \"${1:id}\", ",
            "        computeConfig={",
            "            availabilityZone=${2:str},",
            "            dnsNameServers=${3:str},",
            "            kmsKeyId=${4:str},",
            "            maxCapacityUnits=${5:int},",
            "            minCapacityUnits=${6:int},",
            "            multiAZ=${7:bool},",
            "            preferredMaintenanceWindow=${8:str},",
            "            replicationSubnetGroupId=${9:str},",
            "            vpcSecurityGroupIds=[],",
            "        },",
            "        replicationConfigIdentifier=${3:str},",
            "        replicationSettings=${4:dict},",
            "        replicationType=${5:str},",
            "        resourceIdentifier=${6:str},",
            "        sourceEndpointArn=${7:str},",
            "        supplementalSettings=${8:dict},",
            "        tableMappings=${9:dict},",
            "        tags=[],",
            "        targetEndpointArn=${11:str},",
            ")"
        ],
        "description": [
            "Construct: dms.CfnReplicationConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnReplicationConfig",
            "Attributes: ",
            "  attrReplicationConfigArn"
        ],
        "prefix": "l1-dms-replicationconfig",
        "scope": "python"
    },
    "dms.CfnReplicationInstance": {
        "body": [
            "dms.CfnReplicationInstance(self, \"${1:id}\", ",
            "        allocatedStorage=${2:int},",
            "        allowMajorVersionUpgrade=${3:bool},",
            "        autoMinorVersionUpgrade=${4:bool},",
            "        availabilityZone=${5:str},",
            "        engineVersion=${6:str},",
            "        kmsKeyId=${7:str},",
            "        multiAZ=${8:bool},",
            "        preferredMaintenanceWindow=${9:str},",
            "        publiclyAccessible=${10:bool},",
            "        replicationInstanceClass=${11:str}, # Required",
            "        replicationInstanceIdentifier=${12:str},",
            "        replicationSubnetGroupIdentifier=${13:str},",
            "        resourceIdentifier=${14:str},",
            "        tags=[],",
            "        vpcSecurityGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: dms.CfnReplicationInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnReplicationInstance",
            "Attributes: ",
            "  attrReplicationInstancePublicIpAddresses",
            "  attrReplicationInstancePrivateIpAddresses"
        ],
        "prefix": "l1-dms-replicationinstance",
        "scope": "python"
    },
    "dms.CfnReplicationSubnetGroup": {
        "body": [
            "dms.CfnReplicationSubnetGroup(self, \"${1:id}\", ",
            "        replicationSubnetGroupDescription=${2:str}, # Required",
            "        replicationSubnetGroupIdentifier=${3:str},",
            "        subnetIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: dms.CfnReplicationSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnReplicationSubnetGroup"
        ],
        "prefix": "l1-dms-replicationsubnetgroup",
        "scope": "python"
    },
    "dms.CfnReplicationTask": {
        "body": [
            "dms.CfnReplicationTask(self, \"${1:id}\", ",
            "        cdcStartPosition=${2:str},",
            "        cdcStartTime=${3:float},",
            "        cdcStopPosition=${4:str},",
            "        migrationType=${5:str}, # Required",
            "        replicationInstanceArn=${6:str}, # Required",
            "        replicationTaskIdentifier=${7:str},",
            "        replicationTaskSettings=${8:str},",
            "        resourceIdentifier=${9:str},",
            "        sourceEndpointArn=${10:str}, # Required",
            "        tableMappings=${11:str}, # Required",
            "        tags=[],",
            "        targetEndpointArn=${13:str}, # Required",
            "        taskData=${14:str},",
            ")"
        ],
        "description": [
            "Construct: dms.CfnReplicationTask",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dms.CfnReplicationTask"
        ],
        "prefix": "l1-dms-replicationtask",
        "scope": "python"
    },
    "docdb.CfnDBCluster": {
        "body": [
            "docdb.CfnDBCluster(self, \"${1:id}\", ",
            "        availabilityZones=[],",
            "        backupRetentionPeriod=${3:int},",
            "        copyTagsToSnapshot=${4:bool},",
            "        dBClusterIdentifier=${5:str},",
            "        dBClusterParameterGroupName=${6:str},",
            "        dBSubnetGroupName=${7:str},",
            "        deletionProtection=${8:bool},",
            "        enableCloudwatchLogsExports=[],",
            "        engineVersion=${10:str},",
            "        kmsKeyId=${11:str},",
            "        masterUserPassword=${12:str},",
            "        masterUsername=${13:str},",
            "        port=${14:int},",
            "        preferredBackupWindow=${15:str},",
            "        preferredMaintenanceWindow=${16:str},",
            "        restoreToTime=${17:str},",
            "        restoreType=${18:str},",
            "        snapshotIdentifier=${19:str},",
            "        sourceDBClusterIdentifier=${20:str},",
            "        storageEncrypted=${21:bool},",
            "        storageType=${22:str},",
            "        tags=[],",
            "        useLatestRestorableTime=${24:bool},",
            "        vpcSecurityGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: docdb.CfnDBCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-docdb.CfnDBCluster",
            "Attributes: ",
            "  attrClusterResourceId",
            "  attrEndpoint",
            "  attrPort",
            "  attrReadEndpoint"
        ],
        "prefix": "l1-docdb-dbcluster",
        "scope": "python"
    },
    "docdb.CfnDBClusterParameterGroup": {
        "body": [
            "docdb.CfnDBClusterParameterGroup(self, \"${1:id}\", ",
            "        description=${2:str}, # Required",
            "        family=${3:str}, # Required",
            "        name=${4:str},",
            "        parameters=${5:dict}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: docdb.CfnDBClusterParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-docdb.CfnDBClusterParameterGroup"
        ],
        "prefix": "l1-docdb-dbclusterparametergroup",
        "scope": "python"
    },
    "docdb.CfnDBInstance": {
        "body": [
            "docdb.CfnDBInstance(self, \"${1:id}\", ",
            "        autoMinorVersionUpgrade=${2:bool},",
            "        availabilityZone=${3:str},",
            "        cACertificateIdentifier=${4:str},",
            "        certificateRotationRestart=${5:bool},",
            "        dBClusterIdentifier=${6:str}, # Required",
            "        dBInstanceClass=${7:str}, # Required",
            "        dBInstanceIdentifier=${8:str},",
            "        enablePerformanceInsights=${9:bool},",
            "        preferredMaintenanceWindow=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: docdb.CfnDBInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-docdb.CfnDBInstance",
            "Attributes: ",
            "  attrEndpoint",
            "  attrPort"
        ],
        "prefix": "l1-docdb-dbinstance",
        "scope": "python"
    },
    "docdb.CfnDBSubnetGroup": {
        "body": [
            "docdb.CfnDBSubnetGroup(self, \"${1:id}\", ",
            "        dBSubnetGroupDescription=${2:str}, # Required",
            "        dBSubnetGroupName=${3:str},",
            "        subnetIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: docdb.CfnDBSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-docdb.CfnDBSubnetGroup"
        ],
        "prefix": "l1-docdb-dbsubnetgroup",
        "scope": "python"
    },
    "docdb.CfnEventSubscription": {
        "body": [
            "docdb.CfnEventSubscription(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        eventCategories=[],",
            "        snsTopicArn=${4:str}, # Required",
            "        sourceIds=[],",
            "        sourceType=${6:str},",
            "        subscriptionName=${7:str},",
            ")"
        ],
        "description": [
            "Construct: docdb.CfnEventSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-docdb.CfnEventSubscription"
        ],
        "prefix": "l1-docdb-eventsubscription",
        "scope": "python"
    },
    "docdbelastic.CfnCluster": {
        "body": [
            "docdbelastic.CfnCluster(self, \"${1:id}\", ",
            "        adminUserName=${2:str}, # Required",
            "        adminUserPassword=${3:str},",
            "        authType=${4:str}, # Required",
            "        backupRetentionPeriod=${5:int},",
            "        clusterName=${6:str}, # Required",
            "        kmsKeyId=${7:str},",
            "        preferredBackupWindow=${8:str},",
            "        preferredMaintenanceWindow=${9:str},",
            "        shardCapacity=${10:int}, # Required",
            "        shardCount=${11:int}, # Required",
            "        shardInstanceCount=${12:int},",
            "        subnetIds=[],",
            "        tags=[],",
            "        vpcSecurityGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: docdbelastic.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-docdbelastic.CfnCluster",
            "Attributes: ",
            "  attrClusterArn",
            "  attrClusterEndpoint"
        ],
        "prefix": "l1-docdbelastic-cluster",
        "scope": "python"
    },
    "dynamodb.CfnGlobalTable": {
        "body": [
            "dynamodb.CfnGlobalTable(self, \"${1:id}\", ",
            "        attributeDefinitions=[], # Required",
            "        billingMode=${3:str},",
            "        globalSecondaryIndexes=[],",
            "        keySchema=[], # Required",
            "        localSecondaryIndexes=[],",
            "        replicas=[], # Required",
            "        sSESpecification={",
            "            sSEEnabled=${8:bool},",
            "            sSEType=${9:str},",
            "        },",
            "        streamSpecification={",
            "            streamViewType=${9:str},",
            "        },",
            "        tableName=${10:str},",
            "        timeToLiveSpecification={",
            "            attributeName=${11:str},",
            "            enabled=${12:bool},",
            "        },",
            "        writeOnDemandThroughputSettings={",
            "            maxWriteRequestUnits=${12:int},",
            "        },",
            "        writeProvisionedThroughputSettings={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: dynamodb.CfnGlobalTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dynamodb.CfnGlobalTable",
            "Attributes: ",
            "  attrTableId",
            "  attrArn",
            "  attrStreamArn"
        ],
        "prefix": "l1-dynamodb-globaltable",
        "scope": "python"
    },
    "dynamodb.CfnTable": {
        "body": [
            "dynamodb.CfnTable(self, \"${1:id}\", ",
            "        attributeDefinitions=[],",
            "        billingMode=${3:str},",
            "        contributorInsightsSpecification={",
            "            enabled=${4:bool},",
            "        },",
            "        deletionProtectionEnabled=${5:bool},",
            "        globalSecondaryIndexes=[],",
            "        importSourceSpecification={",
            "            inputCompressionType=${7:str},",
            "            inputFormat=${8:str},",
            "        },",
            "        keySchema=[], # Required",
            "        kinesisStreamSpecification={",
            "            approximateCreationDateTimePrecision=${9:str},",
            "            streamArn=${10:str},",
            "        },",
            "        localSecondaryIndexes=[],",
            "        onDemandThroughput={",
            "            maxReadRequestUnits=${11:int},",
            "            maxWriteRequestUnits=${12:int},",
            "        },",
            "        pointInTimeRecoverySpecification={",
            "            pointInTimeRecoveryEnabled=${12:bool},",
            "        },",
            "        provisionedThroughput={",
            "            readCapacityUnits=${13:int},",
            "            writeCapacityUnits=${14:int},",
            "        },",
            "        resourcePolicy={",
            "            policyDocument=${14:dict},",
            "        },",
            "        sSESpecification={",
            "            kMSMasterKeyId=${15:str},",
            "            sSEEnabled=${16:bool},",
            "            sSEType=${17:str},",
            "        },",
            "        streamSpecification={",
            "            streamViewType=${17:str},",
            "        },",
            "        tableClass=${17:str},",
            "        tableName=${18:str},",
            "        tags=[],",
            "        timeToLiveSpecification={",
            "            attributeName=${20:str},",
            "            enabled=${21:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: dynamodb.CfnTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-dynamodb.CfnTable",
            "Attributes: ",
            "  attrArn",
            "  attrStreamArn"
        ],
        "prefix": "l1-dynamodb-table",
        "scope": "python"
    },
    "ec2.CfnCapacityReservation": {
        "body": [
            "ec2.CfnCapacityReservation(self, \"${1:id}\", ",
            "        availabilityZone=${2:str}, # Required",
            "        ebsOptimized=${3:bool},",
            "        endDate=${4:str},",
            "        endDateType=${5:str},",
            "        ephemeralStorage=${6:bool},",
            "        instanceCount=${7:int}, # Required",
            "        instanceMatchCriteria=${8:str},",
            "        instancePlatform=${9:str}, # Required",
            "        instanceType=${10:str}, # Required",
            "        outPostArn=${11:str},",
            "        placementGroupArn=${12:str},",
            "        tagSpecifications=[],",
            "        tenancy=${14:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnCapacityReservation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnCapacityReservation",
            "Attributes: ",
            "  attrTenancy",
            "  attrAvailableInstanceCount",
            "  attrAvailabilityZone",
            "  attrTotalInstanceCount",
            "  attrId",
            "  attrInstanceType"
        ],
        "prefix": "l1-ec2-capacityreservation",
        "scope": "python"
    },
    "ec2.CfnCapacityReservationFleet": {
        "body": [
            "ec2.CfnCapacityReservationFleet(self, \"${1:id}\", ",
            "        allocationStrategy=${2:str},",
            "        endDate=${3:str},",
            "        instanceMatchCriteria=${4:str},",
            "        instanceTypeSpecifications=[],",
            "        noRemoveEndDate=${6:bool},",
            "        removeEndDate=${7:bool},",
            "        tagSpecifications=[],",
            "        tenancy=${9:str},",
            "        totalTargetCapacity=${10:int},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnCapacityReservationFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnCapacityReservationFleet",
            "Attributes: ",
            "  attrCapacityReservationFleetId"
        ],
        "prefix": "l1-ec2-capacityreservationfleet",
        "scope": "python"
    },
    "ec2.CfnCarrierGateway": {
        "body": [
            "ec2.CfnCarrierGateway(self, \"${1:id}\", ",
            "        tags=[],",
            "        vpcId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnCarrierGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnCarrierGateway",
            "Attributes: ",
            "  attrOwnerId",
            "  attrState",
            "  attrCarrierGatewayId"
        ],
        "prefix": "l1-ec2-carriergateway",
        "scope": "python"
    },
    "ec2.CfnClientVpnAuthorizationRule": {
        "body": [
            "ec2.CfnClientVpnAuthorizationRule(self, \"${1:id}\", ",
            "        accessGroupId=${2:str},",
            "        authorizeAllGroups=${3:bool},",
            "        clientVpnEndpointId=${4:str}, # Required",
            "        description=${5:str},",
            "        targetNetworkCidr=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnClientVpnAuthorizationRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnClientVpnAuthorizationRule"
        ],
        "prefix": "l1-ec2-clientvpnauthorizationrule",
        "scope": "python"
    },
    "ec2.CfnClientVpnEndpoint": {
        "body": [
            "ec2.CfnClientVpnEndpoint(self, \"${1:id}\", ",
            "        authenticationOptions=[], # Required",
            "        clientCidrBlock=${3:str}, # Required",
            "        clientConnectOptions={",
            "            enabled=${4:bool},",
            "            lambdaFunctionArn=${5:str},",
            "        },",
            "        clientLoginBannerOptions={",
            "            bannerText=${5:str},",
            "            enabled=${6:bool},",
            "        },",
            "        connectionLogOptions={",
            "            cloudwatchLogGroup=${6:str},",
            "            cloudwatchLogStream=${7:str},",
            "            enabled=${8:bool},",
            "        },",
            "        description=${7:str},",
            "        dnsServers=[],",
            "        securityGroupIds=[],",
            "        selfServicePortal=${10:str},",
            "        serverCertificateArn=${11:str}, # Required",
            "        sessionTimeoutHours=${12:int},",
            "        splitTunnel=${13:bool},",
            "        tagSpecifications=[],",
            "        transportProtocol=${15:str},",
            "        vpcId=${16:str},",
            "        vpnPort=${17:int},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnClientVpnEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnClientVpnEndpoint"
        ],
        "prefix": "l1-ec2-clientvpnendpoint",
        "scope": "python"
    },
    "ec2.CfnClientVpnRoute": {
        "body": [
            "ec2.CfnClientVpnRoute(self, \"${1:id}\", ",
            "        clientVpnEndpointId=${2:str}, # Required",
            "        description=${3:str},",
            "        destinationCidrBlock=${4:str}, # Required",
            "        targetVpcSubnetId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnClientVpnRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnClientVpnRoute"
        ],
        "prefix": "l1-ec2-clientvpnroute",
        "scope": "python"
    },
    "ec2.CfnClientVpnTargetNetworkAssociation": {
        "body": [
            "ec2.CfnClientVpnTargetNetworkAssociation(self, \"${1:id}\", ",
            "        clientVpnEndpointId=${2:str}, # Required",
            "        subnetId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnClientVpnTargetNetworkAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnClientVpnTargetNetworkAssociation"
        ],
        "prefix": "l1-ec2-clientvpntargetnetworkassociation",
        "scope": "python"
    },
    "ec2.CfnCustomerGateway": {
        "body": [
            "ec2.CfnCustomerGateway(self, \"${1:id}\", ",
            "        bgpAsn=${2:int},",
            "        bgpAsnExtended=${3:float},",
            "        certificateArn=${4:str},",
            "        deviceName=${5:str},",
            "        ipAddress=${6:str}, # Required",
            "        tags=[],",
            "        type=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnCustomerGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnCustomerGateway",
            "Attributes: ",
            "  attrCustomerGatewayId"
        ],
        "prefix": "l1-ec2-customergateway",
        "scope": "python"
    },
    "ec2.CfnDHCPOptions": {
        "body": [
            "ec2.CfnDHCPOptions(self, \"${1:id}\", ",
            "        domainName=${2:str},",
            "        domainNameServers=[],",
            "        ipv6AddressPreferredLeaseTime=${4:int},",
            "        netbiosNameServers=[],",
            "        netbiosNodeType=${6:int},",
            "        ntpServers=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnDHCPOptions",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnDHCPOptions",
            "Attributes: ",
            "  attrDhcpOptionsId"
        ],
        "prefix": "l1-ec2-dhcpoptions",
        "scope": "python"
    },
    "ec2.CfnEC2Fleet": {
        "body": [
            "ec2.CfnEC2Fleet(self, \"${1:id}\", ",
            "        context=${2:str},",
            "        excessCapacityTerminationPolicy=${3:str},",
            "        launchTemplateConfigs=[], # Required",
            "        onDemandOptions={",
            "            allocationStrategy=${5:str},",
            "            maxTotalPrice=${7:str},",
            "            minTargetCapacity=${8:int},",
            "            singleAvailabilityZone=${9:bool},",
            "            singleInstanceType=${10:bool},",
            "        },",
            "        replaceUnhealthyInstances=${6:bool},",
            "        spotOptions={",
            "            allocationStrategy=${7:str},",
            "            instanceInterruptionBehavior=${8:str},",
            "            instancePoolsToUseCount=${9:int},",
            "            maxTotalPrice=${11:str},",
            "            minTargetCapacity=${12:int},",
            "            singleAvailabilityZone=${13:bool},",
            "            singleInstanceType=${14:bool},",
            "        },",
            "        tagSpecifications=[],",
            "        targetCapacitySpecification={",
            "            defaultTargetCapacityType=${9:str},",
            "            onDemandTargetCapacity=${10:int},",
            "            spotTargetCapacity=${11:int},",
            "            targetCapacityUnitType=${12:str},",
            "            totalTargetCapacity=${13:int},",
            "        },",
            "        terminateInstancesWithExpiration=${10:bool},",
            "        type=${11:str},",
            "        validFrom=${12:str},",
            "        validUntil=${13:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnEC2Fleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnEC2Fleet",
            "Attributes: ",
            "  attrFleetId"
        ],
        "prefix": "l1-ec2-ec2fleet",
        "scope": "python"
    },
    "ec2.CfnEIP": {
        "body": [
            "ec2.CfnEIP(self, \"${1:id}\", ",
            "        domain=${2:str},",
            "        instanceId=${3:str},",
            "        networkBorderGroup=${4:str},",
            "        publicIpv4Pool=${5:str},",
            "        tags=[],",
            "        transferAddress=${7:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnEIP",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnEIP",
            "Attributes: ",
            "  attrPublicIp",
            "  attrAllocationId"
        ],
        "prefix": "l1-ec2-eip",
        "scope": "python"
    },
    "ec2.CfnEIPAssociation": {
        "body": [
            "ec2.CfnEIPAssociation(self, \"${1:id}\", ",
            "        allocationId=${2:str},",
            "        instanceId=${3:str},",
            "        networkInterfaceId=${4:str},",
            "        privateIpAddress=${5:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnEIPAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnEIPAssociation",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-eipassociation",
        "scope": "python"
    },
    "ec2.CfnEgressOnlyInternetGateway": {
        "body": [
            "ec2.CfnEgressOnlyInternetGateway(self, \"${1:id}\", ",
            "        vpcId=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnEgressOnlyInternetGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnEgressOnlyInternetGateway",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-egressonlyinternetgateway",
        "scope": "python"
    },
    "ec2.CfnEnclaveCertificateIamRoleAssociation": {
        "body": [
            "ec2.CfnEnclaveCertificateIamRoleAssociation(self, \"${1:id}\", ",
            "        certificateArn=${2:str}, # Required",
            "        roleArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnEnclaveCertificateIamRoleAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnEnclaveCertificateIamRoleAssociation",
            "Attributes: ",
            "  attrEncryptionKmsKeyId",
            "  attrCertificateS3BucketName",
            "  attrCertificateS3ObjectKey"
        ],
        "prefix": "l1-ec2-enclavecertificateiamroleassociation",
        "scope": "python"
    },
    "ec2.CfnFlowLog": {
        "body": [
            "ec2.CfnFlowLog(self, \"${1:id}\", ",
            "        deliverCrossAccountRole=${2:str},",
            "        deliverLogsPermissionArn=${3:str},",
            "        destinationOptions={",
            "            fileFormat=${4:str},",
            "            hiveCompatiblePartitions=${5:bool},",
            "            perHourPartition=${6:bool},",
            "        },",
            "        logDestination=${5:str},",
            "        logDestinationType=${6:str},",
            "        logFormat=${7:str},",
            "        logGroupName=${8:str},",
            "        maxAggregationInterval=${9:int},",
            "        resourceId=${10:str}, # Required",
            "        resourceType=${11:str}, # Required",
            "        tags=[],",
            "        trafficType=${13:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnFlowLog",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnFlowLog",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-flowlog",
        "scope": "python"
    },
    "ec2.CfnGatewayRouteTableAssociation": {
        "body": [
            "ec2.CfnGatewayRouteTableAssociation(self, \"${1:id}\", ",
            "        gatewayId=${2:str}, # Required",
            "        routeTableId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnGatewayRouteTableAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnGatewayRouteTableAssociation",
            "Attributes: ",
            "  attrAssociationId"
        ],
        "prefix": "l1-ec2-gatewayroutetableassociation",
        "scope": "python"
    },
    "ec2.CfnHost": {
        "body": [
            "ec2.CfnHost(self, \"${1:id}\", ",
            "        assetId=${2:str},",
            "        autoPlacement=${3:str},",
            "        availabilityZone=${4:str}, # Required",
            "        hostMaintenance=${5:str},",
            "        hostRecovery=${6:str},",
            "        instanceFamily=${7:str},",
            "        instanceType=${8:str},",
            "        outpostArn=${9:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnHost",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnHost",
            "Attributes: ",
            "  attrHostId"
        ],
        "prefix": "l1-ec2-host",
        "scope": "python"
    },
    "ec2.CfnIPAM": {
        "body": [
            "ec2.CfnIPAM(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        operatingRegions=[],",
            "        tags=[],",
            "        tier=${5:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnIPAM",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnIPAM",
            "Attributes: ",
            "  attrDefaultResourceDiscoveryAssociationId",
            "  attrDefaultResourceDiscoveryId",
            "  attrIpamId",
            "  attrResourceDiscoveryAssociationCount",
            "  attrScopeCount",
            "  attrArn",
            "  attrPrivateDefaultScopeId",
            "  attrPublicDefaultScopeId"
        ],
        "prefix": "l1-ec2-ipam",
        "scope": "python"
    },
    "ec2.CfnIPAMAllocation": {
        "body": [
            "ec2.CfnIPAMAllocation(self, \"${1:id}\", ",
            "        cidr=${2:str},",
            "        description=${3:str},",
            "        ipamPoolId=${4:str}, # Required",
            "        netmaskLength=${5:int},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnIPAMAllocation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnIPAMAllocation",
            "Attributes: ",
            "  attrIpamPoolAllocationId"
        ],
        "prefix": "l1-ec2-ipamallocation",
        "scope": "python"
    },
    "ec2.CfnIPAMPool": {
        "body": [
            "ec2.CfnIPAMPool(self, \"${1:id}\", ",
            "        addressFamily=${2:str}, # Required",
            "        allocationDefaultNetmaskLength=${3:int},",
            "        allocationMaxNetmaskLength=${4:int},",
            "        allocationMinNetmaskLength=${5:int},",
            "        allocationResourceTags=[],",
            "        autoImport=${7:bool},",
            "        awsService=${8:str},",
            "        description=${9:str},",
            "        ipamScopeId=${10:str}, # Required",
            "        locale=${11:str},",
            "        provisionedCidrs=[],",
            "        publicIpSource=${13:str},",
            "        publiclyAdvertisable=${14:bool},",
            "        sourceIpamPoolId=${15:str},",
            "        sourceResource={",
            "            resourceId=${16:str},",
            "            resourceOwner=${17:str},",
            "            resourceRegion=${18:str},",
            "            resourceType=${19:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnIPAMPool",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnIPAMPool",
            "Attributes: ",
            "  attrIpamPoolId",
            "  attrIpamArn",
            "  attrPoolDepth",
            "  attrState",
            "  attrIpamScopeArn",
            "  attrIpamScopeType",
            "  attrArn",
            "  attrStateMessage"
        ],
        "prefix": "l1-ec2-ipampool",
        "scope": "python"
    },
    "ec2.CfnIPAMPoolCidr": {
        "body": [
            "ec2.CfnIPAMPoolCidr(self, \"${1:id}\", ",
            "        cidr=${2:str},",
            "        ipamPoolId=${3:str}, # Required",
            "        netmaskLength=${4:int},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnIPAMPoolCidr",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnIPAMPoolCidr",
            "Attributes: ",
            "  attrIpamPoolCidrId",
            "  attrState"
        ],
        "prefix": "l1-ec2-ipampoolcidr",
        "scope": "python"
    },
    "ec2.CfnIPAMResourceDiscovery": {
        "body": [
            "ec2.CfnIPAMResourceDiscovery(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        operatingRegions=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnIPAMResourceDiscovery",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnIPAMResourceDiscovery",
            "Attributes: ",
            "  attrIsDefault",
            "  attrOwnerId",
            "  attrState",
            "  attrIpamResourceDiscoveryRegion",
            "  attrIpamResourceDiscoveryArn",
            "  attrIpamResourceDiscoveryId"
        ],
        "prefix": "l1-ec2-ipamresourcediscovery",
        "scope": "python"
    },
    "ec2.CfnIPAMResourceDiscoveryAssociation": {
        "body": [
            "ec2.CfnIPAMResourceDiscoveryAssociation(self, \"${1:id}\", ",
            "        ipamId=${2:str}, # Required",
            "        ipamResourceDiscoveryId=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnIPAMResourceDiscoveryAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnIPAMResourceDiscoveryAssociation",
            "Attributes: ",
            "  attrIsDefault",
            "  attrResourceDiscoveryStatus",
            "  attrOwnerId",
            "  attrIpamArn",
            "  attrIpamResourceDiscoveryAssociationId",
            "  attrIpamResourceDiscoveryAssociationArn",
            "  attrState",
            "  attrIpamRegion"
        ],
        "prefix": "l1-ec2-ipamresourcediscoveryassociation",
        "scope": "python"
    },
    "ec2.CfnIPAMScope": {
        "body": [
            "ec2.CfnIPAMScope(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        ipamId=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnIPAMScope",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnIPAMScope",
            "Attributes: ",
            "  attrIpamScopeId",
            "  attrIsDefault",
            "  attrIpamArn",
            "  attrIpamScopeType",
            "  attrPoolCount",
            "  attrArn"
        ],
        "prefix": "l1-ec2-ipamscope",
        "scope": "python"
    },
    "ec2.CfnInstance": {
        "body": [
            "ec2.CfnInstance(self, \"${1:id}\", ",
            "        additionalInfo=${2:str},",
            "        affinity=${3:str},",
            "        availabilityZone=${4:str},",
            "        blockDeviceMappings=[],",
            "        cpuOptions={",
            "            coreCount=${6:int},",
            "            threadsPerCore=${7:int},",
            "        },",
            "        creditSpecification={",
            "            cPUCredits=${7:str},",
            "        },",
            "        disableApiTermination=${8:bool},",
            "        ebsOptimized=${9:bool},",
            "        elasticGpuSpecifications=[],",
            "        elasticInferenceAccelerators=[],",
            "        enclaveOptions={",
            "            enabled=${12:bool},",
            "        },",
            "        hibernationOptions={",
            "            configured=${13:bool},",
            "        },",
            "        hostId=${14:str},",
            "        hostResourceGroupArn=${15:str},",
            "        iamInstanceProfile=${16:str},",
            "        imageId=${17:str},",
            "        instanceInitiatedShutdownBehavior=${18:str},",
            "        instanceType=${19:str},",
            "        ipv6AddressCount=${20:int},",
            "        ipv6Addresses=[],",
            "        kernelId=${22:str},",
            "        keyName=${23:str},",
            "        launchTemplate={",
            "            launchTemplateId=${24:str},",
            "            launchTemplateName=${25:str},",
            "            version=${26:str},",
            "        },",
            "        licenseSpecifications=[],",
            "        monitoring=${26:bool},",
            "        networkInterfaces=[],",
            "        placementGroupName=${28:str},",
            "        privateDnsNameOptions={",
            "            enableResourceNameDnsAAAARecord=${29:bool},",
            "            enableResourceNameDnsARecord=${30:bool},",
            "            hostnameType=${31:str},",
            "        },",
            "        privateIpAddress=${30:str},",
            "        propagateTagsToVolumeOnCreation=${31:bool},",
            "        ramdiskId=${32:str},",
            "        securityGroupIds=[],",
            "        securityGroups=[],",
            "        sourceDestCheck=${35:bool},",
            "        ssmAssociations=[],",
            "        subnetId=${37:str},",
            "        tags=[],",
            "        tenancy=${39:str},",
            "        userData=${40:str},",
            "        volumes=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnInstance",
            "Attributes: ",
            "  attrState.Code",
            "  attrPrivateDnsName",
            "  attrVpcId",
            "  attrPrivateIp",
            "  attrInstanceId",
            "  attrPublicIp",
            "  attrState.Name",
            "  attrState",
            "  attrAvailabilityZone",
            "  attrPublicDnsName"
        ],
        "prefix": "l1-ec2-instance",
        "scope": "python"
    },
    "ec2.CfnInstanceConnectEndpoint": {
        "body": [
            "ec2.CfnInstanceConnectEndpoint(self, \"${1:id}\", ",
            "        clientToken=${2:str},",
            "        preserveClientIp=${3:bool},",
            "        securityGroupIds=[],",
            "        subnetId=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnInstanceConnectEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnInstanceConnectEndpoint",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-instanceconnectendpoint",
        "scope": "python"
    },
    "ec2.CfnInternetGateway": {
        "body": [
            "ec2.CfnInternetGateway(self, \"${1:id}\", ",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnInternetGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnInternetGateway",
            "Attributes: ",
            "  attrInternetGatewayId"
        ],
        "prefix": "l1-ec2-internetgateway",
        "scope": "python"
    },
    "ec2.CfnKeyPair": {
        "body": [
            "ec2.CfnKeyPair(self, \"${1:id}\", ",
            "        keyFormat=${2:str},",
            "        keyName=${3:str}, # Required",
            "        keyType=${4:str},",
            "        publicKeyMaterial=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnKeyPair",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnKeyPair",
            "Attributes: ",
            "  attrKeyPairId",
            "  attrKeyFingerprint"
        ],
        "prefix": "l1-ec2-keypair",
        "scope": "python"
    },
    "ec2.CfnLaunchTemplate": {
        "body": [
            "ec2.CfnLaunchTemplate(self, \"${1:id}\", ",
            "        launchTemplateData={",
            "            blockDeviceMappings=[],",
            "            disableApiStop=${6:bool},",
            "            disableApiTermination=${7:bool},",
            "            ebsOptimized=${8:bool},",
            "            elasticGpuSpecifications=[],",
            "            elasticInferenceAccelerators=[],",
            "            imageId=${14:str},",
            "            instanceInitiatedShutdownBehavior=${15:str},",
            "            instanceType=${18:str},",
            "            kernelId=${19:str},",
            "            keyName=${20:str},",
            "            licenseSpecifications=[],",
            "            networkInterfaces=[],",
            "            ramDiskId=${28:str},",
            "            securityGroupIds=[],",
            "            securityGroups=[],",
            "            tagSpecifications=[],",
            "            userData=${32:str},",
            "        },",
            "        launchTemplateName=${3:str},",
            "        tagSpecifications=[],",
            "        versionDescription=${5:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnLaunchTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnLaunchTemplate",
            "Attributes: ",
            "  attrLatestVersionNumber",
            "  attrLaunchTemplateId",
            "  attrDefaultVersionNumber"
        ],
        "prefix": "l1-ec2-launchtemplate",
        "scope": "python"
    },
    "ec2.CfnLocalGatewayRoute": {
        "body": [
            "ec2.CfnLocalGatewayRoute(self, \"${1:id}\", ",
            "        destinationCidrBlock=${2:str}, # Required",
            "        localGatewayRouteTableId=${3:str}, # Required",
            "        localGatewayVirtualInterfaceGroupId=${4:str},",
            "        networkInterfaceId=${5:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnLocalGatewayRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnLocalGatewayRoute",
            "Attributes: ",
            "  attrType",
            "  attrState"
        ],
        "prefix": "l1-ec2-localgatewayroute",
        "scope": "python"
    },
    "ec2.CfnLocalGatewayRouteTable": {
        "body": [
            "ec2.CfnLocalGatewayRouteTable(self, \"${1:id}\", ",
            "        localGatewayId=${2:str}, # Required",
            "        mode=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnLocalGatewayRouteTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnLocalGatewayRouteTable",
            "Attributes: ",
            "  attrOwnerId",
            "  attrState",
            "  attrOutpostArn",
            "  attrLocalGatewayRouteTableId",
            "  attrLocalGatewayRouteTableArn"
        ],
        "prefix": "l1-ec2-localgatewayroutetable",
        "scope": "python"
    },
    "ec2.CfnLocalGatewayRouteTableVPCAssociation": {
        "body": [
            "ec2.CfnLocalGatewayRouteTableVPCAssociation(self, \"${1:id}\", ",
            "        localGatewayRouteTableId=${2:str}, # Required",
            "        tags=[],",
            "        vpcId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnLocalGatewayRouteTableVPCAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnLocalGatewayRouteTableVPCAssociation",
            "Attributes: ",
            "  attrLocalGatewayId",
            "  attrState",
            "  attrLocalGatewayRouteTableVpcAssociationId"
        ],
        "prefix": "l1-ec2-localgatewayroutetablevpcassociation",
        "scope": "python"
    },
    "ec2.CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation": {
        "body": [
            "ec2.CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation(self, \"${1:id}\", ",
            "        localGatewayRouteTableId=${2:str}, # Required",
            "        localGatewayVirtualInterfaceGroupId=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
            "Attributes: ",
            "  attrOwnerId",
            "  attrLocalGatewayId",
            "  attrState",
            "  attrLocalGatewayRouteTableVirtualInterfaceGroupAssociationId",
            "  attrLocalGatewayRouteTableArn"
        ],
        "prefix": "l1-ec2-localgatewayroutetablevirtualinterfacegroupassociation",
        "scope": "python"
    },
    "ec2.CfnNatGateway": {
        "body": [
            "ec2.CfnNatGateway(self, \"${1:id}\", ",
            "        allocationId=${2:str},",
            "        connectivityType=${3:str},",
            "        maxDrainDurationSeconds=${4:int},",
            "        privateIpAddress=${5:str},",
            "        secondaryAllocationIds=[],",
            "        secondaryPrivateIpAddressCount=${7:int},",
            "        secondaryPrivateIpAddresses=[],",
            "        subnetId=${9:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNatGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNatGateway",
            "Attributes: ",
            "  attrNatGatewayId"
        ],
        "prefix": "l1-ec2-natgateway",
        "scope": "python"
    },
    "ec2.CfnNetworkAcl": {
        "body": [
            "ec2.CfnNetworkAcl(self, \"${1:id}\", ",
            "        tags=[],",
            "        vpcId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkAcl",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkAcl",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-networkacl",
        "scope": "python"
    },
    "ec2.CfnNetworkAclEntry": {
        "body": [
            "ec2.CfnNetworkAclEntry(self, \"${1:id}\", ",
            "        cidrBlock=${2:str},",
            "        egress=${3:bool},",
            "        icmp={",
            "            code=${4:int},",
            "            type=${5:int},",
            "        },",
            "        ipv6CidrBlock=${5:str},",
            "        networkAclId=${6:str}, # Required",
            "        portRange={",
            "            from=${7:int},",
            "            to=${8:int},",
            "        },",
            "        protocol=${8:int}, # Required",
            "        ruleAction=${9:str}, # Required",
            "        ruleNumber=${10:int}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkAclEntry",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkAclEntry",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-networkaclentry",
        "scope": "python"
    },
    "ec2.CfnNetworkInsightsAccessScope": {
        "body": [
            "ec2.CfnNetworkInsightsAccessScope(self, \"${1:id}\", ",
            "        excludePaths=[],",
            "        matchPaths=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkInsightsAccessScope",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkInsightsAccessScope",
            "Attributes: ",
            "  attrUpdatedDate",
            "  attrCreatedDate",
            "  attrNetworkInsightsAccessScopeArn",
            "  attrNetworkInsightsAccessScopeId"
        ],
        "prefix": "l1-ec2-networkinsightsaccessscope",
        "scope": "python"
    },
    "ec2.CfnNetworkInsightsAccessScopeAnalysis": {
        "body": [
            "ec2.CfnNetworkInsightsAccessScopeAnalysis(self, \"${1:id}\", ",
            "        networkInsightsAccessScopeId=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkInsightsAccessScopeAnalysis",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkInsightsAccessScopeAnalysis",
            "Attributes: ",
            "  attrStatus",
            "  attrStartDate",
            "  attrNetworkInsightsAccessScopeAnalysisId",
            "  attrNetworkInsightsAccessScopeAnalysisArn",
            "  attrEndDate",
            "  attrAnalyzedEniCount",
            "  attrFindingsFound",
            "  attrStatusMessage"
        ],
        "prefix": "l1-ec2-networkinsightsaccessscopeanalysis",
        "scope": "python"
    },
    "ec2.CfnNetworkInsightsAnalysis": {
        "body": [
            "ec2.CfnNetworkInsightsAnalysis(self, \"${1:id}\", ",
            "        additionalAccounts=[],",
            "        filterInArns=[],",
            "        networkInsightsPathId=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkInsightsAnalysis",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkInsightsAnalysis",
            "Attributes: ",
            "  attrStatus",
            "  attrReturnPathComponents",
            "  attrStartDate",
            "  attrNetworkInsightsAnalysisId",
            "  attrAlternatePathHints",
            "  attrExplanations",
            "  attrNetworkPathFound",
            "  attrSuggestedAccounts",
            "  attrForwardPathComponents",
            "  attrNetworkInsightsAnalysisArn",
            "  attrStatusMessage"
        ],
        "prefix": "l1-ec2-networkinsightsanalysis",
        "scope": "python"
    },
    "ec2.CfnNetworkInsightsPath": {
        "body": [
            "ec2.CfnNetworkInsightsPath(self, \"${1:id}\", ",
            "        destination=${2:str},",
            "        destinationIp=${3:str},",
            "        destinationPort=${4:int},",
            "        filterAtDestination={",
            "            destinationAddress=${5:str},",
            "            sourceAddress=${7:str},",
            "        },",
            "        filterAtSource={",
            "            destinationAddress=${6:str},",
            "            sourceAddress=${8:str},",
            "        },",
            "        protocol=${7:str}, # Required",
            "        source=${8:str}, # Required",
            "        sourceIp=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkInsightsPath",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkInsightsPath",
            "Attributes: ",
            "  attrSourceArn",
            "  attrNetworkInsightsPathId",
            "  attrCreatedDate",
            "  attrNetworkInsightsPathArn",
            "  attrDestinationArn"
        ],
        "prefix": "l1-ec2-networkinsightspath",
        "scope": "python"
    },
    "ec2.CfnNetworkInterface": {
        "body": [
            "ec2.CfnNetworkInterface(self, \"${1:id}\", ",
            "        connectionTrackingSpecification={",
            "            tcpEstablishedTimeout=${2:int},",
            "            udpStreamTimeout=${3:int},",
            "            udpTimeout=${4:int},",
            "        },",
            "        description=${3:str},",
            "        groupSet=[],",
            "        interfaceType=${5:str},",
            "        ipv4PrefixCount=${6:int},",
            "        ipv4Prefixes=[],",
            "        ipv6AddressCount=${8:int},",
            "        ipv6Addresses=[],",
            "        ipv6PrefixCount=${10:int},",
            "        ipv6Prefixes=[],",
            "        privateIpAddress=${12:str},",
            "        privateIpAddresses=[],",
            "        secondaryPrivateIpAddressCount=${14:int},",
            "        sourceDestCheck=${15:bool},",
            "        subnetId=${16:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkInterface",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkInterface",
            "Attributes: ",
            "  attrPrimaryIpv6Address",
            "  attrSecondaryPrivateIpAddresses",
            "  attrVpcId",
            "  attrPrimaryPrivateIpAddress",
            "  attrId"
        ],
        "prefix": "l1-ec2-networkinterface",
        "scope": "python"
    },
    "ec2.CfnNetworkInterfaceAttachment": {
        "body": [
            "ec2.CfnNetworkInterfaceAttachment(self, \"${1:id}\", ",
            "        deleteOnTermination=${2:bool},",
            "        deviceIndex=${3:str}, # Required",
            "        enaSrdSpecification={",
            "            enaSrdEnabled=${4:bool},",
            "        },",
            "        instanceId=${5:str}, # Required",
            "        networkInterfaceId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkInterfaceAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkInterfaceAttachment",
            "Attributes: ",
            "  attrAttachmentId"
        ],
        "prefix": "l1-ec2-networkinterfaceattachment",
        "scope": "python"
    },
    "ec2.CfnNetworkInterfacePermission": {
        "body": [
            "ec2.CfnNetworkInterfacePermission(self, \"${1:id}\", ",
            "        awsAccountId=${2:str}, # Required",
            "        networkInterfaceId=${3:str}, # Required",
            "        permission=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkInterfacePermission",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkInterfacePermission"
        ],
        "prefix": "l1-ec2-networkinterfacepermission",
        "scope": "python"
    },
    "ec2.CfnNetworkPerformanceMetricSubscription": {
        "body": [
            "ec2.CfnNetworkPerformanceMetricSubscription(self, \"${1:id}\", ",
            "        destination=${2:str}, # Required",
            "        metric=${3:str}, # Required",
            "        source=${4:str}, # Required",
            "        statistic=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnNetworkPerformanceMetricSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnNetworkPerformanceMetricSubscription"
        ],
        "prefix": "l1-ec2-networkperformancemetricsubscription",
        "scope": "python"
    },
    "ec2.CfnPlacementGroup": {
        "body": [
            "ec2.CfnPlacementGroup(self, \"${1:id}\", ",
            "        partitionCount=${2:int},",
            "        spreadLevel=${3:str},",
            "        strategy=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnPlacementGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnPlacementGroup",
            "Attributes: ",
            "  attrGroupName"
        ],
        "prefix": "l1-ec2-placementgroup",
        "scope": "python"
    },
    "ec2.CfnPrefixList": {
        "body": [
            "ec2.CfnPrefixList(self, \"${1:id}\", ",
            "        addressFamily=${2:str}, # Required",
            "        entries=[],",
            "        maxEntries=${4:int},",
            "        prefixListName=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnPrefixList",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnPrefixList",
            "Attributes: ",
            "  attrOwnerId",
            "  attrPrefixListId",
            "  attrVersion",
            "  attrArn"
        ],
        "prefix": "l1-ec2-prefixlist",
        "scope": "python"
    },
    "ec2.CfnRoute": {
        "body": [
            "ec2.CfnRoute(self, \"${1:id}\", ",
            "        carrierGatewayId=${2:str},",
            "        coreNetworkArn=${3:str},",
            "        destinationCidrBlock=${4:str},",
            "        destinationIpv6CidrBlock=${5:str},",
            "        destinationPrefixListId=${6:str},",
            "        egressOnlyInternetGatewayId=${7:str},",
            "        gatewayId=${8:str},",
            "        instanceId=${9:str},",
            "        localGatewayId=${10:str},",
            "        natGatewayId=${11:str},",
            "        networkInterfaceId=${12:str},",
            "        routeTableId=${13:str}, # Required",
            "        transitGatewayId=${14:str},",
            "        vpcEndpointId=${15:str},",
            "        vpcPeeringConnectionId=${16:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnRoute",
            "Attributes: ",
            "  attrCidrBlock"
        ],
        "prefix": "l1-ec2-route",
        "scope": "python"
    },
    "ec2.CfnRouteTable": {
        "body": [
            "ec2.CfnRouteTable(self, \"${1:id}\", ",
            "        tags=[],",
            "        vpcId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnRouteTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnRouteTable",
            "Attributes: ",
            "  attrRouteTableId"
        ],
        "prefix": "l1-ec2-routetable",
        "scope": "python"
    },
    "ec2.CfnSecurityGroup": {
        "body": [
            "ec2.CfnSecurityGroup(self, \"${1:id}\", ",
            "        groupDescription=${2:str}, # Required",
            "        groupName=${3:str},",
            "        securityGroupEgress=[],",
            "        securityGroupIngress=[],",
            "        tags=[],",
            "        vpcId=${7:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSecurityGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSecurityGroup",
            "Attributes: ",
            "  attrVpcId",
            "  attrId",
            "  attrGroupId"
        ],
        "prefix": "l1-ec2-securitygroup",
        "scope": "python"
    },
    "ec2.CfnSecurityGroupEgress": {
        "body": [
            "ec2.CfnSecurityGroupEgress(self, \"${1:id}\", ",
            "        cidrIp=${2:str},",
            "        cidrIpv6=${3:str},",
            "        description=${4:str},",
            "        destinationPrefixListId=${5:str},",
            "        destinationSecurityGroupId=${6:str},",
            "        fromPort=${7:int},",
            "        groupId=${8:str}, # Required",
            "        ipProtocol=${9:str}, # Required",
            "        toPort=${10:int},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSecurityGroupEgress",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSecurityGroupEgress",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-securitygroupegress",
        "scope": "python"
    },
    "ec2.CfnSecurityGroupIngress": {
        "body": [
            "ec2.CfnSecurityGroupIngress(self, \"${1:id}\", ",
            "        cidrIp=${2:str},",
            "        cidrIpv6=${3:str},",
            "        description=${4:str},",
            "        fromPort=${5:int},",
            "        groupId=${6:str},",
            "        groupName=${7:str},",
            "        ipProtocol=${8:str}, # Required",
            "        sourcePrefixListId=${9:str},",
            "        sourceSecurityGroupId=${10:str},",
            "        sourceSecurityGroupName=${11:str},",
            "        sourceSecurityGroupOwnerId=${12:str},",
            "        toPort=${13:int},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSecurityGroupIngress",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSecurityGroupIngress",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-securitygroupingress",
        "scope": "python"
    },
    "ec2.CfnSnapshotBlockPublicAccess": {
        "body": [
            "ec2.CfnSnapshotBlockPublicAccess(self, \"${1:id}\", ",
            "        state=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSnapshotBlockPublicAccess",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSnapshotBlockPublicAccess",
            "Attributes: ",
            "  attrAccountId"
        ],
        "prefix": "l1-ec2-snapshotblockpublicaccess",
        "scope": "python"
    },
    "ec2.CfnSpotFleet": {
        "body": [
            "ec2.CfnSpotFleet(self, \"${1:id}\", ",
            "        spotFleetRequestConfigData={",
            "            allocationStrategy=${2:str},",
            "            context=${3:str},",
            "            excessCapacityTerminationPolicy=${4:str},",
            "            iamFleetRole=${5:str},",
            "            instanceInterruptionBehavior=${6:str},",
            "            instancePoolsToUseCount=${7:int},",
            "            launchSpecifications=[],",
            "            launchTemplateConfigs=[],",
            "            onDemandAllocationStrategy=${11:str},",
            "            onDemandMaxTotalPrice=${12:str},",
            "            onDemandTargetCapacity=${13:int},",
            "            replaceUnhealthyInstances=${14:bool},",
            "            spotMaxTotalPrice=${16:str},",
            "            spotPrice=${17:str},",
            "            tagSpecifications=[],",
            "            targetCapacity=${19:int},",
            "            targetCapacityUnitType=${20:str},",
            "            terminateInstancesWithExpiration=${21:bool},",
            "            type=${22:str},",
            "            validFrom=${23:str},",
            "            validUntil=${24:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSpotFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSpotFleet",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-spotfleet",
        "scope": "python"
    },
    "ec2.CfnSubnet": {
        "body": [
            "ec2.CfnSubnet(self, \"${1:id}\", ",
            "        assignIpv6AddressOnCreation=${2:bool},",
            "        availabilityZone=${3:str},",
            "        availabilityZoneId=${4:str},",
            "        cidrBlock=${5:str},",
            "        enableDns64=${6:bool},",
            "        enableLniAtDeviceIndex=${7:int},",
            "        ipv4IpamPoolId=${8:str},",
            "        ipv4NetmaskLength=${9:int},",
            "        ipv6CidrBlock=${10:str},",
            "        ipv6CidrBlocks=[],",
            "        ipv6IpamPoolId=${12:str},",
            "        ipv6Native=${13:bool},",
            "        ipv6NetmaskLength=${14:int},",
            "        mapPublicIpOnLaunch=${15:bool},",
            "        outpostArn=${16:str},",
            "        privateDnsNameOptionsOnLaunch={",
            "            enableResourceNameDnsAAAARecord=${17:bool},",
            "            enableResourceNameDnsARecord=${18:bool},",
            "            hostnameType=${19:str},",
            "        },",
            "        tags=[],",
            "        vpcId=${19:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSubnet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSubnet",
            "Attributes: ",
            "  attrVpcId",
            "  attrNetworkAclAssociationId",
            "  attrAvailabilityZoneId",
            "  attrOutpostArn",
            "  attrAvailabilityZone",
            "  attrCidrBlock",
            "  attrSubnetId"
        ],
        "prefix": "l1-ec2-subnet",
        "scope": "python"
    },
    "ec2.CfnSubnetCidrBlock": {
        "body": [
            "ec2.CfnSubnetCidrBlock(self, \"${1:id}\", ",
            "        ipv6CidrBlock=${2:str},",
            "        ipv6IpamPoolId=${3:str},",
            "        ipv6NetmaskLength=${4:int},",
            "        subnetId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSubnetCidrBlock",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSubnetCidrBlock",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-subnetcidrblock",
        "scope": "python"
    },
    "ec2.CfnSubnetNetworkAclAssociation": {
        "body": [
            "ec2.CfnSubnetNetworkAclAssociation(self, \"${1:id}\", ",
            "        networkAclId=${2:str}, # Required",
            "        subnetId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSubnetNetworkAclAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSubnetNetworkAclAssociation",
            "Attributes: ",
            "  attrAssociationId"
        ],
        "prefix": "l1-ec2-subnetnetworkaclassociation",
        "scope": "python"
    },
    "ec2.CfnSubnetRouteTableAssociation": {
        "body": [
            "ec2.CfnSubnetRouteTableAssociation(self, \"${1:id}\", ",
            "        routeTableId=${2:str}, # Required",
            "        subnetId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnSubnetRouteTableAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnSubnetRouteTableAssociation",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-subnetroutetableassociation",
        "scope": "python"
    },
    "ec2.CfnTrafficMirrorFilter": {
        "body": [
            "ec2.CfnTrafficMirrorFilter(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        networkServices=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTrafficMirrorFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTrafficMirrorFilter"
        ],
        "prefix": "l1-ec2-trafficmirrorfilter",
        "scope": "python"
    },
    "ec2.CfnTrafficMirrorFilterRule": {
        "body": [
            "ec2.CfnTrafficMirrorFilterRule(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        destinationCidrBlock=${3:str}, # Required",
            "        destinationPortRange={",
            "            fromPort=${4:int},",
            "            toPort=${5:int},",
            "        },",
            "        protocol=${5:int},",
            "        ruleAction=${6:str}, # Required",
            "        ruleNumber=${7:int}, # Required",
            "        sourceCidrBlock=${8:str}, # Required",
            "        sourcePortRange={",
            "            fromPort=${9:int},",
            "            toPort=${10:int},",
            "        },",
            "        trafficDirection=${10:str}, # Required",
            "        trafficMirrorFilterId=${11:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTrafficMirrorFilterRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTrafficMirrorFilterRule"
        ],
        "prefix": "l1-ec2-trafficmirrorfilterrule",
        "scope": "python"
    },
    "ec2.CfnTrafficMirrorSession": {
        "body": [
            "ec2.CfnTrafficMirrorSession(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        networkInterfaceId=${3:str}, # Required",
            "        packetLength=${4:int},",
            "        sessionNumber=${5:int}, # Required",
            "        tags=[],",
            "        trafficMirrorFilterId=${7:str}, # Required",
            "        trafficMirrorTargetId=${8:str}, # Required",
            "        virtualNetworkId=${9:int},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTrafficMirrorSession",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTrafficMirrorSession"
        ],
        "prefix": "l1-ec2-trafficmirrorsession",
        "scope": "python"
    },
    "ec2.CfnTrafficMirrorTarget": {
        "body": [
            "ec2.CfnTrafficMirrorTarget(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        gatewayLoadBalancerEndpointId=${3:str},",
            "        networkInterfaceId=${4:str},",
            "        networkLoadBalancerArn=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTrafficMirrorTarget",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTrafficMirrorTarget"
        ],
        "prefix": "l1-ec2-trafficmirrortarget",
        "scope": "python"
    },
    "ec2.CfnTransitGateway": {
        "body": [
            "ec2.CfnTransitGateway(self, \"${1:id}\", ",
            "        amazonSideAsn=${2:int},",
            "        associationDefaultRouteTableId=${3:str},",
            "        autoAcceptSharedAttachments=${4:str},",
            "        defaultRouteTableAssociation=${5:str},",
            "        defaultRouteTablePropagation=${6:str},",
            "        description=${7:str},",
            "        dnsSupport=${8:str},",
            "        multicastSupport=${9:str},",
            "        propagationDefaultRouteTableId=${10:str},",
            "        tags=[],",
            "        transitGatewayCidrBlocks=[],",
            "        vpnEcmpSupport=${13:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGateway",
            "Attributes: ",
            "  attrTransitGatewayArn",
            "  attrId"
        ],
        "prefix": "l1-ec2-transitgateway",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayAttachment": {
        "body": [
            "ec2.CfnTransitGatewayAttachment(self, \"${1:id}\", ",
            "        options={",
            "            applianceModeSupport=${2:str},",
            "            dnsSupport=${3:str},",
            "            ipv6Support=${4:str},",
            "            securityGroupReferencingSupport=${5:str},",
            "        },",
            "        subnetIds=[], # Required",
            "        tags=[],",
            "        transitGatewayId=${5:str}, # Required",
            "        vpcId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayAttachment",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-transitgatewayattachment",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayConnect": {
        "body": [
            "ec2.CfnTransitGatewayConnect(self, \"${1:id}\", ",
            "        options={",
            "            protocol=${2:str},",
            "        },",
            "        tags=[],",
            "        transportTransitGatewayAttachmentId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayConnect",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayConnect",
            "Attributes: ",
            "  attrTransitGatewayId",
            "  attrState",
            "  attrCreationTime",
            "  attrTransitGatewayAttachmentId"
        ],
        "prefix": "l1-ec2-transitgatewayconnect",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayMulticastDomain": {
        "body": [
            "ec2.CfnTransitGatewayMulticastDomain(self, \"${1:id}\", ",
            "        options={",
            "            autoAcceptSharedAssociations=${2:str},",
            "            igmpv2Support=${3:str},",
            "            staticSourcesSupport=${4:str},",
            "        },",
            "        tags=[],",
            "        transitGatewayId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayMulticastDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayMulticastDomain",
            "Attributes: ",
            "  attrTransitGatewayMulticastDomainArn",
            "  attrState",
            "  attrCreationTime",
            "  attrTransitGatewayMulticastDomainId"
        ],
        "prefix": "l1-ec2-transitgatewaymulticastdomain",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayMulticastDomainAssociation": {
        "body": [
            "ec2.CfnTransitGatewayMulticastDomainAssociation(self, \"${1:id}\", ",
            "        subnetId=${2:str}, # Required",
            "        transitGatewayAttachmentId=${3:str}, # Required",
            "        transitGatewayMulticastDomainId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayMulticastDomainAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayMulticastDomainAssociation",
            "Attributes: ",
            "  attrResourceId",
            "  attrState",
            "  attrResourceType"
        ],
        "prefix": "l1-ec2-transitgatewaymulticastdomainassociation",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayMulticastGroupMember": {
        "body": [
            "ec2.CfnTransitGatewayMulticastGroupMember(self, \"${1:id}\", ",
            "        groupIpAddress=${2:str}, # Required",
            "        networkInterfaceId=${3:str}, # Required",
            "        transitGatewayMulticastDomainId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayMulticastGroupMember",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayMulticastGroupMember",
            "Attributes: ",
            "  attrGroupMember",
            "  attrResourceId",
            "  attrMemberType",
            "  attrSourceType",
            "  attrResourceType",
            "  attrSubnetId",
            "  attrGroupSource",
            "  attrTransitGatewayAttachmentId"
        ],
        "prefix": "l1-ec2-transitgatewaymulticastgroupmember",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayMulticastGroupSource": {
        "body": [
            "ec2.CfnTransitGatewayMulticastGroupSource(self, \"${1:id}\", ",
            "        groupIpAddress=${2:str}, # Required",
            "        networkInterfaceId=${3:str}, # Required",
            "        transitGatewayMulticastDomainId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayMulticastGroupSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayMulticastGroupSource",
            "Attributes: ",
            "  attrGroupMember",
            "  attrResourceId",
            "  attrMemberType",
            "  attrSourceType",
            "  attrResourceType",
            "  attrSubnetId",
            "  attrGroupSource",
            "  attrTransitGatewayAttachmentId"
        ],
        "prefix": "l1-ec2-transitgatewaymulticastgroupsource",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayPeeringAttachment": {
        "body": [
            "ec2.CfnTransitGatewayPeeringAttachment(self, \"${1:id}\", ",
            "        peerAccountId=${2:str}, # Required",
            "        peerRegion=${3:str}, # Required",
            "        peerTransitGatewayId=${4:str}, # Required",
            "        tags=[],",
            "        transitGatewayId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayPeeringAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayPeeringAttachment",
            "Attributes: ",
            "  attrStatus",
            "  attrState",
            "  attrCreationTime",
            "  attrStatus.Message",
            "  attrStatus.Code",
            "  attrTransitGatewayAttachmentId"
        ],
        "prefix": "l1-ec2-transitgatewaypeeringattachment",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayRoute": {
        "body": [
            "ec2.CfnTransitGatewayRoute(self, \"${1:id}\", ",
            "        blackhole=${2:bool},",
            "        destinationCidrBlock=${3:str}, # Required",
            "        transitGatewayAttachmentId=${4:str},",
            "        transitGatewayRouteTableId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayRoute"
        ],
        "prefix": "l1-ec2-transitgatewayroute",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayRouteTable": {
        "body": [
            "ec2.CfnTransitGatewayRouteTable(self, \"${1:id}\", ",
            "        tags=[],",
            "        transitGatewayId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayRouteTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayRouteTable",
            "Attributes: ",
            "  attrTransitGatewayRouteTableId"
        ],
        "prefix": "l1-ec2-transitgatewayroutetable",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayRouteTableAssociation": {
        "body": [
            "ec2.CfnTransitGatewayRouteTableAssociation(self, \"${1:id}\", ",
            "        transitGatewayAttachmentId=${2:str}, # Required",
            "        transitGatewayRouteTableId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayRouteTableAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayRouteTableAssociation"
        ],
        "prefix": "l1-ec2-transitgatewayroutetableassociation",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayRouteTablePropagation": {
        "body": [
            "ec2.CfnTransitGatewayRouteTablePropagation(self, \"${1:id}\", ",
            "        transitGatewayAttachmentId=${2:str}, # Required",
            "        transitGatewayRouteTableId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayRouteTablePropagation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayRouteTablePropagation"
        ],
        "prefix": "l1-ec2-transitgatewayroutetablepropagation",
        "scope": "python"
    },
    "ec2.CfnTransitGatewayVpcAttachment": {
        "body": [
            "ec2.CfnTransitGatewayVpcAttachment(self, \"${1:id}\", ",
            "        addSubnetIds=[],",
            "        options={",
            "            applianceModeSupport=${3:str},",
            "            dnsSupport=${4:str},",
            "            ipv6Support=${5:str},",
            "        },",
            "        removeSubnetIds=[],",
            "        subnetIds=[], # Required",
            "        tags=[],",
            "        transitGatewayId=${7:str}, # Required",
            "        vpcId=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnTransitGatewayVpcAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnTransitGatewayVpcAttachment",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-transitgatewayvpcattachment",
        "scope": "python"
    },
    "ec2.CfnVPC": {
        "body": [
            "ec2.CfnVPC(self, \"${1:id}\", ",
            "        cidrBlock=${2:str},",
            "        enableDnsHostnames=${3:bool},",
            "        enableDnsSupport=${4:bool},",
            "        instanceTenancy=${5:str},",
            "        ipv4IpamPoolId=${6:str},",
            "        ipv4NetmaskLength=${7:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPC",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPC",
            "Attributes: ",
            "  attrVpcId",
            "  attrCidrBlockAssociations",
            "  attrCidrBlock",
            "  attrDefaultNetworkAcl",
            "  attrIpv6CidrBlocks",
            "  attrDefaultSecurityGroup"
        ],
        "prefix": "l1-ec2-vpc",
        "scope": "python"
    },
    "ec2.CfnVPCCidrBlock": {
        "body": [
            "ec2.CfnVPCCidrBlock(self, \"${1:id}\", ",
            "        amazonProvidedIpv6CidrBlock=${2:bool},",
            "        cidrBlock=${3:str},",
            "        ipv4IpamPoolId=${4:str},",
            "        ipv4NetmaskLength=${5:int},",
            "        ipv6CidrBlock=${6:str},",
            "        ipv6IpamPoolId=${7:str},",
            "        ipv6NetmaskLength=${8:int},",
            "        ipv6Pool=${9:str},",
            "        vpcId=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCCidrBlock",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCCidrBlock",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-vpccidrblock",
        "scope": "python"
    },
    "ec2.CfnVPCDHCPOptionsAssociation": {
        "body": [
            "ec2.CfnVPCDHCPOptionsAssociation(self, \"${1:id}\", ",
            "        dhcpOptionsId=${2:str}, # Required",
            "        vpcId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCDHCPOptionsAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCDHCPOptionsAssociation"
        ],
        "prefix": "l1-ec2-vpcdhcpoptionsassociation",
        "scope": "python"
    },
    "ec2.CfnVPCEndpoint": {
        "body": [
            "ec2.CfnVPCEndpoint(self, \"${1:id}\", ",
            "        policyDocument=${2:dict},",
            "        privateDnsEnabled=${3:bool},",
            "        routeTableIds=[],",
            "        securityGroupIds=[],",
            "        serviceName=${6:str}, # Required",
            "        subnetIds=[],",
            "        vpcEndpointType=${8:str},",
            "        vpcId=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCEndpoint",
            "Attributes: ",
            "  attrCreationTimestamp",
            "  attrNetworkInterfaceIds",
            "  attrId",
            "  attrDnsEntries"
        ],
        "prefix": "l1-ec2-vpcendpoint",
        "scope": "python"
    },
    "ec2.CfnVPCEndpointConnectionNotification": {
        "body": [
            "ec2.CfnVPCEndpointConnectionNotification(self, \"${1:id}\", ",
            "        connectionEvents=[], # Required",
            "        connectionNotificationArn=${3:str}, # Required",
            "        serviceId=${4:str},",
            "        vPCEndpointId=${5:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCEndpointConnectionNotification",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCEndpointConnectionNotification",
            "Attributes: ",
            "  attrVPCEndpointConnectionNotificationId"
        ],
        "prefix": "l1-ec2-vpcendpointconnectionnotification",
        "scope": "python"
    },
    "ec2.CfnVPCEndpointService": {
        "body": [
            "ec2.CfnVPCEndpointService(self, \"${1:id}\", ",
            "        acceptanceRequired=${2:bool},",
            "        contributorInsightsEnabled=${3:bool},",
            "        gatewayLoadBalancerArns=[],",
            "        networkLoadBalancerArns=[],",
            "        payerResponsibility=${6:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCEndpointService",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCEndpointService",
            "Attributes: ",
            "  attrServiceId"
        ],
        "prefix": "l1-ec2-vpcendpointservice",
        "scope": "python"
    },
    "ec2.CfnVPCEndpointServicePermissions": {
        "body": [
            "ec2.CfnVPCEndpointServicePermissions(self, \"${1:id}\", ",
            "        allowedPrincipals=[],",
            "        serviceId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCEndpointServicePermissions",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCEndpointServicePermissions"
        ],
        "prefix": "l1-ec2-vpcendpointservicepermissions",
        "scope": "python"
    },
    "ec2.CfnVPCGatewayAttachment": {
        "body": [
            "ec2.CfnVPCGatewayAttachment(self, \"${1:id}\", ",
            "        internetGatewayId=${2:str},",
            "        vpcId=${3:str}, # Required",
            "        vpnGatewayId=${4:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCGatewayAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCGatewayAttachment",
            "Attributes: ",
            "  attrAttachmentType"
        ],
        "prefix": "l1-ec2-vpcgatewayattachment",
        "scope": "python"
    },
    "ec2.CfnVPCPeeringConnection": {
        "body": [
            "ec2.CfnVPCPeeringConnection(self, \"${1:id}\", ",
            "        peerOwnerId=${2:str},",
            "        peerRegion=${3:str},",
            "        peerRoleArn=${4:str},",
            "        peerVpcId=${5:str}, # Required",
            "        tags=[],",
            "        vpcId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPCPeeringConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPCPeeringConnection",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ec2-vpcpeeringconnection",
        "scope": "python"
    },
    "ec2.CfnVPNConnection": {
        "body": [
            "ec2.CfnVPNConnection(self, \"${1:id}\", ",
            "        customerGatewayId=${2:str}, # Required",
            "        staticRoutesOnly=${3:bool},",
            "        tags=[],",
            "        transitGatewayId=${5:str},",
            "        type=${6:str}, # Required",
            "        vpnGatewayId=${7:str},",
            "        vpnTunnelOptionsSpecifications=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPNConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPNConnection",
            "Attributes: ",
            "  attrVpnConnectionId"
        ],
        "prefix": "l1-ec2-vpnconnection",
        "scope": "python"
    },
    "ec2.CfnVPNConnectionRoute": {
        "body": [
            "ec2.CfnVPNConnectionRoute(self, \"${1:id}\", ",
            "        destinationCidrBlock=${2:str}, # Required",
            "        vpnConnectionId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPNConnectionRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPNConnectionRoute"
        ],
        "prefix": "l1-ec2-vpnconnectionroute",
        "scope": "python"
    },
    "ec2.CfnVPNGateway": {
        "body": [
            "ec2.CfnVPNGateway(self, \"${1:id}\", ",
            "        amazonSideAsn=${2:int},",
            "        tags=[],",
            "        type=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPNGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPNGateway",
            "Attributes: ",
            "  attrVPNGatewayId"
        ],
        "prefix": "l1-ec2-vpngateway",
        "scope": "python"
    },
    "ec2.CfnVPNGatewayRoutePropagation": {
        "body": [
            "ec2.CfnVPNGatewayRoutePropagation(self, \"${1:id}\", ",
            "        routeTableIds=[], # Required",
            "        vpnGatewayId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVPNGatewayRoutePropagation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVPNGatewayRoutePropagation"
        ],
        "prefix": "l1-ec2-vpngatewayroutepropagation",
        "scope": "python"
    },
    "ec2.CfnVerifiedAccessEndpoint": {
        "body": [
            "ec2.CfnVerifiedAccessEndpoint(self, \"${1:id}\", ",
            "        applicationDomain=${2:str}, # Required",
            "        attachmentType=${3:str}, # Required",
            "        description=${4:str},",
            "        domainCertificateArn=${5:str}, # Required",
            "        endpointDomainPrefix=${6:str}, # Required",
            "        endpointType=${7:str}, # Required",
            "        loadBalancerOptions={",
            "            loadBalancerArn=${8:str},",
            "            port=${9:int},",
            "            protocol=${10:str},",
            "            subnetIds=[],",
            "        },",
            "        networkInterfaceOptions={",
            "            networkInterfaceId=${9:str},",
            "            port=${10:int},",
            "            protocol=${11:str},",
            "        },",
            "        policyDocument=${10:str},",
            "        policyEnabled=${11:bool},",
            "        securityGroupIds=[],",
            "        sseSpecification={",
            "            customerManagedKeyEnabled=${13:bool},",
            "            kmsKeyArn=${14:str},",
            "        },",
            "        tags=[],",
            "        verifiedAccessGroupId=${15:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVerifiedAccessEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVerifiedAccessEndpoint",
            "Attributes: ",
            "  attrStatus",
            "  attrEndpointDomain",
            "  attrCreationTime",
            "  attrLastUpdatedTime",
            "  attrDeviceValidationDomain",
            "  attrVerifiedAccessInstanceId",
            "  attrVerifiedAccessEndpointId"
        ],
        "prefix": "l1-ec2-verifiedaccessendpoint",
        "scope": "python"
    },
    "ec2.CfnVerifiedAccessGroup": {
        "body": [
            "ec2.CfnVerifiedAccessGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        policyDocument=${3:str},",
            "        policyEnabled=${4:bool},",
            "        sseSpecification={",
            "            customerManagedKeyEnabled=${5:bool},",
            "            kmsKeyArn=${6:str},",
            "        },",
            "        tags=[],",
            "        verifiedAccessInstanceId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVerifiedAccessGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVerifiedAccessGroup",
            "Attributes: ",
            "  attrOwner",
            "  attrCreationTime",
            "  attrLastUpdatedTime",
            "  attrVerifiedAccessGroupId",
            "  attrVerifiedAccessGroupArn"
        ],
        "prefix": "l1-ec2-verifiedaccessgroup",
        "scope": "python"
    },
    "ec2.CfnVerifiedAccessInstance": {
        "body": [
            "ec2.CfnVerifiedAccessInstance(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        fipsEnabled=${3:bool},",
            "        loggingConfigurations={",
            "            includeTrustContext=${5:bool},",
            "            logVersion=${7:str},",
            "        },",
            "        tags=[],",
            "        verifiedAccessTrustProviderIds=[],",
            "        verifiedAccessTrustProviders=[],",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVerifiedAccessInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVerifiedAccessInstance",
            "Attributes: ",
            "  attrCreationTime",
            "  attrLastUpdatedTime",
            "  attrVerifiedAccessInstanceId"
        ],
        "prefix": "l1-ec2-verifiedaccessinstance",
        "scope": "python"
    },
    "ec2.CfnVerifiedAccessTrustProvider": {
        "body": [
            "ec2.CfnVerifiedAccessTrustProvider(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        deviceOptions={",
            "            publicSigningKeyUrl=${3:str},",
            "            tenantId=${4:str},",
            "        },",
            "        deviceTrustProviderType=${4:str},",
            "        oidcOptions={",
            "            authorizationEndpoint=${5:str},",
            "            clientId=${6:str},",
            "            clientSecret=${7:str},",
            "            issuer=${8:str},",
            "            scope=${9:str},",
            "            tokenEndpoint=${10:str},",
            "            userInfoEndpoint=${11:str},",
            "        },",
            "        policyReferenceName=${6:str}, # Required",
            "        sseSpecification={",
            "            customerManagedKeyEnabled=${7:bool},",
            "            kmsKeyArn=${8:str},",
            "        },",
            "        tags=[],",
            "        trustProviderType=${9:str}, # Required",
            "        userTrustProviderType=${10:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVerifiedAccessTrustProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVerifiedAccessTrustProvider",
            "Attributes: ",
            "  attrVerifiedAccessTrustProviderId",
            "  attrCreationTime",
            "  attrLastUpdatedTime"
        ],
        "prefix": "l1-ec2-verifiedaccesstrustprovider",
        "scope": "python"
    },
    "ec2.CfnVolume": {
        "body": [
            "ec2.CfnVolume(self, \"${1:id}\", ",
            "        autoEnableIO=${2:bool},",
            "        availabilityZone=${3:str}, # Required",
            "        encrypted=${4:bool},",
            "        iops=${5:int},",
            "        kmsKeyId=${6:str},",
            "        multiAttachEnabled=${7:bool},",
            "        outpostArn=${8:str},",
            "        size=${9:int},",
            "        snapshotId=${10:str},",
            "        tags=[],",
            "        throughput=${12:int},",
            "        volumeType=${13:str},",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVolume",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVolume",
            "Attributes: ",
            "  attrVolumeId"
        ],
        "prefix": "l1-ec2-volume",
        "scope": "python"
    },
    "ec2.CfnVolumeAttachment": {
        "body": [
            "ec2.CfnVolumeAttachment(self, \"${1:id}\", ",
            "        device=${2:str},",
            "        instanceId=${3:str}, # Required",
            "        volumeId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ec2.CfnVolumeAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnVolumeAttachment"
        ],
        "prefix": "l1-ec2-volumeattachment",
        "scope": "python"
    },
    "ecr.CfnPublicRepository": {
        "body": [
            "ecr.CfnPublicRepository(self, \"${1:id}\", ",
            "        repositoryCatalogData={",
            "            aboutText=${2:str},",
            "            architectures=[],",
            "            operatingSystems=[],",
            "            repositoryDescription=${5:str},",
            "            usageText=${6:str},",
            "        },",
            "        repositoryName=${3:str},",
            "        repositoryPolicyText=${4:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ecr.CfnPublicRepository",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecr.CfnPublicRepository",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ecr-publicrepository",
        "scope": "python"
    },
    "ecr.CfnPullThroughCacheRule": {
        "body": [
            "ecr.CfnPullThroughCacheRule(self, \"${1:id}\", ",
            "        credentialArn=${2:str},",
            "        ecrRepositoryPrefix=${3:str},",
            "        upstreamRegistry=${4:str},",
            "        upstreamRegistryUrl=${5:str},",
            ")"
        ],
        "description": [
            "Construct: ecr.CfnPullThroughCacheRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecr.CfnPullThroughCacheRule"
        ],
        "prefix": "l1-ecr-pullthroughcacherule",
        "scope": "python"
    },
    "ecr.CfnRegistryPolicy": {
        "body": [
            "ecr.CfnRegistryPolicy(self, \"${1:id}\", ",
            "        policyText=${2:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: ecr.CfnRegistryPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecr.CfnRegistryPolicy",
            "Attributes: ",
            "  attrRegistryId"
        ],
        "prefix": "l1-ecr-registrypolicy",
        "scope": "python"
    },
    "ecr.CfnReplicationConfiguration": {
        "body": [
            "ecr.CfnReplicationConfiguration(self, \"${1:id}\", ",
            "        replicationConfiguration={",
            "            rules=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ecr.CfnReplicationConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecr.CfnReplicationConfiguration",
            "Attributes: ",
            "  attrRegistryId"
        ],
        "prefix": "l1-ecr-replicationconfiguration",
        "scope": "python"
    },
    "ecr.CfnRepository": {
        "body": [
            "ecr.CfnRepository(self, \"${1:id}\", ",
            "        emptyOnDelete=${2:bool},",
            "        encryptionConfiguration={",
            "            encryptionType=${3:str},",
            "            kmsKey=${4:str},",
            "        },",
            "        imageScanningConfiguration={",
            "            scanOnPush=${4:bool},",
            "        },",
            "        imageTagMutability=${5:str},",
            "        lifecyclePolicy={",
            "            lifecyclePolicyText=${6:str},",
            "            registryId=${7:str},",
            "        },",
            "        repositoryName=${7:str},",
            "        repositoryPolicyText=${8:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ecr.CfnRepository",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecr.CfnRepository",
            "Attributes: ",
            "  attrRepositoryUri",
            "  attrArn"
        ],
        "prefix": "l1-ecr-repository",
        "scope": "python"
    },
    "ecr.CfnRepositoryCreationTemplate": {
        "body": [
            "ecr.CfnRepositoryCreationTemplate(self, \"${1:id}\", ",
            "        appliedFor=[], # Required",
            "        description=${3:str},",
            "        encryptionConfiguration={",
            "            encryptionType=${4:str},",
            "            kmsKey=${5:str},",
            "        },",
            "        imageTagMutability=${5:str},",
            "        lifecyclePolicy=${6:str},",
            "        prefix=${7:str}, # Required",
            "        repositoryPolicy=${8:str},",
            "        resourceTags=[],",
            ")"
        ],
        "description": [
            "Construct: ecr.CfnRepositoryCreationTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecr.CfnRepositoryCreationTemplate",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-ecr-repositorycreationtemplate",
        "scope": "python"
    },
    "ecs.CfnCapacityProvider": {
        "body": [
            "ecs.CfnCapacityProvider(self, \"${1:id}\", ",
            "        autoScalingGroupProvider={",
            "            autoScalingGroupArn=${2:str},",
            "            managedDraining=${3:str},",
            "            managedTerminationProtection=${5:str},",
            "        },",
            "        name=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ecs.CfnCapacityProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.CfnCapacityProvider"
        ],
        "prefix": "l1-ecs-capacityprovider",
        "scope": "python"
    },
    "ecs.CfnCluster": {
        "body": [
            "ecs.CfnCluster(self, \"${1:id}\", ",
            "        capacityProviders=[],",
            "        clusterName=${3:str},",
            "        clusterSettings=[],",
            "        configuration={",
            "        },",
            "        defaultCapacityProviderStrategy=[],",
            "        serviceConnectDefaults={",
            "            namespace=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ecs.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.CfnCluster",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ecs-cluster",
        "scope": "python"
    },
    "ecs.CfnClusterCapacityProviderAssociations": {
        "body": [
            "ecs.CfnClusterCapacityProviderAssociations(self, \"${1:id}\", ",
            "        capacityProviders=[], # Required",
            "        cluster=${3:str}, # Required",
            "        defaultCapacityProviderStrategy=[], # Required",
            ")"
        ],
        "description": [
            "Construct: ecs.CfnClusterCapacityProviderAssociations",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.CfnClusterCapacityProviderAssociations"
        ],
        "prefix": "l1-ecs-clustercapacityproviderassociations",
        "scope": "python"
    },
    "ecs.CfnPrimaryTaskSet": {
        "body": [
            "ecs.CfnPrimaryTaskSet(self, \"${1:id}\", ",
            "        cluster=${2:str}, # Required",
            "        service=${3:str}, # Required",
            "        taskSetId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ecs.CfnPrimaryTaskSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.CfnPrimaryTaskSet"
        ],
        "prefix": "l1-ecs-primarytaskset",
        "scope": "python"
    },
    "ecs.CfnService": {
        "body": [
            "ecs.CfnService(self, \"${1:id}\", ",
            "        capacityProviderStrategy=[],",
            "        cluster=${3:str},",
            "        deploymentConfiguration={",
            "            maximumPercent=${6:int},",
            "            minimumHealthyPercent=${7:int},",
            "        },",
            "        deploymentController={",
            "            type=${5:str},",
            "        },",
            "        desiredCount=${6:int},",
            "        enableECSManagedTags=${7:bool},",
            "        enableExecuteCommand=${8:bool},",
            "        healthCheckGracePeriodSeconds=${9:int},",
            "        launchType=${10:str},",
            "        loadBalancers=[],",
            "        networkConfiguration={",
            "        },",
            "        placementConstraints=[],",
            "        placementStrategies=[],",
            "        platformVersion=${15:str},",
            "        propagateTags=${16:str},",
            "        role=${17:str},",
            "        schedulingStrategy=${18:str},",
            "        serviceConnectConfiguration={",
            "            enabled=${19:bool},",
            "            namespace=${21:str},",
            "            services=[],",
            "        },",
            "        serviceName=${20:str},",
            "        serviceRegistries=[],",
            "        tags=[],",
            "        taskDefinition=${23:str},",
            "        volumeConfigurations=[],",
            ")"
        ],
        "description": [
            "Construct: ecs.CfnService",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.CfnService",
            "Attributes: ",
            "  attrServiceArn",
            "  attrName"
        ],
        "prefix": "l1-ecs-service",
        "scope": "python"
    },
    "ecs.CfnTaskDefinition": {
        "body": [
            "ecs.CfnTaskDefinition(self, \"${1:id}\", ",
            "        containerDefinitions=[],",
            "        cpu=${3:str},",
            "        ephemeralStorage={",
            "            sizeInGiB=${4:int},",
            "        },",
            "        executionRoleArn=${5:str},",
            "        family=${6:str},",
            "        inferenceAccelerators=[],",
            "        ipcMode=${8:str},",
            "        memory=${9:str},",
            "        networkMode=${10:str},",
            "        pidMode=${11:str},",
            "        placementConstraints=[],",
            "        proxyConfiguration={",
            "            containerName=${13:str},",
            "            proxyConfigurationProperties=[],",
            "            type=${15:str},",
            "        },",
            "        requiresCompatibilities=[],",
            "        runtimePlatform={",
            "            cpuArchitecture=${15:str},",
            "            operatingSystemFamily=${16:str},",
            "        },",
            "        tags=[],",
            "        taskRoleArn=${17:str},",
            "        volumes=[],",
            ")"
        ],
        "description": [
            "Construct: ecs.CfnTaskDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.CfnTaskDefinition",
            "Attributes: ",
            "  attrTaskDefinitionArn"
        ],
        "prefix": "l1-ecs-taskdefinition",
        "scope": "python"
    },
    "ecs.CfnTaskSet": {
        "body": [
            "ecs.CfnTaskSet(self, \"${1:id}\", ",
            "        cluster=${2:str}, # Required",
            "        externalId=${3:str},",
            "        launchType=${4:str},",
            "        loadBalancers=[],",
            "        networkConfiguration={",
            "        },",
            "        platformVersion=${7:str},",
            "        scale={",
            "            unit=${8:str},",
            "            value=${9:float},",
            "        },",
            "        service=${9:str}, # Required",
            "        serviceRegistries=[],",
            "        tags=[],",
            "        taskDefinition=${12:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ecs.CfnTaskSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.CfnTaskSet",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ecs-taskset",
        "scope": "python"
    },
    "efs.CfnAccessPoint": {
        "body": [
            "efs.CfnAccessPoint(self, \"${1:id}\", ",
            "        accessPointTags=[],",
            "        clientToken=${3:str},",
            "        fileSystemId=${4:str}, # Required",
            "        posixUser={",
            "            gid=${5:str},",
            "            secondaryGids=[],",
            "            uid=${7:str},",
            "        },",
            "        rootDirectory={",
            "            path=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: efs.CfnAccessPoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-efs.CfnAccessPoint",
            "Attributes: ",
            "  attrAccessPointId",
            "  attrArn"
        ],
        "prefix": "l1-efs-accesspoint",
        "scope": "python"
    },
    "efs.CfnFileSystem": {
        "body": [
            "efs.CfnFileSystem(self, \"${1:id}\", ",
            "        availabilityZoneName=${2:str},",
            "        backupPolicy={",
            "            status=${3:str},",
            "        },",
            "        bypassPolicyLockoutSafetyCheck=${4:bool},",
            "        encrypted=${5:bool},",
            "        fileSystemPolicy=${6:dict},",
            "        fileSystemProtection={",
            "            replicationOverwriteProtection=${7:str},",
            "        },",
            "        fileSystemTags=[],",
            "        kmsKeyId=${9:str},",
            "        lifecyclePolicies=[],",
            "        performanceMode=${11:str},",
            "        provisionedThroughputInMibps=${12:float},",
            "        replicationConfiguration={",
            "            destinations=[],",
            "        },",
            "        throughputMode=${14:str},",
            ")"
        ],
        "description": [
            "Construct: efs.CfnFileSystem",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-efs.CfnFileSystem",
            "Attributes: ",
            "  attrFileSystemId",
            "  attrArn"
        ],
        "prefix": "l1-efs-filesystem",
        "scope": "python"
    },
    "efs.CfnMountTarget": {
        "body": [
            "efs.CfnMountTarget(self, \"${1:id}\", ",
            "        fileSystemId=${2:str}, # Required",
            "        ipAddress=${3:str},",
            "        securityGroups=[], # Required",
            "        subnetId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: efs.CfnMountTarget",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-efs.CfnMountTarget",
            "Attributes: ",
            "  attrIpAddress",
            "  attrId"
        ],
        "prefix": "l1-efs-mounttarget",
        "scope": "python"
    },
    "eks.CfnAccessEntry": {
        "body": [
            "eks.CfnAccessEntry(self, \"${1:id}\", ",
            "        accessPolicies=[],",
            "        clusterName=${3:str}, # Required",
            "        kubernetesGroups=[],",
            "        principalArn=${5:str}, # Required",
            "        tags=[],",
            "        type=${7:str},",
            "        username=${8:str},",
            ")"
        ],
        "description": [
            "Construct: eks.CfnAccessEntry",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eks.CfnAccessEntry",
            "Attributes: ",
            "  attrAccessEntryArn"
        ],
        "prefix": "l1-eks-accessentry",
        "scope": "python"
    },
    "eks.CfnAddon": {
        "body": [
            "eks.CfnAddon(self, \"${1:id}\", ",
            "        addonName=${2:str}, # Required",
            "        addonVersion=${3:str},",
            "        clusterName=${4:str}, # Required",
            "        configurationValues=${5:str},",
            "        podIdentityAssociations=[],",
            "        preserveOnDelete=${7:bool},",
            "        resolveConflicts=${8:str},",
            "        serviceAccountRoleArn=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: eks.CfnAddon",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eks.CfnAddon",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-eks-addon",
        "scope": "python"
    },
    "eks.CfnCluster": {
        "body": [
            "eks.CfnCluster(self, \"${1:id}\", ",
            "        accessConfig={",
            "            authenticationMode=${2:str},",
            "            bootstrapClusterCreatorAdminPermissions=${3:bool},",
            "        },",
            "        bootstrapSelfManagedAddons=${3:bool},",
            "        encryptionConfig=[],",
            "        kubernetesNetworkConfig={",
            "            ipFamily=${5:str},",
            "            serviceIpv4Cidr=${6:str},",
            "            serviceIpv6Cidr=${7:str},",
            "        },",
            "        logging={",
            "        },",
            "        name=${7:str},",
            "        outpostConfig={",
            "            controlPlaneInstanceType=${8:str},",
            "            outpostArns=[],",
            "        },",
            "        resourcesVpcConfig={",
            "            endpointPrivateAccess=${9:bool},",
            "            endpointPublicAccess=${10:bool},",
            "            publicAccessCidrs=[],",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            "        roleArn=${10:str}, # Required",
            "        tags=[],",
            "        version=${12:str},",
            ")"
        ],
        "description": [
            "Construct: eks.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eks.CfnCluster",
            "Attributes: ",
            "  attrEndpoint",
            "  attrClusterSecurityGroupId",
            "  attrEncryptionConfigKeyArn",
            "  attrId",
            "  attrCertificateAuthorityData",
            "  attrArn",
            "  attrKubernetesNetworkConfig.ServiceIpv6Cidr",
            "  attrOpenIdConnectIssuerUrl"
        ],
        "prefix": "l1-eks-cluster",
        "scope": "python"
    },
    "eks.CfnFargateProfile": {
        "body": [
            "eks.CfnFargateProfile(self, \"${1:id}\", ",
            "        clusterName=${2:str}, # Required",
            "        fargateProfileName=${3:str},",
            "        podExecutionRoleArn=${4:str}, # Required",
            "        selectors=[], # Required",
            "        subnets=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: eks.CfnFargateProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eks.CfnFargateProfile",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-eks-fargateprofile",
        "scope": "python"
    },
    "eks.CfnIdentityProviderConfig": {
        "body": [
            "eks.CfnIdentityProviderConfig(self, \"${1:id}\", ",
            "        clusterName=${2:str}, # Required",
            "        identityProviderConfigName=${3:str},",
            "        oidc={",
            "            clientId=${4:str},",
            "            groupsClaim=${5:str},",
            "            groupsPrefix=${6:str},",
            "            issuerUrl=${7:str},",
            "            requiredClaims=[],",
            "            usernameClaim=${9:str},",
            "            usernamePrefix=${10:str},",
            "        },",
            "        tags=[],",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: eks.CfnIdentityProviderConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eks.CfnIdentityProviderConfig",
            "Attributes: ",
            "  attrIdentityProviderConfigArn"
        ],
        "prefix": "l1-eks-identityproviderconfig",
        "scope": "python"
    },
    "eks.CfnNodegroup": {
        "body": [
            "eks.CfnNodegroup(self, \"${1:id}\", ",
            "        amiType=${2:str},",
            "        capacityType=${3:str},",
            "        clusterName=${4:str}, # Required",
            "        diskSize=${5:int},",
            "        forceUpdateEnabled=${6:bool},",
            "        instanceTypes=[],",
            "        labels={",
            "        },",
            "        launchTemplate={",
            "            id=${9:str},",
            "            name=${10:str},",
            "            version=${11:str},",
            "        },",
            "        nodeRole=${10:str}, # Required",
            "        nodegroupName=${11:str},",
            "        releaseVersion=${12:str},",
            "        remoteAccess={",
            "            ec2SshKey=${13:str},",
            "            sourceSecurityGroups=[],",
            "        },",
            "        scalingConfig={",
            "            desiredSize=${14:int},",
            "            maxSize=${15:int},",
            "            minSize=${16:int},",
            "        },",
            "        subnets=[], # Required",
            "        tags={",
            "        },",
            "        taints=[],",
            "        updateConfig={",
            "            maxUnavailable=${18:float},",
            "            maxUnavailablePercentage=${19:float},",
            "        },",
            "        version=${19:str},",
            ")"
        ],
        "description": [
            "Construct: eks.CfnNodegroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eks.CfnNodegroup",
            "Attributes: ",
            "  attrNodegroupName",
            "  attrClusterName",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-eks-nodegroup",
        "scope": "python"
    },
    "eks.CfnPodIdentityAssociation": {
        "body": [
            "eks.CfnPodIdentityAssociation(self, \"${1:id}\", ",
            "        clusterName=${2:str}, # Required",
            "        namespace=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            "        serviceAccount=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: eks.CfnPodIdentityAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eks.CfnPodIdentityAssociation",
            "Attributes: ",
            "  attrAssociationArn",
            "  attrAssociationId"
        ],
        "prefix": "l1-eks-podidentityassociation",
        "scope": "python"
    },
    "elasticache.CfnCacheCluster": {
        "body": [
            "elasticache.CfnCacheCluster(self, \"${1:id}\", ",
            "        aZMode=${2:str},",
            "        autoMinorVersionUpgrade=${3:bool},",
            "        cacheNodeType=${4:str}, # Required",
            "        cacheParameterGroupName=${5:str},",
            "        cacheSecurityGroupNames=[],",
            "        cacheSubnetGroupName=${7:str},",
            "        clusterName=${8:str},",
            "        engine=${9:str}, # Required",
            "        engineVersion=${10:str},",
            "        ipDiscovery=${11:str},",
            "        logDeliveryConfigurations=[],",
            "        networkType=${13:str},",
            "        notificationTopicArn=${14:str},",
            "        numCacheNodes=${15:int}, # Required",
            "        port=${16:int},",
            "        preferredAvailabilityZone=${17:str},",
            "        preferredAvailabilityZones=[],",
            "        preferredMaintenanceWindow=${19:str},",
            "        snapshotArns=[],",
            "        snapshotName=${21:str},",
            "        snapshotRetentionLimit=${22:int},",
            "        snapshotWindow=${23:str},",
            "        tags=[],",
            "        transitEncryptionEnabled=${25:bool},",
            "        vpcSecurityGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnCacheCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnCacheCluster",
            "Attributes: ",
            "  attrConfigurationEndpoint.Address",
            "  attrConfigurationEndpoint.Port",
            "  attrRedisEndpoint.Address",
            "  attrRedisEndpoint.Port"
        ],
        "prefix": "l1-elasticache-cachecluster",
        "scope": "python"
    },
    "elasticache.CfnGlobalReplicationGroup": {
        "body": [
            "elasticache.CfnGlobalReplicationGroup(self, \"${1:id}\", ",
            "        automaticFailoverEnabled=${2:bool},",
            "        cacheNodeType=${3:str},",
            "        cacheParameterGroupName=${4:str},",
            "        engineVersion=${5:str},",
            "        globalNodeGroupCount=${6:int},",
            "        globalReplicationGroupDescription=${7:str},",
            "        globalReplicationGroupIdSuffix=${8:str},",
            "        members=[], # Required",
            "        regionalConfigurations=[],",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnGlobalReplicationGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnGlobalReplicationGroup",
            "Attributes: ",
            "  attrStatus",
            "  attrGlobalReplicationGroupId"
        ],
        "prefix": "l1-elasticache-globalreplicationgroup",
        "scope": "python"
    },
    "elasticache.CfnParameterGroup": {
        "body": [
            "elasticache.CfnParameterGroup(self, \"${1:id}\", ",
            "        cacheParameterGroupFamily=${2:str}, # Required",
            "        description=${3:str}, # Required",
            "        properties={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnParameterGroup",
            "Attributes: ",
            "  attrCacheParameterGroupName"
        ],
        "prefix": "l1-elasticache-parametergroup",
        "scope": "python"
    },
    "elasticache.CfnReplicationGroup": {
        "body": [
            "elasticache.CfnReplicationGroup(self, \"${1:id}\", ",
            "        atRestEncryptionEnabled=${2:bool},",
            "        authToken=${3:str},",
            "        autoMinorVersionUpgrade=${4:bool},",
            "        automaticFailoverEnabled=${5:bool},",
            "        cacheNodeType=${6:str},",
            "        cacheParameterGroupName=${7:str},",
            "        cacheSecurityGroupNames=[],",
            "        cacheSubnetGroupName=${9:str},",
            "        clusterMode=${10:str},",
            "        dataTieringEnabled=${11:bool},",
            "        engine=${12:str},",
            "        engineVersion=${13:str},",
            "        globalReplicationGroupId=${14:str},",
            "        ipDiscovery=${15:str},",
            "        kmsKeyId=${16:str},",
            "        logDeliveryConfigurations=[],",
            "        multiAZEnabled=${18:bool},",
            "        networkType=${19:str},",
            "        nodeGroupConfiguration=[],",
            "        notificationTopicArn=${21:str},",
            "        numCacheClusters=${22:int},",
            "        numNodeGroups=${23:int},",
            "        port=${24:int},",
            "        preferredCacheClusterAZs=[],",
            "        preferredMaintenanceWindow=${26:str},",
            "        primaryClusterId=${27:str},",
            "        replicasPerNodeGroup=${28:int},",
            "        replicationGroupDescription=${29:str}, # Required",
            "        replicationGroupId=${30:str},",
            "        securityGroupIds=[],",
            "        snapshotArns=[],",
            "        snapshotName=${33:str},",
            "        snapshotRetentionLimit=${34:int},",
            "        snapshotWindow=${35:str},",
            "        snapshottingClusterId=${36:str},",
            "        tags=[],",
            "        transitEncryptionEnabled=${38:bool},",
            "        transitEncryptionMode=${39:str},",
            "        userGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnReplicationGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnReplicationGroup",
            "Attributes: ",
            "  attrConfigurationEndPoint.Address",
            "  attrConfigurationEndPoint.Port",
            "  attrPrimaryEndPoint.Address",
            "  attrPrimaryEndPoint.Port",
            "  attrReadEndPoint.Addresses",
            "  attrReadEndPoint.Addresses.List",
            "  attrReadEndPoint.Ports",
            "  attrReadEndPoint.Ports.List",
            "  attrReaderEndPoint.Address",
            "  attrReaderEndPoint.Port"
        ],
        "prefix": "l1-elasticache-replicationgroup",
        "scope": "python"
    },
    "elasticache.CfnSecurityGroup": {
        "body": [
            "elasticache.CfnSecurityGroup(self, \"${1:id}\", ",
            "        description=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnSecurityGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnSecurityGroup"
        ],
        "prefix": "l1-elasticache-securitygroup",
        "scope": "python"
    },
    "elasticache.CfnSecurityGroupIngress": {
        "body": [
            "elasticache.CfnSecurityGroupIngress(self, \"${1:id}\", ",
            "        cacheSecurityGroupName=${2:str}, # Required",
            "        eC2SecurityGroupName=${3:str}, # Required",
            "        eC2SecurityGroupOwnerId=${4:str},",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnSecurityGroupIngress",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnSecurityGroupIngress"
        ],
        "prefix": "l1-elasticache-securitygroupingress",
        "scope": "python"
    },
    "elasticache.CfnServerlessCache": {
        "body": [
            "elasticache.CfnServerlessCache(self, \"${1:id}\", ",
            "        cacheUsageLimits={",
            "        },",
            "        dailySnapshotTime=${3:str},",
            "        description=${4:str},",
            "        endpoint={",
            "            address=${5:str},",
            "            port=${6:str},",
            "        },",
            "        engine=${6:str}, # Required",
            "        finalSnapshotName=${7:str},",
            "        kmsKeyId=${8:str},",
            "        majorEngineVersion=${9:str},",
            "        readerEndpoint={",
            "            address=${10:str},",
            "            port=${11:str},",
            "        },",
            "        securityGroupIds=[],",
            "        serverlessCacheName=${12:str}, # Required",
            "        snapshotArnsToRestore=[],",
            "        snapshotRetentionLimit=${14:int},",
            "        subnetIds=[],",
            "        tags=[],",
            "        userGroupId=${17:str},",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnServerlessCache",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnServerlessCache",
            "Attributes: ",
            "  attrStatus",
            "  attrEndpoint.Address",
            "  attrFullEngineVersion",
            "  attrReaderEndpoint.Address",
            "  attrCreateTime",
            "  attrReaderEndpoint.Port",
            "  attrEndpoint.Port",
            "  attrARN"
        ],
        "prefix": "l1-elasticache-serverlesscache",
        "scope": "python"
    },
    "elasticache.CfnSubnetGroup": {
        "body": [
            "elasticache.CfnSubnetGroup(self, \"${1:id}\", ",
            "        cacheSubnetGroupName=${2:str},",
            "        description=${3:str}, # Required",
            "        subnetIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnSubnetGroup"
        ],
        "prefix": "l1-elasticache-subnetgroup",
        "scope": "python"
    },
    "elasticache.CfnUser": {
        "body": [
            "elasticache.CfnUser(self, \"${1:id}\", ",
            "        accessString=${2:str},",
            "        authenticationMode={",
            "            passwords=[],",
            "            type=${4:str},",
            "        },",
            "        engine=${4:str}, # Required",
            "        noPasswordRequired=${5:bool},",
            "        passwords=[],",
            "        tags=[],",
            "        userId=${8:str}, # Required",
            "        userName=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnUser",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnUser",
            "Attributes: ",
            "  attrStatus",
            "  attrArn"
        ],
        "prefix": "l1-elasticache-user",
        "scope": "python"
    },
    "elasticache.CfnUserGroup": {
        "body": [
            "elasticache.CfnUserGroup(self, \"${1:id}\", ",
            "        engine=${2:str}, # Required",
            "        tags=[],",
            "        userGroupId=${4:str}, # Required",
            "        userIds=[], # Required",
            ")"
        ],
        "description": [
            "Construct: elasticache.CfnUserGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticache.CfnUserGroup",
            "Attributes: ",
            "  attrStatus",
            "  attrArn"
        ],
        "prefix": "l1-elasticache-usergroup",
        "scope": "python"
    },
    "elasticbeanstalk.CfnApplication": {
        "body": [
            "elasticbeanstalk.CfnApplication(self, \"${1:id}\", ",
            "        applicationName=${2:str},",
            "        description=${3:str},",
            "        resourceLifecycleConfig={",
            "            serviceRole=${4:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: elasticbeanstalk.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticbeanstalk.CfnApplication"
        ],
        "prefix": "l1-elasticbeanstalk-application",
        "scope": "python"
    },
    "elasticbeanstalk.CfnApplicationVersion": {
        "body": [
            "elasticbeanstalk.CfnApplicationVersion(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        description=${3:str},",
            "        sourceBundle={",
            "            s3Bucket=${4:str},",
            "            s3Key=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: elasticbeanstalk.CfnApplicationVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticbeanstalk.CfnApplicationVersion",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-elasticbeanstalk-applicationversion",
        "scope": "python"
    },
    "elasticbeanstalk.CfnConfigurationTemplate": {
        "body": [
            "elasticbeanstalk.CfnConfigurationTemplate(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        description=${3:str},",
            "        environmentId=${4:str},",
            "        optionSettings=[],",
            "        platformArn=${6:str},",
            "        solutionStackName=${7:str},",
            "        sourceConfiguration={",
            "            applicationName=${8:str},",
            "            templateName=${9:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: elasticbeanstalk.CfnConfigurationTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticbeanstalk.CfnConfigurationTemplate",
            "Attributes: ",
            "  attrTemplateName"
        ],
        "prefix": "l1-elasticbeanstalk-configurationtemplate",
        "scope": "python"
    },
    "elasticbeanstalk.CfnEnvironment": {
        "body": [
            "elasticbeanstalk.CfnEnvironment(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        cNAMEPrefix=${3:str},",
            "        description=${4:str},",
            "        environmentName=${5:str},",
            "        operationsRole=${6:str},",
            "        optionSettings=[],",
            "        platformArn=${8:str},",
            "        solutionStackName=${9:str},",
            "        tags=[],",
            "        templateName=${11:str},",
            "        tier={",
            "            name=${12:str},",
            "            type=${13:str},",
            "            version=${14:str},",
            "        },",
            "        versionLabel=${13:str},",
            ")"
        ],
        "description": [
            "Construct: elasticbeanstalk.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticbeanstalk.CfnEnvironment",
            "Attributes: ",
            "  attrEndpointURL"
        ],
        "prefix": "l1-elasticbeanstalk-environment",
        "scope": "python"
    },
    "elasticloadbalancing.CfnLoadBalancer": {
        "body": [
            "elasticloadbalancing.CfnLoadBalancer(self, \"${1:id}\", ",
            "        accessLoggingPolicy={",
            "            emitInterval=${2:int},",
            "            enabled=${3:bool},",
            "            s3BucketName=${4:str},",
            "            s3BucketPrefix=${5:str},",
            "        },",
            "        appCookieStickinessPolicy=[],",
            "        availabilityZones=[],",
            "        connectionDrainingPolicy={",
            "            enabled=${5:bool},",
            "            timeout=${6:int},",
            "        },",
            "        connectionSettings={",
            "            idleTimeout=${6:int},",
            "        },",
            "        crossZone=${7:bool},",
            "        healthCheck={",
            "            healthyThreshold=${8:str},",
            "            interval=${9:str},",
            "            target=${10:str},",
            "            timeout=${11:str},",
            "            unhealthyThreshold=${12:str},",
            "        },",
            "        instances=[],",
            "        lBCookieStickinessPolicy=[],",
            "        listeners=[], # Required",
            "        loadBalancerName=${12:str},",
            "        policies=[],",
            "        scheme=${14:str},",
            "        securityGroups=[],",
            "        subnets=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancing.CfnLoadBalancer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancing.CfnLoadBalancer",
            "Attributes: ",
            "  attrCanonicalHostedZoneName",
            "  attrCanonicalHostedZoneNameID",
            "  attrDNSName",
            "  attrSourceSecurityGroup.GroupName",
            "  attrSourceSecurityGroup.OwnerAlias"
        ],
        "prefix": "l1-elasticloadbalancing-loadbalancer",
        "scope": "python"
    },
    "elasticloadbalancingv2.CfnListener": {
        "body": [
            "elasticloadbalancingv2.CfnListener(self, \"${1:id}\", ",
            "        alpnPolicy=[],",
            "        certificates=[],",
            "        defaultActions=[], # Required",
            "        loadBalancerArn=${5:str}, # Required",
            "        mutualAuthentication={",
            "            ignoreClientCertificateExpiry=${6:bool},",
            "            mode=${7:str},",
            "            trustStoreArn=${8:str},",
            "        },",
            "        port=${7:int},",
            "        protocol=${8:str},",
            "        sslPolicy=${9:str},",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancingv2.CfnListener",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancingv2.CfnListener",
            "Attributes: ",
            "  attrListenerArn"
        ],
        "prefix": "l1-elasticloadbalancingv2-listener",
        "scope": "python"
    },
    "elasticloadbalancingv2.CfnListenerCertificate": {
        "body": [
            "elasticloadbalancingv2.CfnListenerCertificate(self, \"${1:id}\", ",
            "        certificates=[], # Required",
            "        listenerArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancingv2.CfnListenerCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancingv2.CfnListenerCertificate"
        ],
        "prefix": "l1-elasticloadbalancingv2-listenercertificate",
        "scope": "python"
    },
    "elasticloadbalancingv2.CfnListenerRule": {
        "body": [
            "elasticloadbalancingv2.CfnListenerRule(self, \"${1:id}\", ",
            "        actions=[], # Required",
            "        conditions=[], # Required",
            "        listenerArn=${4:str},",
            "        priority=${5:int}, # Required",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancingv2.CfnListenerRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancingv2.CfnListenerRule",
            "Attributes: ",
            "  attrIsDefault",
            "  attrRuleArn"
        ],
        "prefix": "l1-elasticloadbalancingv2-listenerrule",
        "scope": "python"
    },
    "elasticloadbalancingv2.CfnLoadBalancer": {
        "body": [
            "elasticloadbalancingv2.CfnLoadBalancer(self, \"${1:id}\", ",
            "        enforceSecurityGroupInboundRulesOnPrivateLinkTraffic=${2:str},",
            "        ipAddressType=${3:str},",
            "        loadBalancerAttributes=[],",
            "        name=${5:str},",
            "        scheme=${6:str},",
            "        securityGroups=[],",
            "        subnetMappings=[],",
            "        subnets=[],",
            "        tags=[],",
            "        type=${11:str},",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancingv2.CfnLoadBalancer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancingv2.CfnLoadBalancer",
            "Attributes: ",
            "  attrSecurityGroups",
            "  attrLoadBalancerName",
            "  attrCanonicalHostedZoneID",
            "  attrLoadBalancerArn",
            "  attrDNSName",
            "  attrLoadBalancerFullName"
        ],
        "prefix": "l1-elasticloadbalancingv2-loadbalancer",
        "scope": "python"
    },
    "elasticloadbalancingv2.CfnTargetGroup": {
        "body": [
            "elasticloadbalancingv2.CfnTargetGroup(self, \"${1:id}\", ",
            "        healthCheckEnabled=${2:bool},",
            "        healthCheckIntervalSeconds=${3:int},",
            "        healthCheckPath=${4:str},",
            "        healthCheckPort=${5:str},",
            "        healthCheckProtocol=${6:str},",
            "        healthCheckTimeoutSeconds=${7:int},",
            "        healthyThresholdCount=${8:int},",
            "        ipAddressType=${9:str},",
            "        matcher={",
            "            grpcCode=${10:str},",
            "            httpCode=${11:str},",
            "        },",
            "        name=${11:str},",
            "        port=${12:int},",
            "        protocol=${13:str},",
            "        protocolVersion=${14:str},",
            "        tags=[],",
            "        targetGroupAttributes=[],",
            "        targetType=${17:str},",
            "        targets=[],",
            "        unhealthyThresholdCount=${19:int},",
            "        vpcId=${20:str},",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancingv2.CfnTargetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancingv2.CfnTargetGroup",
            "Attributes: ",
            "  attrTargetGroupArn",
            "  attrLoadBalancerArns",
            "  attrTargetGroupFullName",
            "  attrTargetGroupName"
        ],
        "prefix": "l1-elasticloadbalancingv2-targetgroup",
        "scope": "python"
    },
    "elasticloadbalancingv2.CfnTrustStore": {
        "body": [
            "elasticloadbalancingv2.CfnTrustStore(self, \"${1:id}\", ",
            "        caCertificatesBundleS3Bucket=${2:str},",
            "        caCertificatesBundleS3Key=${3:str},",
            "        caCertificatesBundleS3ObjectVersion=${4:str},",
            "        name=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancingv2.CfnTrustStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancingv2.CfnTrustStore",
            "Attributes: ",
            "  attrStatus",
            "  attrTrustStoreArn",
            "  attrNumberOfCaCertificates"
        ],
        "prefix": "l1-elasticloadbalancingv2-truststore",
        "scope": "python"
    },
    "elasticloadbalancingv2.CfnTrustStoreRevocation": {
        "body": [
            "elasticloadbalancingv2.CfnTrustStoreRevocation(self, \"${1:id}\", ",
            "        revocationContents=[],",
            "        trustStoreArn=${3:str},",
            ")"
        ],
        "description": [
            "Construct: elasticloadbalancingv2.CfnTrustStoreRevocation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticloadbalancingv2.CfnTrustStoreRevocation",
            "Attributes: ",
            "  attrTrustStoreRevocations",
            "  attrRevocationId"
        ],
        "prefix": "l1-elasticloadbalancingv2-truststorerevocation",
        "scope": "python"
    },
    "elasticsearch.CfnDomain": {
        "body": [
            "elasticsearch.CfnDomain(self, \"${1:id}\", ",
            "        accessPolicies=${2:dict},",
            "        advancedOptions={",
            "        },",
            "        advancedSecurityOptions={",
            "            anonymousAuthEnabled=${4:bool},",
            "            enabled=${5:bool},",
            "            internalUserDatabaseEnabled=${6:bool},",
            "        },",
            "        cognitoOptions={",
            "            enabled=${5:bool},",
            "            identityPoolId=${6:str},",
            "            roleArn=${7:str},",
            "            userPoolId=${8:str},",
            "        },",
            "        domainEndpointOptions={",
            "            customEndpoint=${6:str},",
            "            customEndpointCertificateArn=${7:str},",
            "            customEndpointEnabled=${8:bool},",
            "            enforceHTTPS=${9:bool},",
            "            tLSSecurityPolicy=${10:str},",
            "        },",
            "        domainName=${7:str},",
            "        eBSOptions={",
            "            eBSEnabled=${8:bool},",
            "            iops=${9:int},",
            "            volumeSize=${10:int},",
            "            volumeType=${11:str},",
            "        },",
            "        elasticsearchClusterConfig={",
            "            dedicatedMasterCount=${10:int},",
            "            dedicatedMasterEnabled=${11:bool},",
            "            dedicatedMasterType=${12:str},",
            "            instanceCount=${13:int},",
            "            instanceType=${14:str},",
            "            warmCount=${15:int},",
            "            warmEnabled=${16:bool},",
            "            warmType=${17:str},",
            "            zoneAwarenessEnabled=${19:bool},",
            "        },",
            "        elasticsearchVersion=${10:str},",
            "        encryptionAtRestOptions={",
            "            enabled=${11:bool},",
            "            kmsKeyId=${12:str},",
            "        },",
            "        logPublishingOptions={",
            "        },",
            "        nodeToNodeEncryptionOptions={",
            "            enabled=${13:bool},",
            "        },",
            "        snapshotOptions={",
            "            automatedSnapshotStartHour=${14:int},",
            "        },",
            "        tags=[],",
            "        vPCOptions={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: elasticsearch.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-elasticsearch.CfnDomain",
            "Attributes: ",
            "  attrArn",
            "  attrDomainArn",
            "  attrDomainEndpoint"
        ],
        "prefix": "l1-elasticsearch-domain",
        "scope": "python"
    },
    "emr.CfnCluster": {
        "body": [
            "emr.CfnCluster(self, \"${1:id}\", ",
            "        additionalInfo=${2:dict},",
            "        applications=[],",
            "        autoScalingRole=${4:str},",
            "        autoTerminationPolicy={",
            "            idleTimeout=${5:int},",
            "        },",
            "        bootstrapActions=[],",
            "        configurations=[],",
            "        customAmiId=${8:str},",
            "        ebsRootVolumeIops=${9:int},",
            "        ebsRootVolumeSize=${10:int},",
            "        ebsRootVolumeThroughput=${11:int},",
            "        instances={",
            "            additionalMasterSecurityGroups=[],",
            "            additionalSlaveSecurityGroups=[],",
            "            ec2KeyName=${16:str},",
            "            ec2SubnetId=${17:str},",
            "            ec2SubnetIds=[],",
            "            emrManagedMasterSecurityGroup=${19:str},",
            "            emrManagedSlaveSecurityGroup=${20:str},",
            "            hadoopVersion=${21:str},",
            "            keepJobFlowAliveWhenNoSteps=${22:bool},",
            "            serviceAccessSecurityGroup=${26:str},",
            "            taskInstanceFleets=[],",
            "            taskInstanceGroups=[],",
            "            terminationProtected=${29:bool},",
            "            unhealthyNodeReplacement=${30:bool},",
            "        },",
            "        jobFlowRole=${13:str}, # Required",
            "        kerberosAttributes={",
            "            aDDomainJoinPassword=${14:str},",
            "            aDDomainJoinUser=${15:str},",
            "            crossRealmTrustPrincipalPassword=${16:str},",
            "            kdcAdminPassword=${17:str},",
            "            realm=${18:str},",
            "        },",
            "        logEncryptionKmsKeyId=${15:str},",
            "        logUri=${16:str},",
            "        managedScalingPolicy={",
            "        },",
            "        name=${18:str}, # Required",
            "        oSReleaseLabel=${19:str},",
            "        placementGroupConfigs=[],",
            "        releaseLabel=${21:str},",
            "        scaleDownBehavior=${22:str},",
            "        securityConfiguration=${23:str},",
            "        serviceRole=${24:str}, # Required",
            "        stepConcurrencyLevel=${25:int},",
            "        steps=[],",
            "        tags=[],",
            "        visibleToAllUsers=${28:bool},",
            ")"
        ],
        "description": [
            "Construct: emr.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnCluster",
            "Attributes: ",
            "  attrMasterPublicDNS"
        ],
        "prefix": "l1-emr-cluster",
        "scope": "python"
    },
    "emr.CfnInstanceFleetConfig": {
        "body": [
            "emr.CfnInstanceFleetConfig(self, \"${1:id}\", ",
            "        clusterId=${2:str}, # Required",
            "        instanceFleetType=${3:str}, # Required",
            "        instanceTypeConfigs=[],",
            "        launchSpecifications={",
            "        },",
            "        name=${6:str},",
            "        targetOnDemandCapacity=${7:int},",
            "        targetSpotCapacity=${8:int},",
            ")"
        ],
        "description": [
            "Construct: emr.CfnInstanceFleetConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnInstanceFleetConfig"
        ],
        "prefix": "l1-emr-instancefleetconfig",
        "scope": "python"
    },
    "emr.CfnInstanceGroupConfig": {
        "body": [
            "emr.CfnInstanceGroupConfig(self, \"${1:id}\", ",
            "        autoScalingPolicy={",
            "            rules=[],",
            "        },",
            "        bidPrice=${3:str},",
            "        configurations=[],",
            "        customAmiId=${5:str},",
            "        ebsConfiguration={",
            "            ebsBlockDeviceConfigs=[],",
            "            ebsOptimized=${7:bool},",
            "        },",
            "        instanceCount=${7:int}, # Required",
            "        instanceRole=${8:str}, # Required",
            "        instanceType=${9:str}, # Required",
            "        jobFlowId=${10:str}, # Required",
            "        market=${11:str},",
            "        name=${12:str},",
            ")"
        ],
        "description": [
            "Construct: emr.CfnInstanceGroupConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnInstanceGroupConfig"
        ],
        "prefix": "l1-emr-instancegroupconfig",
        "scope": "python"
    },
    "emr.CfnSecurityConfiguration": {
        "body": [
            "emr.CfnSecurityConfiguration(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        securityConfiguration=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: emr.CfnSecurityConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnSecurityConfiguration"
        ],
        "prefix": "l1-emr-securityconfiguration",
        "scope": "python"
    },
    "emr.CfnStep": {
        "body": [
            "emr.CfnStep(self, \"${1:id}\", ",
            "        actionOnFailure=${2:str}, # Required",
            "        hadoopJarStep={",
            "            args=[],",
            "            jar=${4:str},",
            "            mainClass=${5:str},",
            "            stepProperties=[],",
            "        },",
            "        jobFlowId=${4:str}, # Required",
            "        name=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: emr.CfnStep",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnStep",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-emr-step",
        "scope": "python"
    },
    "emr.CfnStudio": {
        "body": [
            "emr.CfnStudio(self, \"${1:id}\", ",
            "        authMode=${2:str}, # Required",
            "        defaultS3Location=${3:str}, # Required",
            "        description=${4:str},",
            "        encryptionKeyArn=${5:str},",
            "        engineSecurityGroupId=${6:str}, # Required",
            "        idcInstanceArn=${7:str},",
            "        idcUserAssignment=${8:str},",
            "        idpAuthUrl=${9:str},",
            "        idpRelayStateParameterName=${10:str},",
            "        name=${11:str}, # Required",
            "        serviceRole=${12:str}, # Required",
            "        subnetIds=[], # Required",
            "        tags=[],",
            "        trustedIdentityPropagationEnabled=${15:bool},",
            "        userRole=${16:str},",
            "        vpcId=${17:str}, # Required",
            "        workspaceSecurityGroupId=${18:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: emr.CfnStudio",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnStudio",
            "Attributes: ",
            "  attrArn",
            "  attrStudioId",
            "  attrUrl"
        ],
        "prefix": "l1-emr-studio",
        "scope": "python"
    },
    "emr.CfnStudioSessionMapping": {
        "body": [
            "emr.CfnStudioSessionMapping(self, \"${1:id}\", ",
            "        identityName=${2:str}, # Required",
            "        identityType=${3:str}, # Required",
            "        sessionPolicyArn=${4:str}, # Required",
            "        studioId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: emr.CfnStudioSessionMapping",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnStudioSessionMapping"
        ],
        "prefix": "l1-emr-studiosessionmapping",
        "scope": "python"
    },
    "emr.CfnWALWorkspace": {
        "body": [
            "emr.CfnWALWorkspace(self, \"${1:id}\", ",
            "        tags=[],",
            "        wALWorkspaceName=${3:str},",
            ")"
        ],
        "description": [
            "Construct: emr.CfnWALWorkspace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emr.CfnWALWorkspace"
        ],
        "prefix": "l1-emr-walworkspace",
        "scope": "python"
    },
    "emrcontainers.CfnVirtualCluster": {
        "body": [
            "emrcontainers.CfnVirtualCluster(self, \"${1:id}\", ",
            "        containerProvider={",
            "            id=${2:str},",
            "            type=${4:str},",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: emrcontainers.CfnVirtualCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emrcontainers.CfnVirtualCluster",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-emrcontainers-virtualcluster",
        "scope": "python"
    },
    "emrserverless.CfnApplication": {
        "body": [
            "emrserverless.CfnApplication(self, \"${1:id}\", ",
            "        architecture=${2:str},",
            "        autoStartConfiguration={",
            "            enabled=${3:bool},",
            "        },",
            "        autoStopConfiguration={",
            "            enabled=${4:bool},",
            "            idleTimeoutMinutes=${5:int},",
            "        },",
            "        imageConfiguration={",
            "            imageUri=${5:str},",
            "        },",
            "        initialCapacity=[],",
            "        maximumCapacity={",
            "            cpu=${7:str},",
            "            disk=${8:str},",
            "            memory=${9:str},",
            "        },",
            "        monitoringConfiguration={",
            "        },",
            "        name=${9:str},",
            "        networkConfiguration={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            "        releaseLabel=${11:str}, # Required",
            "        runtimeConfiguration=[],",
            "        tags=[],",
            "        type=${14:str}, # Required",
            "        workerTypeSpecifications={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: emrserverless.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-emrserverless.CfnApplication",
            "Attributes: ",
            "  attrArn",
            "  attrApplicationId"
        ],
        "prefix": "l1-emrserverless-application",
        "scope": "python"
    },
    "entityresolution.CfnIdMappingWorkflow": {
        "body": [
            "entityresolution.CfnIdMappingWorkflow(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        idMappingTechniques={",
            "            idMappingType=${3:str},",
            "        },",
            "        inputSourceConfig=[], # Required",
            "        outputSourceConfig=[],",
            "        roleArn=${6:str}, # Required",
            "        tags=[],",
            "        workflowName=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: entityresolution.CfnIdMappingWorkflow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-entityresolution.CfnIdMappingWorkflow",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrWorkflowArn",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-entityresolution-idmappingworkflow",
        "scope": "python"
    },
    "entityresolution.CfnIdNamespace": {
        "body": [
            "entityresolution.CfnIdNamespace(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        idMappingWorkflowProperties=[],",
            "        idNamespaceName=${4:str}, # Required",
            "        inputSourceConfig=[],",
            "        roleArn=${6:str},",
            "        tags=[],",
            "        type=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: entityresolution.CfnIdNamespace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-entityresolution.CfnIdNamespace",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrUpdatedAt",
            "  attrIdNamespaceArn"
        ],
        "prefix": "l1-entityresolution-idnamespace",
        "scope": "python"
    },
    "entityresolution.CfnMatchingWorkflow": {
        "body": [
            "entityresolution.CfnMatchingWorkflow(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        inputSourceConfig=[], # Required",
            "        outputSourceConfig=[], # Required",
            "        resolutionTechniques={",
            "            resolutionType=${6:str},",
            "        },",
            "        roleArn=${6:str}, # Required",
            "        tags=[],",
            "        workflowName=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: entityresolution.CfnMatchingWorkflow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-entityresolution.CfnMatchingWorkflow",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrWorkflowArn",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-entityresolution-matchingworkflow",
        "scope": "python"
    },
    "entityresolution.CfnPolicyStatement": {
        "body": [
            "entityresolution.CfnPolicyStatement(self, \"${1:id}\", ",
            "        action=[],",
            "        arn=${3:str}, # Required",
            "        condition=${4:str},",
            "        effect=${5:str},",
            "        principal=[],",
            "        statementId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: entityresolution.CfnPolicyStatement",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-entityresolution.CfnPolicyStatement"
        ],
        "prefix": "l1-entityresolution-policystatement",
        "scope": "python"
    },
    "entityresolution.CfnSchemaMapping": {
        "body": [
            "entityresolution.CfnSchemaMapping(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        mappedInputFields=[], # Required",
            "        schemaName=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: entityresolution.CfnSchemaMapping",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-entityresolution.CfnSchemaMapping",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrHasWorkflows",
            "  attrUpdatedAt",
            "  attrSchemaArn"
        ],
        "prefix": "l1-entityresolution-schemamapping",
        "scope": "python"
    },
    "events.CfnApiDestination": {
        "body": [
            "events.CfnApiDestination(self, \"${1:id}\", ",
            "        connectionArn=${2:str}, # Required",
            "        description=${3:str},",
            "        httpMethod=${4:str}, # Required",
            "        invocationEndpoint=${5:str}, # Required",
            "        invocationRateLimitPerSecond=${6:int},",
            "        name=${7:str},",
            ")"
        ],
        "description": [
            "Construct: events.CfnApiDestination",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-events.CfnApiDestination",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-events-apidestination",
        "scope": "python"
    },
    "events.CfnArchive": {
        "body": [
            "events.CfnArchive(self, \"${1:id}\", ",
            "        archiveName=${2:str},",
            "        description=${3:str},",
            "        eventPattern=${4:dict},",
            "        retentionDays=${5:int},",
            "        sourceArn=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: events.CfnArchive",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-events.CfnArchive",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-events-archive",
        "scope": "python"
    },
    "events.CfnConnection": {
        "body": [
            "events.CfnConnection(self, \"${1:id}\", ",
            "        authParameters={",
            "        },",
            "        authorizationType=${3:str},",
            "        description=${4:str},",
            "        name=${5:str},",
            ")"
        ],
        "description": [
            "Construct: events.CfnConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-events.CfnConnection",
            "Attributes: ",
            "  attrSecretArn",
            "  attrArn"
        ],
        "prefix": "l1-events-connection",
        "scope": "python"
    },
    "events.CfnEndpoint": {
        "body": [
            "events.CfnEndpoint(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        eventBuses=[], # Required",
            "        name=${4:str},",
            "        replicationConfig={",
            "            state=${5:str},",
            "        },",
            "        roleArn=${6:str},",
            "        routingConfig={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: events.CfnEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-events.CfnEndpoint",
            "Attributes: ",
            "  attrState",
            "  attrStateReason",
            "  attrEndpointId",
            "  attrArn",
            "  attrEndpointUrl"
        ],
        "prefix": "l1-events-endpoint",
        "scope": "python"
    },
    "events.CfnEventBus": {
        "body": [
            "events.CfnEventBus(self, \"${1:id}\", ",
            "        deadLetterConfig={",
            "            arn=${2:str},",
            "        },",
            "        description=${3:str},",
            "        eventSourceName=${4:str},",
            "        kmsKeyIdentifier=${5:str},",
            "        name=${6:str}, # Required",
            "        policy=${7:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: events.CfnEventBus",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-events.CfnEventBus",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-events-eventbus",
        "scope": "python"
    },
    "events.CfnEventBusPolicy": {
        "body": [
            "events.CfnEventBusPolicy(self, \"${1:id}\", ",
            "        action=${2:str},",
            "        condition={",
            "            key=${3:str},",
            "            type=${4:str},",
            "            value=${5:str},",
            "        },",
            "        eventBusName=${4:str},",
            "        principal=${5:str},",
            "        statement=${6:dict},",
            "        statementId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: events.CfnEventBusPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-events.CfnEventBusPolicy"
        ],
        "prefix": "l1-events-eventbuspolicy",
        "scope": "python"
    },
    "events.CfnRule": {
        "body": [
            "events.CfnRule(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        eventBusName=${3:str},",
            "        eventPattern=${4:dict},",
            "        name=${5:str},",
            "        roleArn=${6:str},",
            "        scheduleExpression=${7:str},",
            "        state=${8:str},",
            "        targets=[],",
            ")"
        ],
        "description": [
            "Construct: events.CfnRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-events.CfnRule",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-events-rule",
        "scope": "python"
    },
    "eventschemas.CfnDiscoverer": {
        "body": [
            "eventschemas.CfnDiscoverer(self, \"${1:id}\", ",
            "        crossAccount=${2:bool},",
            "        description=${3:str},",
            "        sourceArn=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: eventschemas.CfnDiscoverer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eventschemas.CfnDiscoverer",
            "Attributes: ",
            "  attrDiscovererArn",
            "  attrDiscovererId",
            "  attrState"
        ],
        "prefix": "l1-eventschemas-discoverer",
        "scope": "python"
    },
    "eventschemas.CfnRegistry": {
        "body": [
            "eventschemas.CfnRegistry(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        registryName=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: eventschemas.CfnRegistry",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eventschemas.CfnRegistry",
            "Attributes: ",
            "  attrRegistryName",
            "  attrRegistryArn"
        ],
        "prefix": "l1-eventschemas-registry",
        "scope": "python"
    },
    "eventschemas.CfnRegistryPolicy": {
        "body": [
            "eventschemas.CfnRegistryPolicy(self, \"${1:id}\", ",
            "        policy=${2:dict}, # Required",
            "        registryName=${3:str}, # Required",
            "        revisionId=${4:str},",
            ")"
        ],
        "description": [
            "Construct: eventschemas.CfnRegistryPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eventschemas.CfnRegistryPolicy",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-eventschemas-registrypolicy",
        "scope": "python"
    },
    "eventschemas.CfnSchema": {
        "body": [
            "eventschemas.CfnSchema(self, \"${1:id}\", ",
            "        content=${2:str}, # Required",
            "        description=${3:str},",
            "        registryName=${4:str}, # Required",
            "        schemaName=${5:str},",
            "        tags=[],",
            "        type=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: eventschemas.CfnSchema",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-eventschemas.CfnSchema",
            "Attributes: ",
            "  attrLastModified",
            "  attrSchemaVersion",
            "  attrVersionCreatedDate",
            "  attrSchemaArn",
            "  attrSchemaName"
        ],
        "prefix": "l1-eventschemas-schema",
        "scope": "python"
    },
    "evidently.CfnExperiment": {
        "body": [
            "evidently.CfnExperiment(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        metricGoals=[], # Required",
            "        name=${4:str}, # Required",
            "        onlineAbConfig={",
            "            controlTreatmentName=${5:str},",
            "            treatmentWeights=[],",
            "        },",
            "        project=${6:str}, # Required",
            "        randomizationSalt=${7:str},",
            "        removeSegment=${8:bool},",
            "        runningStatus={",
            "            analysisCompleteTime=${9:str},",
            "            desiredState=${10:str},",
            "            reason=${11:str},",
            "            status=${12:str},",
            "        },",
            "        samplingRate=${10:int},",
            "        segment=${11:str},",
            "        tags=[],",
            "        treatments=[], # Required",
            ")"
        ],
        "description": [
            "Construct: evidently.CfnExperiment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-evidently.CfnExperiment",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-evidently-experiment",
        "scope": "python"
    },
    "evidently.CfnFeature": {
        "body": [
            "evidently.CfnFeature(self, \"${1:id}\", ",
            "        defaultVariation=${2:str},",
            "        description=${3:str},",
            "        entityOverrides=[],",
            "        evaluationStrategy=${5:str},",
            "        name=${6:str}, # Required",
            "        project=${7:str}, # Required",
            "        tags=[],",
            "        variations=[], # Required",
            ")"
        ],
        "description": [
            "Construct: evidently.CfnFeature",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-evidently.CfnFeature",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-evidently-feature",
        "scope": "python"
    },
    "evidently.CfnLaunch": {
        "body": [
            "evidently.CfnLaunch(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        executionStatus={",
            "            desiredState=${3:str},",
            "            reason=${4:str},",
            "            status=${5:str},",
            "        },",
            "        groups=[], # Required",
            "        metricMonitors=[],",
            "        name=${6:str}, # Required",
            "        project=${7:str}, # Required",
            "        randomizationSalt=${8:str},",
            "        scheduledSplitsConfig=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: evidently.CfnLaunch",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-evidently.CfnLaunch",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-evidently-launch",
        "scope": "python"
    },
    "evidently.CfnProject": {
        "body": [
            "evidently.CfnProject(self, \"${1:id}\", ",
            "        appConfigResource={",
            "            applicationId=${2:str},",
            "            environmentId=${3:str},",
            "        },",
            "        dataDelivery={",
            "            logGroup=${3:str},",
            "        },",
            "        description=${4:str},",
            "        name=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: evidently.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-evidently.CfnProject",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-evidently-project",
        "scope": "python"
    },
    "evidently.CfnSegment": {
        "body": [
            "evidently.CfnSegment(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        pattern=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: evidently.CfnSegment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-evidently.CfnSegment",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-evidently-segment",
        "scope": "python"
    },
    "finspace.CfnEnvironment": {
        "body": [
            "finspace.CfnEnvironment(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        federationMode=${3:str},",
            "        federationParameters={",
            "            applicationCallBackURL=${4:str},",
            "            attributeMap=[],",
            "            federationProviderName=${6:str},",
            "            federationURN=${7:str},",
            "            samlMetadataDocument=${8:str},",
            "            samlMetadataURL=${9:str},",
            "        },",
            "        kmsKeyId=${5:str},",
            "        name=${6:str}, # Required",
            "        superuserParameters={",
            "            emailAddress=${7:str},",
            "            firstName=${8:str},",
            "            lastName=${9:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: finspace.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-finspace.CfnEnvironment",
            "Attributes: ",
            "  attrStatus",
            "  attrEnvironmentId",
            "  attrEnvironmentArn",
            "  attrSageMakerStudioDomainUrl",
            "  attrEnvironmentUrl",
            "  attrAwsAccountId",
            "  attrDedicatedServiceAccountId"
        ],
        "prefix": "l1-finspace-environment",
        "scope": "python"
    },
    "fis.CfnExperimentTemplate": {
        "body": [
            "fis.CfnExperimentTemplate(self, \"${1:id}\", ",
            "        actions={",
            "        },",
            "        description=${3:str}, # Required",
            "        experimentOptions={",
            "            accountTargeting=${4:str},",
            "            emptyTargetResolutionMode=${5:str},",
            "        },",
            "        logConfiguration={",
            "            logSchemaVersion=${6:int},",
            "        },",
            "        roleArn=${6:str}, # Required",
            "        stopConditions=[], # Required",
            "        tags={",
            "        },",
            "        targets={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: fis.CfnExperimentTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fis.CfnExperimentTemplate",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-fis-experimenttemplate",
        "scope": "python"
    },
    "fis.CfnTargetAccountConfiguration": {
        "body": [
            "fis.CfnTargetAccountConfiguration(self, \"${1:id}\", ",
            "        accountId=${2:str}, # Required",
            "        description=${3:str},",
            "        experimentTemplateId=${4:str}, # Required",
            "        roleArn=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: fis.CfnTargetAccountConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fis.CfnTargetAccountConfiguration"
        ],
        "prefix": "l1-fis-targetaccountconfiguration",
        "scope": "python"
    },
    "fms.CfnNotificationChannel": {
        "body": [
            "fms.CfnNotificationChannel(self, \"${1:id}\", ",
            "        snsRoleName=${2:str}, # Required",
            "        snsTopicArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: fms.CfnNotificationChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fms.CfnNotificationChannel"
        ],
        "prefix": "l1-fms-notificationchannel",
        "scope": "python"
    },
    "fms.CfnPolicy": {
        "body": [
            "fms.CfnPolicy(self, \"${1:id}\", ",
            "        deleteAllPolicyResources=${2:bool},",
            "        excludeMap={",
            "            aCCOUNT=[],",
            "            oRGUNIT=[],",
            "        },",
            "        excludeResourceTags=${4:bool}, # Required",
            "        includeMap={",
            "            aCCOUNT=[],",
            "            oRGUNIT=[],",
            "        },",
            "        policyDescription=${6:str},",
            "        policyName=${7:str}, # Required",
            "        remediationEnabled=${8:bool}, # Required",
            "        resourceSetIds=[],",
            "        resourceTags=[],",
            "        resourceType=${11:str},",
            "        resourceTypeList=[],",
            "        resourcesCleanUp=${13:bool},",
            "        securityServicePolicyData={",
            "            managedServiceData=${14:str},",
            "            type=${16:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: fms.CfnPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fms.CfnPolicy",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-fms-policy",
        "scope": "python"
    },
    "fms.CfnResourceSet": {
        "body": [
            "fms.CfnResourceSet(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        resourceTypeList=[], # Required",
            "        resources=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: fms.CfnResourceSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fms.CfnResourceSet",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-fms-resourceset",
        "scope": "python"
    },
    "forecast.CfnDataset": {
        "body": [
            "forecast.CfnDataset(self, \"${1:id}\", ",
            "        dataFrequency=${2:str},",
            "        datasetName=${3:str}, # Required",
            "        datasetType=${4:str}, # Required",
            "        domain=${5:str}, # Required",
            "        encryptionConfig={",
            "            kmsKeyArn=${6:str},",
            "            roleArn=${7:str},",
            "        },",
            "        schema={",
            "            attributes=[],",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: forecast.CfnDataset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-forecast.CfnDataset",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-forecast-dataset",
        "scope": "python"
    },
    "forecast.CfnDatasetGroup": {
        "body": [
            "forecast.CfnDatasetGroup(self, \"${1:id}\", ",
            "        datasetArns=[],",
            "        datasetGroupName=${3:str}, # Required",
            "        domain=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: forecast.CfnDatasetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-forecast.CfnDatasetGroup",
            "Attributes: ",
            "  attrDatasetGroupArn"
        ],
        "prefix": "l1-forecast-datasetgroup",
        "scope": "python"
    },
    "frauddetector.CfnDetector": {
        "body": [
            "frauddetector.CfnDetector(self, \"${1:id}\", ",
            "        associatedModels=[],",
            "        description=${3:str},",
            "        detectorId=${4:str}, # Required",
            "        detectorVersionStatus=${5:str},",
            "        eventType={",
            "            arn=${6:str},",
            "            createdTime=${7:str},",
            "            description=${8:str},",
            "            entityTypes=[],",
            "            eventVariables=[],",
            "            inline=${11:bool},",
            "            labels=[],",
            "            lastUpdatedTime=${13:str},",
            "            name=${14:str},",
            "            tags=[],",
            "        },",
            "        ruleExecutionMode=${7:str},",
            "        rules=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: frauddetector.CfnDetector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-frauddetector.CfnDetector",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrEventType.Arn",
            "  attrEventType.LastUpdatedTime",
            "  attrLastUpdatedTime",
            "  attrEventType.CreatedTime",
            "  attrArn",
            "  attrDetectorVersionId"
        ],
        "prefix": "l1-frauddetector-detector",
        "scope": "python"
    },
    "frauddetector.CfnEntityType": {
        "body": [
            "frauddetector.CfnEntityType(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: frauddetector.CfnEntityType",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-frauddetector.CfnEntityType",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-frauddetector-entitytype",
        "scope": "python"
    },
    "frauddetector.CfnEventType": {
        "body": [
            "frauddetector.CfnEventType(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        entityTypes=[], # Required",
            "        eventVariables=[], # Required",
            "        labels=[], # Required",
            "        name=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: frauddetector.CfnEventType",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-frauddetector.CfnEventType",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-frauddetector-eventtype",
        "scope": "python"
    },
    "frauddetector.CfnLabel": {
        "body": [
            "frauddetector.CfnLabel(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: frauddetector.CfnLabel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-frauddetector.CfnLabel",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-frauddetector-label",
        "scope": "python"
    },
    "frauddetector.CfnList": {
        "body": [
            "frauddetector.CfnList(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        elements=[],",
            "        name=${4:str}, # Required",
            "        tags=[],",
            "        variableType=${6:str},",
            ")"
        ],
        "description": [
            "Construct: frauddetector.CfnList",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-frauddetector.CfnList",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-frauddetector-list",
        "scope": "python"
    },
    "frauddetector.CfnOutcome": {
        "body": [
            "frauddetector.CfnOutcome(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: frauddetector.CfnOutcome",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-frauddetector.CfnOutcome",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-frauddetector-outcome",
        "scope": "python"
    },
    "frauddetector.CfnVariable": {
        "body": [
            "frauddetector.CfnVariable(self, \"${1:id}\", ",
            "        dataSource=${2:str}, # Required",
            "        dataType=${3:str}, # Required",
            "        defaultValue=${4:str}, # Required",
            "        description=${5:str},",
            "        name=${6:str}, # Required",
            "        tags=[],",
            "        variableType=${8:str},",
            ")"
        ],
        "description": [
            "Construct: frauddetector.CfnVariable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-frauddetector.CfnVariable",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-frauddetector-variable",
        "scope": "python"
    },
    "fsx.CfnDataRepositoryAssociation": {
        "body": [
            "fsx.CfnDataRepositoryAssociation(self, \"${1:id}\", ",
            "        batchImportMetaDataOnCreate=${2:bool},",
            "        dataRepositoryPath=${3:str}, # Required",
            "        fileSystemId=${4:str}, # Required",
            "        fileSystemPath=${5:str}, # Required",
            "        importedFileChunkSize=${6:int},",
            "        s3={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: fsx.CfnDataRepositoryAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fsx.CfnDataRepositoryAssociation",
            "Attributes: ",
            "  attrResourceARN",
            "  attrAssociationId"
        ],
        "prefix": "l1-fsx-datarepositoryassociation",
        "scope": "python"
    },
    "fsx.CfnFileSystem": {
        "body": [
            "fsx.CfnFileSystem(self, \"${1:id}\", ",
            "        backupId=${2:str},",
            "        fileSystemType=${3:str}, # Required",
            "        fileSystemTypeVersion=${4:str},",
            "        kmsKeyId=${5:str},",
            "        lustreConfiguration={",
            "            autoImportPolicy=${6:str},",
            "            automaticBackupRetentionDays=${7:int},",
            "            copyTagsToBackups=${8:bool},",
            "            dailyAutomaticBackupStartTime=${9:str},",
            "            dataCompressionType=${10:str},",
            "            deploymentType=${11:str},",
            "            driveCacheType=${12:str},",
            "            exportPath=${13:str},",
            "            importPath=${14:str},",
            "            importedFileChunkSize=${15:int},",
            "            perUnitStorageThroughput=${17:int},",
            "            weeklyMaintenanceStartTime=${18:str},",
            "        },",
            "        ontapConfiguration={",
            "            automaticBackupRetentionDays=${7:int},",
            "            dailyAutomaticBackupStartTime=${8:str},",
            "            deploymentType=${9:str},",
            "            endpointIpAddressRange=${11:str},",
            "            fsxAdminPassword=${12:str},",
            "            hAPairs=${13:int},",
            "            preferredSubnetId=${14:str},",
            "            routeTableIds=[],",
            "            throughputCapacity=${16:int},",
            "            throughputCapacityPerHAPair=${17:int},",
            "            weeklyMaintenanceStartTime=${18:str},",
            "        },",
            "        openZFSConfiguration={",
            "            automaticBackupRetentionDays=${8:int},",
            "            copyTagsToBackups=${9:bool},",
            "            copyTagsToVolumes=${10:bool},",
            "            dailyAutomaticBackupStartTime=${11:str},",
            "            deploymentType=${12:str},",
            "            endpointIpAddressRange=${14:str},",
            "            options=[],",
            "            preferredSubnetId=${16:str},",
            "            routeTableIds=[],",
            "            throughputCapacity=${19:int},",
            "            weeklyMaintenanceStartTime=${20:str},",
            "        },",
            "        securityGroupIds=[],",
            "        storageCapacity=${10:int},",
            "        storageType=${11:str},",
            "        subnetIds=[], # Required",
            "        tags=[],",
            "        windowsConfiguration={",
            "            activeDirectoryId=${14:str},",
            "            aliases=[],",
            "            automaticBackupRetentionDays=${17:int},",
            "            copyTagsToBackups=${18:bool},",
            "            dailyAutomaticBackupStartTime=${19:str},",
            "            deploymentType=${20:str},",
            "            preferredSubnetId=${22:str},",
            "            throughputCapacity=${24:int},",
            "            weeklyMaintenanceStartTime=${25:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: fsx.CfnFileSystem",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fsx.CfnFileSystem",
            "Attributes: ",
            "  attrResourceARN",
            "  attrRootVolumeId",
            "  attrDNSName",
            "  attrLustreMountName"
        ],
        "prefix": "l1-fsx-filesystem",
        "scope": "python"
    },
    "fsx.CfnSnapshot": {
        "body": [
            "fsx.CfnSnapshot(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        tags=[],",
            "        volumeId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: fsx.CfnSnapshot",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fsx.CfnSnapshot",
            "Attributes: ",
            "  attrResourceARN"
        ],
        "prefix": "l1-fsx-snapshot",
        "scope": "python"
    },
    "fsx.CfnStorageVirtualMachine": {
        "body": [
            "fsx.CfnStorageVirtualMachine(self, \"${1:id}\", ",
            "        activeDirectoryConfiguration={",
            "            netBiosName=${2:str},",
            "        },",
            "        fileSystemId=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        rootVolumeSecurityStyle=${5:str},",
            "        svmAdminPassword=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: fsx.CfnStorageVirtualMachine",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fsx.CfnStorageVirtualMachine",
            "Attributes: ",
            "  attrResourceARN",
            "  attrStorageVirtualMachineId",
            "  attrUUID"
        ],
        "prefix": "l1-fsx-storagevirtualmachine",
        "scope": "python"
    },
    "fsx.CfnVolume": {
        "body": [
            "fsx.CfnVolume(self, \"${1:id}\", ",
            "        backupId=${2:str},",
            "        name=${3:str}, # Required",
            "        ontapConfiguration={",
            "            copyTagsToBackups=${5:str},",
            "            junctionPath=${6:str},",
            "            ontapVolumeType=${7:str},",
            "            securityStyle=${8:str},",
            "            sizeInBytes=${9:str},",
            "            sizeInMegabytes=${10:str},",
            "            snapshotPolicy=${12:str},",
            "            storageEfficiencyEnabled=${13:str},",
            "            storageVirtualMachineId=${14:str},",
            "            volumeStyle=${16:str},",
            "        },",
            "        openZFSConfiguration={",
            "            copyTagsToSnapshots=${5:bool},",
            "            dataCompressionType=${6:str},",
            "            nfsExports=[],",
            "            options=[],",
            "            parentVolumeId=${10:str},",
            "            readOnly=${11:bool},",
            "            recordSizeKiB=${12:int},",
            "            storageCapacityQuotaGiB=${13:int},",
            "            storageCapacityReservationGiB=${14:int},",
            "            userAndGroupQuotas=[],",
            "        },",
            "        tags=[],",
            "        volumeType=${7:str},",
            ")"
        ],
        "description": [
            "Construct: fsx.CfnVolume",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-fsx.CfnVolume",
            "Attributes: ",
            "  attrResourceARN",
            "  attrVolumeId",
            "  attrUUID"
        ],
        "prefix": "l1-fsx-volume",
        "scope": "python"
    },
    "gamelift.CfnAlias": {
        "body": [
            "gamelift.CfnAlias(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        routingStrategy={",
            "            fleetId=${4:str},",
            "            message=${5:str},",
            "            type=${6:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnAlias",
            "Attributes: ",
            "  attrAliasId"
        ],
        "prefix": "l1-gamelift-alias",
        "scope": "python"
    },
    "gamelift.CfnBuild": {
        "body": [
            "gamelift.CfnBuild(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        operatingSystem=${3:str},",
            "        serverSdkVersion=${4:str},",
            "        storageLocation={",
            "            bucket=${5:str},",
            "            key=${6:str},",
            "            objectVersion=${7:str},",
            "            roleArn=${8:str},",
            "        },",
            "        version=${6:str},",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnBuild",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnBuild",
            "Attributes: ",
            "  attrBuildId"
        ],
        "prefix": "l1-gamelift-build",
        "scope": "python"
    },
    "gamelift.CfnContainerGroupDefinition": {
        "body": [
            "gamelift.CfnContainerGroupDefinition(self, \"${1:id}\", ",
            "        containerDefinitions=[], # Required",
            "        name=${3:str}, # Required",
            "        operatingSystem=${4:str}, # Required",
            "        schedulingStrategy=${5:str},",
            "        tags=[],",
            "        totalCpuLimit=${7:int}, # Required",
            "        totalMemoryLimit=${8:int}, # Required",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnContainerGroupDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnContainerGroupDefinition",
            "Attributes: ",
            "  attrContainerGroupDefinitionArn",
            "  attrCreationTime"
        ],
        "prefix": "l1-gamelift-containergroupdefinition",
        "scope": "python"
    },
    "gamelift.CfnFleet": {
        "body": [
            "gamelift.CfnFleet(self, \"${1:id}\", ",
            "        anywhereConfiguration={",
            "            cost=${2:str},",
            "        },",
            "        applyCapacity=${3:str},",
            "        buildId=${4:str},",
            "        certificateConfiguration={",
            "            certificateType=${5:str},",
            "        },",
            "        computeType=${6:str},",
            "        containerGroupsConfiguration={",
            "            containerGroupDefinitionNames=[],",
            "        },",
            "        description=${8:str},",
            "        desiredEC2Instances=${9:int},",
            "        eC2InboundPermissions=[],",
            "        eC2InstanceType=${11:str},",
            "        fleetType=${12:str},",
            "        instanceRoleARN=${13:str},",
            "        instanceRoleCredentialsProvider=${14:str},",
            "        locations=[],",
            "        maxSize=${16:int},",
            "        metricGroups=[],",
            "        minSize=${18:int},",
            "        name=${19:str}, # Required",
            "        newGameSessionProtectionPolicy=${20:str},",
            "        peerVpcAwsAccountId=${21:str},",
            "        peerVpcId=${22:str},",
            "        resourceCreationLimitPolicy={",
            "            newGameSessionsPerCreator=${23:int},",
            "            policyPeriodInMinutes=${24:int},",
            "        },",
            "        runtimeConfiguration={",
            "            gameSessionActivationTimeoutSeconds=${24:int},",
            "            maxConcurrentGameSessionActivations=${25:int},",
            "            serverProcesses=[],",
            "        },",
            "        scalingPolicies=[],",
            "        scriptId=${26:str},",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnFleet",
            "Attributes: ",
            "  attrFleetId",
            "  attrContainerGroupsConfiguration.ContainerGroupsPerInstance.MaxReplicaContainerGroupsPerInstance"
        ],
        "prefix": "l1-gamelift-fleet",
        "scope": "python"
    },
    "gamelift.CfnGameServerGroup": {
        "body": [
            "gamelift.CfnGameServerGroup(self, \"${1:id}\", ",
            "        autoScalingPolicy={",
            "            estimatedInstanceWarmup=${2:float},",
            "        },",
            "        balancingStrategy=${3:str},",
            "        deleteOption=${4:str},",
            "        gameServerGroupName=${5:str}, # Required",
            "        gameServerProtectionPolicy=${6:str},",
            "        instanceDefinitions=[], # Required",
            "        launchTemplate={",
            "            launchTemplateId=${8:str},",
            "            launchTemplateName=${9:str},",
            "            version=${10:str},",
            "        },",
            "        maxSize=${9:float},",
            "        minSize=${10:float},",
            "        roleArn=${11:str}, # Required",
            "        tags=[],",
            "        vpcSubnets=[],",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnGameServerGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnGameServerGroup",
            "Attributes: ",
            "  attrAutoScalingGroupArn",
            "  attrGameServerGroupArn"
        ],
        "prefix": "l1-gamelift-gameservergroup",
        "scope": "python"
    },
    "gamelift.CfnGameSessionQueue": {
        "body": [
            "gamelift.CfnGameSessionQueue(self, \"${1:id}\", ",
            "        customEventData=${2:str},",
            "        destinations=[],",
            "        filterConfiguration={",
            "            allowedLocations=[],",
            "        },",
            "        name=${5:str}, # Required",
            "        notificationTarget=${6:str},",
            "        playerLatencyPolicies=[],",
            "        priorityConfiguration={",
            "            locationOrder=[],",
            "            priorityOrder=[],",
            "        },",
            "        tags=[],",
            "        timeoutInSeconds=${10:int},",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnGameSessionQueue",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnGameSessionQueue",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-gamelift-gamesessionqueue",
        "scope": "python"
    },
    "gamelift.CfnLocation": {
        "body": [
            "gamelift.CfnLocation(self, \"${1:id}\", ",
            "        locationName=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnLocation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnLocation",
            "Attributes: ",
            "  attrLocationArn"
        ],
        "prefix": "l1-gamelift-location",
        "scope": "python"
    },
    "gamelift.CfnMatchmakingConfiguration": {
        "body": [
            "gamelift.CfnMatchmakingConfiguration(self, \"${1:id}\", ",
            "        acceptanceRequired=${2:bool}, # Required",
            "        acceptanceTimeoutSeconds=${3:int},",
            "        additionalPlayerCount=${4:int},",
            "        backfillMode=${5:str},",
            "        creationTime=${6:str},",
            "        customEventData=${7:str},",
            "        description=${8:str},",
            "        flexMatchMode=${9:str},",
            "        gameProperties=[],",
            "        gameSessionData=${11:str},",
            "        gameSessionQueueArns=[],",
            "        name=${13:str}, # Required",
            "        notificationTarget=${14:str},",
            "        requestTimeoutSeconds=${15:int}, # Required",
            "        ruleSetArn=${16:str},",
            "        ruleSetName=${17:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnMatchmakingConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnMatchmakingConfiguration",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-gamelift-matchmakingconfiguration",
        "scope": "python"
    },
    "gamelift.CfnMatchmakingRuleSet": {
        "body": [
            "gamelift.CfnMatchmakingRuleSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        ruleSetBody=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnMatchmakingRuleSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnMatchmakingRuleSet",
            "Attributes: ",
            "  attrCreationTime",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-gamelift-matchmakingruleset",
        "scope": "python"
    },
    "gamelift.CfnScript": {
        "body": [
            "gamelift.CfnScript(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        storageLocation={",
            "            bucket=${3:str},",
            "            key=${4:str},",
            "            objectVersion=${5:str},",
            "            roleArn=${6:str},",
            "        },",
            "        tags=[],",
            "        version=${5:str},",
            ")"
        ],
        "description": [
            "Construct: gamelift.CfnScript",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-gamelift.CfnScript",
            "Attributes: ",
            "  attrCreationTime",
            "  attrId",
            "  attrArn",
            "  attrSizeOnDisk"
        ],
        "prefix": "l1-gamelift-script",
        "scope": "python"
    },
    "globalaccelerator.CfnAccelerator": {
        "body": [
            "globalaccelerator.CfnAccelerator(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        ipAddressType=${3:str},",
            "        ipAddresses=[],",
            "        name=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: globalaccelerator.CfnAccelerator",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-globalaccelerator.CfnAccelerator",
            "Attributes: ",
            "  attrIpv4Addresses",
            "  attrDnsName",
            "  attrDualStackDnsName",
            "  attrAcceleratorArn",
            "  attrIpv6Addresses"
        ],
        "prefix": "l1-globalaccelerator-accelerator",
        "scope": "python"
    },
    "globalaccelerator.CfnCrossAccountAttachment": {
        "body": [
            "globalaccelerator.CfnCrossAccountAttachment(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        principals=[],",
            "        resources=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: globalaccelerator.CfnCrossAccountAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-globalaccelerator.CfnCrossAccountAttachment",
            "Attributes: ",
            "  attrAttachmentArn"
        ],
        "prefix": "l1-globalaccelerator-crossaccountattachment",
        "scope": "python"
    },
    "globalaccelerator.CfnEndpointGroup": {
        "body": [
            "globalaccelerator.CfnEndpointGroup(self, \"${1:id}\", ",
            "        endpointConfigurations=[],",
            "        endpointGroupRegion=${3:str}, # Required",
            "        healthCheckIntervalSeconds=${4:int},",
            "        healthCheckPath=${5:str},",
            "        healthCheckPort=${6:int},",
            "        healthCheckProtocol=${7:str},",
            "        listenerArn=${8:str}, # Required",
            "        portOverrides=[],",
            "        thresholdCount=${10:int},",
            "        trafficDialPercentage=${11:float},",
            ")"
        ],
        "description": [
            "Construct: globalaccelerator.CfnEndpointGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-globalaccelerator.CfnEndpointGroup",
            "Attributes: ",
            "  attrEndpointGroupArn"
        ],
        "prefix": "l1-globalaccelerator-endpointgroup",
        "scope": "python"
    },
    "globalaccelerator.CfnListener": {
        "body": [
            "globalaccelerator.CfnListener(self, \"${1:id}\", ",
            "        acceleratorArn=${2:str}, # Required",
            "        clientAffinity=${3:str},",
            "        portRanges=[], # Required",
            "        protocol=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: globalaccelerator.CfnListener",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-globalaccelerator.CfnListener",
            "Attributes: ",
            "  attrListenerArn"
        ],
        "prefix": "l1-globalaccelerator-listener",
        "scope": "python"
    },
    "glue.CfnClassifier": {
        "body": [
            "glue.CfnClassifier(self, \"${1:id}\", ",
            "        csvClassifier={",
            "            allowSingleColumn=${2:bool},",
            "            containsCustomDatatype=[],",
            "            containsHeader=${4:str},",
            "            customDatatypeConfigured=${5:bool},",
            "            delimiter=${6:str},",
            "            disableValueTrimming=${7:bool},",
            "            header=[],",
            "            name=${9:str},",
            "            quoteSymbol=${10:str},",
            "        },",
            "        grokClassifier={",
            "            classification=${3:str},",
            "            customPatterns=${4:str},",
            "            grokPattern=${5:str},",
            "            name=${6:str},",
            "        },",
            "        jsonClassifier={",
            "            jsonPath=${4:str},",
            "            name=${5:str},",
            "        },",
            "        xMLClassifier={",
            "            classification=${5:str},",
            "            name=${6:str},",
            "            rowTag=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: glue.CfnClassifier",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnClassifier"
        ],
        "prefix": "l1-glue-classifier",
        "scope": "python"
    },
    "glue.CfnConnection": {
        "body": [
            "glue.CfnConnection(self, \"${1:id}\", ",
            "        catalogId=${2:str}, # Required",
            "        connectionInput={",
            "            connectionProperties=${3:dict},",
            "            connectionType=${4:str},",
            "            description=${5:str},",
            "            matchCriteria=[],",
            "            name=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: glue.CfnConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnConnection"
        ],
        "prefix": "l1-glue-connection",
        "scope": "python"
    },
    "glue.CfnCrawler": {
        "body": [
            "glue.CfnCrawler(self, \"${1:id}\", ",
            "        classifiers=[],",
            "        configuration=${3:str},",
            "        crawlerSecurityConfiguration=${4:str},",
            "        databaseName=${5:str},",
            "        description=${6:str},",
            "        lakeFormationConfiguration={",
            "            accountId=${7:str},",
            "            useLakeFormationCredentials=${8:bool},",
            "        },",
            "        name=${8:str},",
            "        recrawlPolicy={",
            "            recrawlBehavior=${9:str},",
            "        },",
            "        role=${10:str}, # Required",
            "        schedule={",
            "            scheduleExpression=${11:str},",
            "        },",
            "        schemaChangePolicy={",
            "            deleteBehavior=${12:str},",
            "            updateBehavior=${13:str},",
            "        },",
            "        tablePrefix=${13:str},",
            "        tags=${14:dict},",
            "        targets={",
            "            catalogTargets=[],",
            "            deltaTargets=[],",
            "            dynamoDBTargets=[],",
            "            icebergTargets=[],",
            "            jdbcTargets=[],",
            "            mongoDBTargets=[],",
            "            s3Targets=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: glue.CfnCrawler",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnCrawler"
        ],
        "prefix": "l1-glue-crawler",
        "scope": "python"
    },
    "glue.CfnCustomEntityType": {
        "body": [
            "glue.CfnCustomEntityType(self, \"${1:id}\", ",
            "        contextWords=[],",
            "        name=${3:str},",
            "        regexString=${4:str},",
            "        tags=${5:dict},",
            ")"
        ],
        "description": [
            "Construct: glue.CfnCustomEntityType",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnCustomEntityType"
        ],
        "prefix": "l1-glue-customentitytype",
        "scope": "python"
    },
    "glue.CfnDataCatalogEncryptionSettings": {
        "body": [
            "glue.CfnDataCatalogEncryptionSettings(self, \"${1:id}\", ",
            "        catalogId=${2:str}, # Required",
            "        dataCatalogEncryptionSettings={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: glue.CfnDataCatalogEncryptionSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnDataCatalogEncryptionSettings"
        ],
        "prefix": "l1-glue-datacatalogencryptionsettings",
        "scope": "python"
    },
    "glue.CfnDataQualityRuleset": {
        "body": [
            "glue.CfnDataQualityRuleset(self, \"${1:id}\", ",
            "        clientToken=${2:str},",
            "        description=${3:str},",
            "        name=${4:str},",
            "        ruleset=${5:str},",
            "        tags=${6:dict},",
            "        targetTable={",
            "            databaseName=${7:str},",
            "            tableName=${8:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: glue.CfnDataQualityRuleset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnDataQualityRuleset"
        ],
        "prefix": "l1-glue-dataqualityruleset",
        "scope": "python"
    },
    "glue.CfnDatabase": {
        "body": [
            "glue.CfnDatabase(self, \"${1:id}\", ",
            "        catalogId=${2:str}, # Required",
            "        databaseInput={",
            "            createTableDefaultPermissions=[],",
            "            description=${4:str},",
            "            locationUri=${6:str},",
            "            name=${7:str},",
            "            parameters=${8:dict},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: glue.CfnDatabase",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnDatabase"
        ],
        "prefix": "l1-glue-database",
        "scope": "python"
    },
    "glue.CfnDevEndpoint": {
        "body": [
            "glue.CfnDevEndpoint(self, \"${1:id}\", ",
            "        arguments=${2:dict},",
            "        endpointName=${3:str},",
            "        extraJarsS3Path=${4:str},",
            "        extraPythonLibsS3Path=${5:str},",
            "        glueVersion=${6:str},",
            "        numberOfNodes=${7:int},",
            "        numberOfWorkers=${8:int},",
            "        publicKey=${9:str},",
            "        publicKeys=[],",
            "        roleArn=${11:str}, # Required",
            "        securityConfiguration=${12:str},",
            "        securityGroupIds=[],",
            "        subnetId=${14:str},",
            "        tags=${15:dict},",
            "        workerType=${16:str},",
            ")"
        ],
        "description": [
            "Construct: glue.CfnDevEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnDevEndpoint"
        ],
        "prefix": "l1-glue-devendpoint",
        "scope": "python"
    },
    "glue.CfnJob": {
        "body": [
            "glue.CfnJob(self, \"${1:id}\", ",
            "        allocatedCapacity=${2:float},",
            "        command={",
            "            name=${3:str},",
            "            pythonVersion=${4:str},",
            "            runtime=${5:str},",
            "            scriptLocation=${6:str},",
            "        },",
            "        connections={",
            "            connections=[],",
            "        },",
            "        defaultArguments=${5:dict},",
            "        description=${6:str},",
            "        executionClass=${7:str},",
            "        executionProperty={",
            "            maxConcurrentRuns=${8:float},",
            "        },",
            "        glueVersion=${9:str},",
            "        logUri=${10:str},",
            "        maintenanceWindow=${11:str},",
            "        maxCapacity=${12:float},",
            "        maxRetries=${13:float},",
            "        name=${14:str},",
            "        nonOverridableArguments=${15:dict},",
            "        notificationProperty={",
            "            notifyDelayAfter=${16:int},",
            "        },",
            "        numberOfWorkers=${17:int},",
            "        role=${18:str}, # Required",
            "        securityConfiguration=${19:str},",
            "        tags=${20:dict},",
            "        timeout=${21:int},",
            "        workerType=${22:str},",
            ")"
        ],
        "description": [
            "Construct: glue.CfnJob",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnJob"
        ],
        "prefix": "l1-glue-job",
        "scope": "python"
    },
    "glue.CfnMLTransform": {
        "body": [
            "glue.CfnMLTransform(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        glueVersion=${3:str},",
            "        inputRecordTables={",
            "            glueTables=[],",
            "        },",
            "        maxCapacity=${5:float},",
            "        maxRetries=${6:int},",
            "        name=${7:str},",
            "        numberOfWorkers=${8:int},",
            "        role=${9:str}, # Required",
            "        tags=${10:dict},",
            "        timeout=${11:int},",
            "        transformEncryption={",
            "            taskRunSecurityConfigurationName=${13:str},",
            "        },",
            "        transformParameters={",
            "            transformType=${14:str},",
            "        },",
            "        workerType=${14:str},",
            ")"
        ],
        "description": [
            "Construct: glue.CfnMLTransform",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnMLTransform"
        ],
        "prefix": "l1-glue-mltransform",
        "scope": "python"
    },
    "glue.CfnPartition": {
        "body": [
            "glue.CfnPartition(self, \"${1:id}\", ",
            "        catalogId=${2:str}, # Required",
            "        databaseName=${3:str}, # Required",
            "        partitionInput={",
            "            parameters=${4:dict},",
            "            values=[],",
            "        },",
            "        tableName=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: glue.CfnPartition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnPartition"
        ],
        "prefix": "l1-glue-partition",
        "scope": "python"
    },
    "glue.CfnRegistry": {
        "body": [
            "glue.CfnRegistry(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: glue.CfnRegistry",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnRegistry",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-glue-registry",
        "scope": "python"
    },
    "glue.CfnSchema": {
        "body": [
            "glue.CfnSchema(self, \"${1:id}\", ",
            "        checkpointVersion={",
            "            isLatest=${2:bool},",
            "            versionNumber=${3:int},",
            "        },",
            "        compatibility=${3:str}, # Required",
            "        dataFormat=${4:str}, # Required",
            "        description=${5:str},",
            "        name=${6:str}, # Required",
            "        registry={",
            "            arn=${7:str},",
            "            name=${8:str},",
            "        },",
            "        schemaDefinition=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: glue.CfnSchema",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnSchema",
            "Attributes: ",
            "  attrInitialSchemaVersionId",
            "  attrArn"
        ],
        "prefix": "l1-glue-schema",
        "scope": "python"
    },
    "glue.CfnSchemaVersion": {
        "body": [
            "glue.CfnSchemaVersion(self, \"${1:id}\", ",
            "        schema={",
            "            registryName=${2:str},",
            "            schemaArn=${3:str},",
            "            schemaName=${4:str},",
            "        },",
            "        schemaDefinition=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: glue.CfnSchemaVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnSchemaVersion",
            "Attributes: ",
            "  attrVersionId"
        ],
        "prefix": "l1-glue-schemaversion",
        "scope": "python"
    },
    "glue.CfnSchemaVersionMetadata": {
        "body": [
            "glue.CfnSchemaVersionMetadata(self, \"${1:id}\", ",
            "        key=${2:str}, # Required",
            "        schemaVersionId=${3:str}, # Required",
            "        value=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: glue.CfnSchemaVersionMetadata",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnSchemaVersionMetadata"
        ],
        "prefix": "l1-glue-schemaversionmetadata",
        "scope": "python"
    },
    "glue.CfnSecurityConfiguration": {
        "body": [
            "glue.CfnSecurityConfiguration(self, \"${1:id}\", ",
            "        encryptionConfiguration={",
            "        },",
            "        name=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: glue.CfnSecurityConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnSecurityConfiguration"
        ],
        "prefix": "l1-glue-securityconfiguration",
        "scope": "python"
    },
    "glue.CfnTable": {
        "body": [
            "glue.CfnTable(self, \"${1:id}\", ",
            "        catalogId=${2:str}, # Required",
            "        databaseName=${3:str}, # Required",
            "        openTableFormatInput={",
            "        },",
            "        tableInput={",
            "            description=${5:str},",
            "            name=${6:str},",
            "            owner=${7:str},",
            "            parameters=${8:dict},",
            "            partitionKeys=[],",
            "            retention=${10:int},",
            "            tableType=${12:str},",
            "            viewExpandedText=${14:str},",
            "            viewOriginalText=${15:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: glue.CfnTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnTable"
        ],
        "prefix": "l1-glue-table",
        "scope": "python"
    },
    "glue.CfnTableOptimizer": {
        "body": [
            "glue.CfnTableOptimizer(self, \"${1:id}\", ",
            "        catalogId=${2:str}, # Required",
            "        databaseName=${3:str}, # Required",
            "        tableName=${4:str}, # Required",
            "        tableOptimizerConfiguration={",
            "            enabled=${5:bool},",
            "            roleArn=${6:str},",
            "        },",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: glue.CfnTableOptimizer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnTableOptimizer"
        ],
        "prefix": "l1-glue-tableoptimizer",
        "scope": "python"
    },
    "glue.CfnTrigger": {
        "body": [
            "glue.CfnTrigger(self, \"${1:id}\", ",
            "        actions=[], # Required",
            "        description=${3:str},",
            "        eventBatchingCondition={",
            "            batchSize=${4:int},",
            "            batchWindow=${5:int},",
            "        },",
            "        name=${5:str},",
            "        predicate={",
            "            conditions=[],",
            "            logical=${7:str},",
            "        },",
            "        schedule=${7:str},",
            "        startOnCreation=${8:bool},",
            "        tags=${9:dict},",
            "        type=${10:str}, # Required",
            "        workflowName=${11:str},",
            ")"
        ],
        "description": [
            "Construct: glue.CfnTrigger",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnTrigger"
        ],
        "prefix": "l1-glue-trigger",
        "scope": "python"
    },
    "glue.CfnWorkflow": {
        "body": [
            "glue.CfnWorkflow(self, \"${1:id}\", ",
            "        defaultRunProperties=${2:dict},",
            "        description=${3:str},",
            "        maxConcurrentRuns=${4:int},",
            "        name=${5:str},",
            "        tags=${6:dict},",
            ")"
        ],
        "description": [
            "Construct: glue.CfnWorkflow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-glue.CfnWorkflow"
        ],
        "prefix": "l1-glue-workflow",
        "scope": "python"
    },
    "grafana.CfnWorkspace": {
        "body": [
            "grafana.CfnWorkspace(self, \"${1:id}\", ",
            "        accountAccessType=${2:str}, # Required",
            "        authenticationProviders=[], # Required",
            "        clientToken=${4:str},",
            "        dataSources=[],",
            "        description=${6:str},",
            "        grafanaVersion=${7:str},",
            "        name=${8:str},",
            "        networkAccessControl={",
            "            prefixListIds=[],",
            "            vpceIds=[],",
            "        },",
            "        notificationDestinations=[],",
            "        organizationRoleName=${11:str},",
            "        organizationalUnits=[],",
            "        permissionType=${13:str}, # Required",
            "        pluginAdminEnabled=${14:bool},",
            "        roleArn=${15:str},",
            "        samlConfiguration={",
            "            allowedOrganizations=[],",
            "            loginValidityDuration=${19:float},",
            "        },",
            "        stackSetName=${17:str},",
            "        vpcConfiguration={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: grafana.CfnWorkspace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-grafana.CfnWorkspace",
            "Attributes: ",
            "  attrStatus",
            "  attrGrafanaVersion",
            "  attrCreationTimestamp",
            "  attrEndpoint",
            "  attrSsoClientId",
            "  attrId",
            "  attrSamlConfigurationStatus",
            "  attrModificationTimestamp"
        ],
        "prefix": "l1-grafana-workspace",
        "scope": "python"
    },
    "greengrass.CfnConnectorDefinition": {
        "body": [
            "greengrass.CfnConnectorDefinition(self, \"${1:id}\", ",
            "        initialVersion={",
            "            connectors=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnConnectorDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnConnectorDefinition",
            "Attributes: ",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-connectordefinition",
        "scope": "python"
    },
    "greengrass.CfnConnectorDefinitionVersion": {
        "body": [
            "greengrass.CfnConnectorDefinitionVersion(self, \"${1:id}\", ",
            "        connectorDefinitionId=${2:str}, # Required",
            "        connectors=[], # Required",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnConnectorDefinitionVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnConnectorDefinitionVersion"
        ],
        "prefix": "l1-greengrass-connectordefinitionversion",
        "scope": "python"
    },
    "greengrass.CfnCoreDefinition": {
        "body": [
            "greengrass.CfnCoreDefinition(self, \"${1:id}\", ",
            "        initialVersion={",
            "            cores=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnCoreDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnCoreDefinition",
            "Attributes: ",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-coredefinition",
        "scope": "python"
    },
    "greengrass.CfnCoreDefinitionVersion": {
        "body": [
            "greengrass.CfnCoreDefinitionVersion(self, \"${1:id}\", ",
            "        coreDefinitionId=${2:str}, # Required",
            "        cores=[], # Required",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnCoreDefinitionVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnCoreDefinitionVersion"
        ],
        "prefix": "l1-greengrass-coredefinitionversion",
        "scope": "python"
    },
    "greengrass.CfnDeviceDefinition": {
        "body": [
            "greengrass.CfnDeviceDefinition(self, \"${1:id}\", ",
            "        initialVersion={",
            "            devices=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnDeviceDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnDeviceDefinition",
            "Attributes: ",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-devicedefinition",
        "scope": "python"
    },
    "greengrass.CfnDeviceDefinitionVersion": {
        "body": [
            "greengrass.CfnDeviceDefinitionVersion(self, \"${1:id}\", ",
            "        deviceDefinitionId=${2:str}, # Required",
            "        devices=[], # Required",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnDeviceDefinitionVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnDeviceDefinitionVersion"
        ],
        "prefix": "l1-greengrass-devicedefinitionversion",
        "scope": "python"
    },
    "greengrass.CfnFunctionDefinition": {
        "body": [
            "greengrass.CfnFunctionDefinition(self, \"${1:id}\", ",
            "        initialVersion={",
            "            functions=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnFunctionDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnFunctionDefinition",
            "Attributes: ",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-functiondefinition",
        "scope": "python"
    },
    "greengrass.CfnFunctionDefinitionVersion": {
        "body": [
            "greengrass.CfnFunctionDefinitionVersion(self, \"${1:id}\", ",
            "        defaultConfig={",
            "        },",
            "        functionDefinitionId=${3:str}, # Required",
            "        functions=[], # Required",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnFunctionDefinitionVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnFunctionDefinitionVersion"
        ],
        "prefix": "l1-greengrass-functiondefinitionversion",
        "scope": "python"
    },
    "greengrass.CfnGroup": {
        "body": [
            "greengrass.CfnGroup(self, \"${1:id}\", ",
            "        initialVersion={",
            "            connectorDefinitionVersionArn=${2:str},",
            "            coreDefinitionVersionArn=${3:str},",
            "            deviceDefinitionVersionArn=${4:str},",
            "            functionDefinitionVersionArn=${5:str},",
            "            loggerDefinitionVersionArn=${6:str},",
            "            resourceDefinitionVersionArn=${7:str},",
            "            subscriptionDefinitionVersionArn=${8:str},",
            "        },",
            "        name=${3:str}, # Required",
            "        roleArn=${4:str},",
            "        tags=${5:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnGroup",
            "Attributes: ",
            "  attrRoleAttachedAt",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrRoleArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-group",
        "scope": "python"
    },
    "greengrass.CfnGroupVersion": {
        "body": [
            "greengrass.CfnGroupVersion(self, \"${1:id}\", ",
            "        connectorDefinitionVersionArn=${2:str},",
            "        coreDefinitionVersionArn=${3:str},",
            "        deviceDefinitionVersionArn=${4:str},",
            "        functionDefinitionVersionArn=${5:str},",
            "        groupId=${6:str}, # Required",
            "        loggerDefinitionVersionArn=${7:str},",
            "        resourceDefinitionVersionArn=${8:str},",
            "        subscriptionDefinitionVersionArn=${9:str},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnGroupVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnGroupVersion"
        ],
        "prefix": "l1-greengrass-groupversion",
        "scope": "python"
    },
    "greengrass.CfnLoggerDefinition": {
        "body": [
            "greengrass.CfnLoggerDefinition(self, \"${1:id}\", ",
            "        initialVersion={",
            "            loggers=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnLoggerDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnLoggerDefinition",
            "Attributes: ",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-loggerdefinition",
        "scope": "python"
    },
    "greengrass.CfnLoggerDefinitionVersion": {
        "body": [
            "greengrass.CfnLoggerDefinitionVersion(self, \"${1:id}\", ",
            "        loggerDefinitionId=${2:str}, # Required",
            "        loggers=[], # Required",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnLoggerDefinitionVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnLoggerDefinitionVersion"
        ],
        "prefix": "l1-greengrass-loggerdefinitionversion",
        "scope": "python"
    },
    "greengrass.CfnResourceDefinition": {
        "body": [
            "greengrass.CfnResourceDefinition(self, \"${1:id}\", ",
            "        initialVersion={",
            "            resources=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnResourceDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnResourceDefinition",
            "Attributes: ",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-resourcedefinition",
        "scope": "python"
    },
    "greengrass.CfnResourceDefinitionVersion": {
        "body": [
            "greengrass.CfnResourceDefinitionVersion(self, \"${1:id}\", ",
            "        resourceDefinitionId=${2:str}, # Required",
            "        resources=[], # Required",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnResourceDefinitionVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnResourceDefinitionVersion"
        ],
        "prefix": "l1-greengrass-resourcedefinitionversion",
        "scope": "python"
    },
    "greengrass.CfnSubscriptionDefinition": {
        "body": [
            "greengrass.CfnSubscriptionDefinition(self, \"${1:id}\", ",
            "        initialVersion={",
            "            subscriptions=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=${4:dict},",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnSubscriptionDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnSubscriptionDefinition",
            "Attributes: ",
            "  attrLatestVersionArn",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-greengrass-subscriptiondefinition",
        "scope": "python"
    },
    "greengrass.CfnSubscriptionDefinitionVersion": {
        "body": [
            "greengrass.CfnSubscriptionDefinitionVersion(self, \"${1:id}\", ",
            "        subscriptionDefinitionId=${2:str}, # Required",
            "        subscriptions=[], # Required",
            ")"
        ],
        "description": [
            "Construct: greengrass.CfnSubscriptionDefinitionVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrass.CfnSubscriptionDefinitionVersion"
        ],
        "prefix": "l1-greengrass-subscriptiondefinitionversion",
        "scope": "python"
    },
    "greengrassv2.CfnComponentVersion": {
        "body": [
            "greengrassv2.CfnComponentVersion(self, \"${1:id}\", ",
            "        inlineRecipe=${2:str},",
            "        lambdaFunction={",
            "            componentName=${5:str},",
            "            componentPlatforms=[],",
            "            componentVersion=${7:str},",
            "            lambdaArn=${8:str},",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: greengrassv2.CfnComponentVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrassv2.CfnComponentVersion",
            "Attributes: ",
            "  attrComponentName",
            "  attrArn",
            "  attrComponentVersion"
        ],
        "prefix": "l1-greengrassv2-componentversion",
        "scope": "python"
    },
    "greengrassv2.CfnDeployment": {
        "body": [
            "greengrassv2.CfnDeployment(self, \"${1:id}\", ",
            "        components={",
            "        },",
            "        deploymentName=${3:str},",
            "        deploymentPolicies={",
            "            failureHandlingPolicy=${6:str},",
            "        },",
            "        iotJobConfiguration={",
            "        },",
            "        parentTargetArn=${6:str},",
            "        tags={",
            "        },",
            "        targetArn=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: greengrassv2.CfnDeployment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-greengrassv2.CfnDeployment",
            "Attributes: ",
            "  attrDeploymentId"
        ],
        "prefix": "l1-greengrassv2-deployment",
        "scope": "python"
    },
    "groundstation.CfnConfig": {
        "body": [
            "groundstation.CfnConfig(self, \"${1:id}\", ",
            "        configData={",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: groundstation.CfnConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-groundstation.CfnConfig",
            "Attributes: ",
            "  attrType",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-groundstation-config",
        "scope": "python"
    },
    "groundstation.CfnDataflowEndpointGroup": {
        "body": [
            "groundstation.CfnDataflowEndpointGroup(self, \"${1:id}\", ",
            "        contactPostPassDurationSeconds=${2:int},",
            "        contactPrePassDurationSeconds=${3:int},",
            "        endpointDetails=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: groundstation.CfnDataflowEndpointGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-groundstation.CfnDataflowEndpointGroup",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-groundstation-dataflowendpointgroup",
        "scope": "python"
    },
    "groundstation.CfnMissionProfile": {
        "body": [
            "groundstation.CfnMissionProfile(self, \"${1:id}\", ",
            "        contactPostPassDurationSeconds=${2:int},",
            "        contactPrePassDurationSeconds=${3:int},",
            "        dataflowEdges=[], # Required",
            "        minimumViableContactDurationSeconds=${5:int}, # Required",
            "        name=${6:str}, # Required",
            "        streamsKmsKey={",
            "            kmsAliasArn=${7:str},",
            "            kmsKeyArn=${8:str},",
            "        },",
            "        streamsKmsRole=${8:str},",
            "        tags=[],",
            "        trackingConfigArn=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: groundstation.CfnMissionProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-groundstation.CfnMissionProfile",
            "Attributes: ",
            "  attrRegion",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-groundstation-missionprofile",
        "scope": "python"
    },
    "guardduty.CfnDetector": {
        "body": [
            "guardduty.CfnDetector(self, \"${1:id}\", ",
            "        dataSources={",
            "        },",
            "        enable=${3:bool}, # Required",
            "        features=[],",
            "        findingPublishingFrequency=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: guardduty.CfnDetector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-guardduty.CfnDetector",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-guardduty-detector",
        "scope": "python"
    },
    "guardduty.CfnFilter": {
        "body": [
            "guardduty.CfnFilter(self, \"${1:id}\", ",
            "        action=${2:str},",
            "        description=${3:str},",
            "        detectorId=${4:str}, # Required",
            "        findingCriteria={",
            "        },",
            "        name=${6:str}, # Required",
            "        rank=${7:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: guardduty.CfnFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-guardduty.CfnFilter"
        ],
        "prefix": "l1-guardduty-filter",
        "scope": "python"
    },
    "guardduty.CfnIPSet": {
        "body": [
            "guardduty.CfnIPSet(self, \"${1:id}\", ",
            "        activate=${2:bool},",
            "        detectorId=${3:str},",
            "        format=${4:str}, # Required",
            "        location=${5:str}, # Required",
            "        name=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: guardduty.CfnIPSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-guardduty.CfnIPSet",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-guardduty-ipset",
        "scope": "python"
    },
    "guardduty.CfnMalwareProtectionPlan": {
        "body": [
            "guardduty.CfnMalwareProtectionPlan(self, \"${1:id}\", ",
            "        actions={",
            "        },",
            "        protectedResource={",
            "        },",
            "        role=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: guardduty.CfnMalwareProtectionPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-guardduty.CfnMalwareProtectionPlan",
            "Attributes: ",
            "  attrStatus",
            "  attrStatusReasons",
            "  attrCreatedAt",
            "  attrMalwareProtectionPlanId",
            "  attrArn"
        ],
        "prefix": "l1-guardduty-malwareprotectionplan",
        "scope": "python"
    },
    "guardduty.CfnMaster": {
        "body": [
            "guardduty.CfnMaster(self, \"${1:id}\", ",
            "        detectorId=${2:str}, # Required",
            "        invitationId=${3:str},",
            "        masterId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: guardduty.CfnMaster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-guardduty.CfnMaster"
        ],
        "prefix": "l1-guardduty-master",
        "scope": "python"
    },
    "guardduty.CfnMember": {
        "body": [
            "guardduty.CfnMember(self, \"${1:id}\", ",
            "        detectorId=${2:str},",
            "        disableEmailNotification=${3:bool},",
            "        email=${4:str}, # Required",
            "        memberId=${5:str},",
            "        message=${6:str},",
            "        status=${7:str},",
            ")"
        ],
        "description": [
            "Construct: guardduty.CfnMember",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-guardduty.CfnMember"
        ],
        "prefix": "l1-guardduty-member",
        "scope": "python"
    },
    "guardduty.CfnThreatIntelSet": {
        "body": [
            "guardduty.CfnThreatIntelSet(self, \"${1:id}\", ",
            "        activate=${2:bool},",
            "        detectorId=${3:str},",
            "        format=${4:str}, # Required",
            "        location=${5:str}, # Required",
            "        name=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: guardduty.CfnThreatIntelSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-guardduty.CfnThreatIntelSet",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-guardduty-threatintelset",
        "scope": "python"
    },
    "healthimaging.CfnDatastore": {
        "body": [
            "healthimaging.CfnDatastore(self, \"${1:id}\", ",
            "        datastoreName=${2:str},",
            "        kmsKeyArn=${3:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: healthimaging.CfnDatastore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-healthimaging.CfnDatastore",
            "Attributes: ",
            "  attrDatastoreArn",
            "  attrDatastoreId",
            "  attrDatastoreStatus",
            "  attrCreatedAt",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-healthimaging-datastore",
        "scope": "python"
    },
    "healthlake.CfnFHIRDatastore": {
        "body": [
            "healthlake.CfnFHIRDatastore(self, \"${1:id}\", ",
            "        datastoreName=${2:str},",
            "        datastoreTypeVersion=${3:str}, # Required",
            "        identityProviderConfiguration={",
            "            authorizationStrategy=${4:str},",
            "            fineGrainedAuthorizationEnabled=${5:bool},",
            "            idpLambdaArn=${6:str},",
            "            metadata=${7:str},",
            "        },",
            "        preloadDataConfig={",
            "            preloadDataType=${5:str},",
            "        },",
            "        sseConfiguration={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: healthlake.CfnFHIRDatastore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-healthlake.CfnFHIRDatastore",
            "Attributes: ",
            "  attrDatastoreArn",
            "  attrCreatedAt.Nanos",
            "  attrDatastoreId",
            "  attrCreatedAt",
            "  attrDatastoreStatus",
            "  attrDatastoreEndpoint",
            "  attrCreatedAt.Seconds"
        ],
        "prefix": "l1-healthlake-fhirdatastore",
        "scope": "python"
    },
    "iam.CfnAccessKey": {
        "body": [
            "iam.CfnAccessKey(self, \"${1:id}\", ",
            "        serial=${2:int},",
            "        status=${3:str},",
            "        userName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iam.CfnAccessKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnAccessKey",
            "Attributes: ",
            "  attrSecretAccessKey"
        ],
        "prefix": "l1-iam-accesskey",
        "scope": "python"
    },
    "iam.CfnGroup": {
        "body": [
            "iam.CfnGroup(self, \"${1:id}\", ",
            "        groupName=${2:str},",
            "        managedPolicyArns=[],",
            "        path=${4:str},",
            "        policies=[],",
            ")"
        ],
        "description": [
            "Construct: iam.CfnGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iam-group",
        "scope": "python"
    },
    "iam.CfnGroupPolicy": {
        "body": [
            "iam.CfnGroupPolicy(self, \"${1:id}\", ",
            "        groupName=${2:str}, # Required",
            "        policyDocument=${3:dict},",
            "        policyName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iam.CfnGroupPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnGroupPolicy"
        ],
        "prefix": "l1-iam-grouppolicy",
        "scope": "python"
    },
    "iam.CfnInstanceProfile": {
        "body": [
            "iam.CfnInstanceProfile(self, \"${1:id}\", ",
            "        instanceProfileName=${2:str},",
            "        path=${3:str},",
            "        roles=[], # Required",
            ")"
        ],
        "description": [
            "Construct: iam.CfnInstanceProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnInstanceProfile",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iam-instanceprofile",
        "scope": "python"
    },
    "iam.CfnManagedPolicy": {
        "body": [
            "iam.CfnManagedPolicy(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        groups=[],",
            "        managedPolicyName=${4:str},",
            "        path=${5:str},",
            "        policyDocument=${6:dict}, # Required",
            "        roles=[],",
            "        users=[],",
            ")"
        ],
        "description": [
            "Construct: iam.CfnManagedPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnManagedPolicy",
            "Attributes: ",
            "  attrIsAttachable",
            "  attrUpdateDate",
            "  attrPermissionsBoundaryUsageCount",
            "  attrAttachmentCount",
            "  attrPolicyArn",
            "  attrDefaultVersionId",
            "  attrCreateDate",
            "  attrPolicyId"
        ],
        "prefix": "l1-iam-managedpolicy",
        "scope": "python"
    },
    "iam.CfnOIDCProvider": {
        "body": [
            "iam.CfnOIDCProvider(self, \"${1:id}\", ",
            "        clientIdList=[],",
            "        tags=[],",
            "        thumbprintList=[], # Required",
            "        url=${5:str},",
            ")"
        ],
        "description": [
            "Construct: iam.CfnOIDCProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnOIDCProvider",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iam-oidcprovider",
        "scope": "python"
    },
    "iam.CfnPolicy": {
        "body": [
            "iam.CfnPolicy(self, \"${1:id}\", ",
            "        groups=[],",
            "        policyDocument=${3:dict}, # Required",
            "        policyName=${4:str}, # Required",
            "        roles=[],",
            "        users=[],",
            ")"
        ],
        "description": [
            "Construct: iam.CfnPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnPolicy",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-iam-policy",
        "scope": "python"
    },
    "iam.CfnRole": {
        "body": [
            "iam.CfnRole(self, \"${1:id}\", ",
            "        assumeRolePolicyDocument=${2:dict}, # Required",
            "        description=${3:str},",
            "        managedPolicyArns=[],",
            "        maxSessionDuration=${5:int},",
            "        path=${6:str},",
            "        permissionsBoundary=${7:str},",
            "        policies=[],",
            "        roleName=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iam.CfnRole",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnRole",
            "Attributes: ",
            "  attrArn",
            "  attrRoleId"
        ],
        "prefix": "l1-iam-role",
        "scope": "python"
    },
    "iam.CfnRolePolicy": {
        "body": [
            "iam.CfnRolePolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:dict},",
            "        policyName=${3:str}, # Required",
            "        roleName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iam.CfnRolePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnRolePolicy"
        ],
        "prefix": "l1-iam-rolepolicy",
        "scope": "python"
    },
    "iam.CfnSAMLProvider": {
        "body": [
            "iam.CfnSAMLProvider(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        samlMetadataDocument=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iam.CfnSAMLProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnSAMLProvider",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iam-samlprovider",
        "scope": "python"
    },
    "iam.CfnServerCertificate": {
        "body": [
            "iam.CfnServerCertificate(self, \"${1:id}\", ",
            "        certificateBody=${2:str},",
            "        certificateChain=${3:str},",
            "        path=${4:str},",
            "        privateKey=${5:str},",
            "        serverCertificateName=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iam.CfnServerCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnServerCertificate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iam-servercertificate",
        "scope": "python"
    },
    "iam.CfnServiceLinkedRole": {
        "body": [
            "iam.CfnServiceLinkedRole(self, \"${1:id}\", ",
            "        aWSServiceName=${2:str},",
            "        customSuffix=${3:str},",
            "        description=${4:str},",
            ")"
        ],
        "description": [
            "Construct: iam.CfnServiceLinkedRole",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnServiceLinkedRole",
            "Attributes: ",
            "  attrRoleName"
        ],
        "prefix": "l1-iam-servicelinkedrole",
        "scope": "python"
    },
    "iam.CfnUser": {
        "body": [
            "iam.CfnUser(self, \"${1:id}\", ",
            "        groups=[],",
            "        loginProfile={",
            "            password=${3:str},",
            "            passwordResetRequired=${4:bool},",
            "        },",
            "        managedPolicyArns=[],",
            "        path=${5:str},",
            "        permissionsBoundary=${6:str},",
            "        policies=[],",
            "        tags=[],",
            "        userName=${9:str},",
            ")"
        ],
        "description": [
            "Construct: iam.CfnUser",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnUser",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iam-user",
        "scope": "python"
    },
    "iam.CfnUserPolicy": {
        "body": [
            "iam.CfnUserPolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:dict},",
            "        policyName=${3:str}, # Required",
            "        userName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iam.CfnUserPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnUserPolicy"
        ],
        "prefix": "l1-iam-userpolicy",
        "scope": "python"
    },
    "iam.CfnUserToGroupAddition": {
        "body": [
            "iam.CfnUserToGroupAddition(self, \"${1:id}\", ",
            "        groupName=${2:str}, # Required",
            "        users=[], # Required",
            ")"
        ],
        "description": [
            "Construct: iam.CfnUserToGroupAddition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnUserToGroupAddition"
        ],
        "prefix": "l1-iam-usertogroupaddition",
        "scope": "python"
    },
    "iam.CfnVirtualMFADevice": {
        "body": [
            "iam.CfnVirtualMFADevice(self, \"${1:id}\", ",
            "        path=${2:str},",
            "        tags=[],",
            "        users=[], # Required",
            "        virtualMfaDeviceName=${5:str},",
            ")"
        ],
        "description": [
            "Construct: iam.CfnVirtualMFADevice",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.CfnVirtualMFADevice",
            "Attributes: ",
            "  attrSerialNumber"
        ],
        "prefix": "l1-iam-virtualmfadevice",
        "scope": "python"
    },
    "identitystore.CfnGroup": {
        "body": [
            "identitystore.CfnGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        displayName=${3:str}, # Required",
            "        identityStoreId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: identitystore.CfnGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-identitystore.CfnGroup",
            "Attributes: ",
            "  attrGroupId"
        ],
        "prefix": "l1-identitystore-group",
        "scope": "python"
    },
    "identitystore.CfnGroupMembership": {
        "body": [
            "identitystore.CfnGroupMembership(self, \"${1:id}\", ",
            "        groupId=${2:str}, # Required",
            "        identityStoreId=${3:str}, # Required",
            "        memberId={",
            "            userId=${4:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: identitystore.CfnGroupMembership",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-identitystore.CfnGroupMembership",
            "Attributes: ",
            "  attrMembershipId"
        ],
        "prefix": "l1-identitystore-groupmembership",
        "scope": "python"
    },
    "imagebuilder.CfnComponent": {
        "body": [
            "imagebuilder.CfnComponent(self, \"${1:id}\", ",
            "        changeDescription=${2:str},",
            "        data=${3:str},",
            "        description=${4:str},",
            "        kmsKeyId=${5:str},",
            "        name=${6:str}, # Required",
            "        platform=${7:str}, # Required",
            "        supportedOsVersions=[],",
            "        tags={",
            "        },",
            "        uri=${10:str},",
            "        version=${11:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnComponent",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnComponent",
            "Attributes: ",
            "  attrType",
            "  attrEncrypted",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-imagebuilder-component",
        "scope": "python"
    },
    "imagebuilder.CfnContainerRecipe": {
        "body": [
            "imagebuilder.CfnContainerRecipe(self, \"${1:id}\", ",
            "        components=[], # Required",
            "        containerType=${3:str}, # Required",
            "        description=${4:str},",
            "        dockerfileTemplateData=${5:str},",
            "        dockerfileTemplateUri=${6:str},",
            "        imageOsVersionOverride=${7:str},",
            "        instanceConfiguration={",
            "            blockDeviceMappings=[],",
            "            image=${9:str},",
            "        },",
            "        kmsKeyId=${9:str},",
            "        name=${10:str}, # Required",
            "        parentImage=${11:str}, # Required",
            "        platformOverride=${12:str},",
            "        tags={",
            "        },",
            "        targetRepository={",
            "            repositoryName=${14:str},",
            "            service=${15:str},",
            "        },",
            "        version=${15:str}, # Required",
            "        workingDirectory=${16:str},",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnContainerRecipe",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnContainerRecipe",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-imagebuilder-containerrecipe",
        "scope": "python"
    },
    "imagebuilder.CfnDistributionConfiguration": {
        "body": [
            "imagebuilder.CfnDistributionConfiguration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        distributions=[], # Required",
            "        name=${4:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnDistributionConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnDistributionConfiguration",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-imagebuilder-distributionconfiguration",
        "scope": "python"
    },
    "imagebuilder.CfnImage": {
        "body": [
            "imagebuilder.CfnImage(self, \"${1:id}\", ",
            "        containerRecipeArn=${2:str},",
            "        distributionConfigurationArn=${3:str},",
            "        enhancedImageMetadataEnabled=${4:bool},",
            "        executionRole=${5:str},",
            "        imageRecipeArn=${6:str},",
            "        imageScanningConfiguration={",
            "            imageScanningEnabled=${8:bool},",
            "        },",
            "        imageTestsConfiguration={",
            "            imageTestsEnabled=${8:bool},",
            "            timeoutMinutes=${9:int},",
            "        },",
            "        infrastructureConfigurationArn=${9:str}, # Required",
            "        tags={",
            "        },",
            "        workflows=[],",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnImage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnImage",
            "Attributes: ",
            "  attrImageId",
            "  attrImageUri",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-imagebuilder-image",
        "scope": "python"
    },
    "imagebuilder.CfnImagePipeline": {
        "body": [
            "imagebuilder.CfnImagePipeline(self, \"${1:id}\", ",
            "        containerRecipeArn=${2:str},",
            "        description=${3:str},",
            "        distributionConfigurationArn=${4:str},",
            "        enhancedImageMetadataEnabled=${5:bool},",
            "        executionRole=${6:str},",
            "        imageRecipeArn=${7:str},",
            "        imageScanningConfiguration={",
            "            imageScanningEnabled=${9:bool},",
            "        },",
            "        imageTestsConfiguration={",
            "            imageTestsEnabled=${9:bool},",
            "            timeoutMinutes=${10:int},",
            "        },",
            "        infrastructureConfigurationArn=${10:str}, # Required",
            "        name=${11:str}, # Required",
            "        schedule={",
            "            pipelineExecutionStartCondition=${12:str},",
            "            scheduleExpression=${13:str},",
            "        },",
            "        status=${13:str},",
            "        tags={",
            "        },",
            "        workflows=[],",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnImagePipeline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnImagePipeline",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-imagebuilder-imagepipeline",
        "scope": "python"
    },
    "imagebuilder.CfnImageRecipe": {
        "body": [
            "imagebuilder.CfnImageRecipe(self, \"${1:id}\", ",
            "        additionalInstanceConfiguration={",
            "            userDataOverride=${3:str},",
            "        },",
            "        blockDeviceMappings=[],",
            "        components=[], # Required",
            "        description=${5:str},",
            "        name=${6:str}, # Required",
            "        parentImage=${7:str}, # Required",
            "        tags={",
            "        },",
            "        version=${9:str}, # Required",
            "        workingDirectory=${10:str},",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnImageRecipe",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnImageRecipe",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-imagebuilder-imagerecipe",
        "scope": "python"
    },
    "imagebuilder.CfnInfrastructureConfiguration": {
        "body": [
            "imagebuilder.CfnInfrastructureConfiguration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        instanceMetadataOptions={",
            "            httpPutResponseHopLimit=${3:int},",
            "            httpTokens=${4:str},",
            "        },",
            "        instanceProfileName=${4:str}, # Required",
            "        instanceTypes=[],",
            "        keyPair=${6:str},",
            "        logging={",
            "        },",
            "        name=${8:str}, # Required",
            "        resourceTags={",
            "        },",
            "        securityGroupIds=[],",
            "        snsTopicArn=${11:str},",
            "        subnetId=${12:str},",
            "        tags={",
            "        },",
            "        terminateInstanceOnFailure=${14:bool},",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnInfrastructureConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnInfrastructureConfiguration",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-imagebuilder-infrastructureconfiguration",
        "scope": "python"
    },
    "imagebuilder.CfnLifecyclePolicy": {
        "body": [
            "imagebuilder.CfnLifecyclePolicy(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        executionRole=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        policyDetails=[], # Required",
            "        resourceSelection={",
            "            recipes=[],",
            "        },",
            "        resourceType=${7:str}, # Required",
            "        status=${8:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnLifecyclePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnLifecyclePolicy",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-imagebuilder-lifecyclepolicy",
        "scope": "python"
    },
    "imagebuilder.CfnWorkflow": {
        "body": [
            "imagebuilder.CfnWorkflow(self, \"${1:id}\", ",
            "        changeDescription=${2:str},",
            "        data=${3:str},",
            "        description=${4:str},",
            "        kmsKeyId=${5:str},",
            "        name=${6:str}, # Required",
            "        tags={",
            "        },",
            "        type=${8:str}, # Required",
            "        uri=${9:str},",
            "        version=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: imagebuilder.CfnWorkflow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-imagebuilder.CfnWorkflow",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-imagebuilder-workflow",
        "scope": "python"
    },
    "inspector.CfnAssessmentTarget": {
        "body": [
            "inspector.CfnAssessmentTarget(self, \"${1:id}\", ",
            "        assessmentTargetName=${2:str},",
            "        resourceGroupArn=${3:str},",
            ")"
        ],
        "description": [
            "Construct: inspector.CfnAssessmentTarget",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-inspector.CfnAssessmentTarget",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-inspector-assessmenttarget",
        "scope": "python"
    },
    "inspector.CfnAssessmentTemplate": {
        "body": [
            "inspector.CfnAssessmentTemplate(self, \"${1:id}\", ",
            "        assessmentTargetArn=${2:str}, # Required",
            "        assessmentTemplateName=${3:str},",
            "        durationInSeconds=${4:int}, # Required",
            "        rulesPackageArns=[], # Required",
            "        userAttributesForFindings=[],",
            ")"
        ],
        "description": [
            "Construct: inspector.CfnAssessmentTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-inspector.CfnAssessmentTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-inspector-assessmenttemplate",
        "scope": "python"
    },
    "inspector.CfnResourceGroup": {
        "body": [
            "inspector.CfnResourceGroup(self, \"${1:id}\", ",
            "        resourceGroupTags=[], # Required",
            ")"
        ],
        "description": [
            "Construct: inspector.CfnResourceGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-inspector.CfnResourceGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-inspector-resourcegroup",
        "scope": "python"
    },
    "inspectorv2.CfnCisScanConfiguration": {
        "body": [
            "inspectorv2.CfnCisScanConfiguration(self, \"${1:id}\", ",
            "        scanName=${2:str},",
            "        schedule={",
            "            oneTime=${5:dict},",
            "        },",
            "        securityLevel=${4:str},",
            "        tags={",
            "        },",
            "        targets={",
            "            accountIds=[],",
            "            targetResourceTags=${7:dict},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: inspectorv2.CfnCisScanConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-inspectorv2.CfnCisScanConfiguration",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-inspectorv2-cisscanconfiguration",
        "scope": "python"
    },
    "inspectorv2.CfnFilter": {
        "body": [
            "inspectorv2.CfnFilter(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        filterAction=${3:str}, # Required",
            "        filterCriteria={",
            "            awsAccountId=[],",
            "            componentId=[],",
            "            componentType=[],",
            "            ec2InstanceImageId=[],",
            "            ec2InstanceSubnetId=[],",
            "            ec2InstanceVpcId=[],",
            "            ecrImageArchitecture=[],",
            "            ecrImageHash=[],",
            "            ecrImagePushedAt=[],",
            "            ecrImageRegistry=[],",
            "            ecrImageRepositoryName=[],",
            "            ecrImageTags=[],",
            "            findingArn=[],",
            "            findingStatus=[],",
            "            findingType=[],",
            "            firstObservedAt=[],",
            "            inspectorScore=[],",
            "            lastObservedAt=[],",
            "            networkProtocol=[],",
            "            portRange=[],",
            "            relatedVulnerabilities=[],",
            "            resourceId=[],",
            "            resourceTags=[],",
            "            resourceType=[],",
            "            severity=[],",
            "            title=[],",
            "            updatedAt=[],",
            "            vendorSeverity=[],",
            "            vulnerabilityId=[],",
            "            vulnerabilitySource=[],",
            "            vulnerablePackages=[],",
            "        },",
            "        name=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: inspectorv2.CfnFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-inspectorv2.CfnFilter",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-inspectorv2-filter",
        "scope": "python"
    },
    "internetmonitor.CfnMonitor": {
        "body": [
            "internetmonitor.CfnMonitor(self, \"${1:id}\", ",
            "        healthEventsConfig={",
            "            availabilityScoreThreshold=${3:float},",
            "            performanceScoreThreshold=${5:float},",
            "        },",
            "        includeLinkedAccounts=${3:bool},",
            "        internetMeasurementsLogDelivery={",
            "        },",
            "        linkedAccountId=${5:str},",
            "        maxCityNetworksToMonitor=${6:int},",
            "        monitorName=${7:str}, # Required",
            "        resources=[],",
            "        resourcesToAdd=[],",
            "        resourcesToRemove=[],",
            "        status=${11:str},",
            "        tags=[],",
            "        trafficPercentageToMonitor=${13:int},",
            ")"
        ],
        "description": [
            "Construct: internetmonitor.CfnMonitor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-internetmonitor.CfnMonitor",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrMonitorArn",
            "  attrCreatedAt",
            "  attrProcessingStatusInfo",
            "  attrProcessingStatus"
        ],
        "prefix": "l1-internetmonitor-monitor",
        "scope": "python"
    },
    "iot.CfnAccountAuditConfiguration": {
        "body": [
            "iot.CfnAccountAuditConfiguration(self, \"${1:id}\", ",
            "        accountId=${2:str}, # Required",
            "        auditCheckConfigurations={",
            "        },",
            "        auditNotificationTargetConfigurations={",
            "        },",
            "        roleArn=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnAccountAuditConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnAccountAuditConfiguration"
        ],
        "prefix": "l1-iot-accountauditconfiguration",
        "scope": "python"
    },
    "iot.CfnAuthorizer": {
        "body": [
            "iot.CfnAuthorizer(self, \"${1:id}\", ",
            "        authorizerFunctionArn=${2:str}, # Required",
            "        authorizerName=${3:str},",
            "        enableCachingForHttp=${4:bool},",
            "        signingDisabled=${5:bool},",
            "        status=${6:str},",
            "        tags=[],",
            "        tokenKeyName=${8:str},",
            "        tokenSigningPublicKeys={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iot.CfnAuthorizer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnAuthorizer",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iot-authorizer",
        "scope": "python"
    },
    "iot.CfnBillingGroup": {
        "body": [
            "iot.CfnBillingGroup(self, \"${1:id}\", ",
            "        billingGroupName=${2:str},",
            "        billingGroupProperties={",
            "            billingGroupDescription=${3:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnBillingGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnBillingGroup",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iot-billinggroup",
        "scope": "python"
    },
    "iot.CfnCACertificate": {
        "body": [
            "iot.CfnCACertificate(self, \"${1:id}\", ",
            "        autoRegistrationStatus=${2:str},",
            "        cACertificatePem=${3:str}, # Required",
            "        certificateMode=${4:str},",
            "        registrationConfig={",
            "            roleArn=${5:str},",
            "            templateBody=${6:str},",
            "            templateName=${7:str},",
            "        },",
            "        removeAutoRegistration=${6:bool},",
            "        status=${7:str}, # Required",
            "        tags=[],",
            "        verificationCertificatePem=${9:str},",
            ")"
        ],
        "description": [
            "Construct: iot.CfnCACertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnCACertificate",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iot-cacertificate",
        "scope": "python"
    },
    "iot.CfnCertificate": {
        "body": [
            "iot.CfnCertificate(self, \"${1:id}\", ",
            "        cACertificatePem=${2:str},",
            "        certificateMode=${3:str},",
            "        certificatePem=${4:str},",
            "        certificateSigningRequest=${5:str},",
            "        status=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnCertificate",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iot-certificate",
        "scope": "python"
    },
    "iot.CfnCertificateProvider": {
        "body": [
            "iot.CfnCertificateProvider(self, \"${1:id}\", ",
            "        accountDefaultForOperations=[], # Required",
            "        certificateProviderName=${3:str},",
            "        lambdaFunctionArn=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnCertificateProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnCertificateProvider",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iot-certificateprovider",
        "scope": "python"
    },
    "iot.CfnCustomMetric": {
        "body": [
            "iot.CfnCustomMetric(self, \"${1:id}\", ",
            "        displayName=${2:str},",
            "        metricName=${3:str},",
            "        metricType=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnCustomMetric",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnCustomMetric",
            "Attributes: ",
            "  attrMetricArn"
        ],
        "prefix": "l1-iot-custommetric",
        "scope": "python"
    },
    "iot.CfnDimension": {
        "body": [
            "iot.CfnDimension(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        stringValues=[], # Required",
            "        tags=[],",
            "        type=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnDimension",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnDimension",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iot-dimension",
        "scope": "python"
    },
    "iot.CfnDomainConfiguration": {
        "body": [
            "iot.CfnDomainConfiguration(self, \"${1:id}\", ",
            "        authorizerConfig={",
            "            allowAuthorizerOverride=${2:bool},",
            "            defaultAuthorizerName=${3:str},",
            "        },",
            "        domainConfigurationName=${3:str},",
            "        domainConfigurationStatus=${4:str},",
            "        domainName=${5:str},",
            "        serverCertificateArns=[],",
            "        serverCertificateConfig={",
            "            enableOCSPCheck=${7:bool},",
            "        },",
            "        serviceType=${8:str},",
            "        tags=[],",
            "        tlsConfig={",
            "            securityPolicy=${10:str},",
            "        },",
            "        validationCertificateArn=${11:str},",
            ")"
        ],
        "description": [
            "Construct: iot.CfnDomainConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnDomainConfiguration",
            "Attributes: ",
            "  attrDomainType",
            "  attrServerCertificates",
            "  attrArn"
        ],
        "prefix": "l1-iot-domainconfiguration",
        "scope": "python"
    },
    "iot.CfnFleetMetric": {
        "body": [
            "iot.CfnFleetMetric(self, \"${1:id}\", ",
            "        aggregationField=${2:str},",
            "        aggregationType={",
            "            name=${3:str},",
            "            values=[],",
            "        },",
            "        description=${4:str},",
            "        indexName=${5:str},",
            "        metricName=${6:str}, # Required",
            "        period=${7:int},",
            "        queryString=${8:str},",
            "        queryVersion=${9:str},",
            "        tags=[],",
            "        unit=${11:str},",
            ")"
        ],
        "description": [
            "Construct: iot.CfnFleetMetric",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnFleetMetric",
            "Attributes: ",
            "  attrMetricArn",
            "  attrCreationDate",
            "  attrLastModifiedDate",
            "  attrVersion"
        ],
        "prefix": "l1-iot-fleetmetric",
        "scope": "python"
    },
    "iot.CfnJobTemplate": {
        "body": [
            "iot.CfnJobTemplate(self, \"${1:id}\", ",
            "        abortConfig={",
            "            criteriaList=[],",
            "        },",
            "        description=${3:str}, # Required",
            "        destinationPackageVersions=[],",
            "        document=${5:str},",
            "        documentSource=${6:str},",
            "        jobArn=${7:str},",
            "        jobExecutionsRetryConfig={",
            "            retryCriteriaList=[],",
            "        },",
            "        jobExecutionsRolloutConfig={",
            "            maximumPerMinute=${10:int},",
            "        },",
            "        jobTemplateId=${10:str}, # Required",
            "        maintenanceWindows=[],",
            "        presignedUrlConfig={",
            "            expiresInSec=${12:int},",
            "            roleArn=${13:str},",
            "        },",
            "        tags=[],",
            "        timeoutConfig={",
            "            inProgressTimeoutInMinutes=${14:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iot.CfnJobTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnJobTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iot-jobtemplate",
        "scope": "python"
    },
    "iot.CfnLogging": {
        "body": [
            "iot.CfnLogging(self, \"${1:id}\", ",
            "        accountId=${2:str}, # Required",
            "        defaultLogLevel=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnLogging",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnLogging"
        ],
        "prefix": "l1-iot-logging",
        "scope": "python"
    },
    "iot.CfnMitigationAction": {
        "body": [
            "iot.CfnMitigationAction(self, \"${1:id}\", ",
            "        actionName=${2:str},",
            "        actionParams={",
            "        },",
            "        roleArn=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnMitigationAction",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnMitigationAction",
            "Attributes: ",
            "  attrMitigationActionArn",
            "  attrMitigationActionId"
        ],
        "prefix": "l1-iot-mitigationaction",
        "scope": "python"
    },
    "iot.CfnPolicy": {
        "body": [
            "iot.CfnPolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:dict}, # Required",
            "        policyName=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnPolicy",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iot-policy",
        "scope": "python"
    },
    "iot.CfnPolicyPrincipalAttachment": {
        "body": [
            "iot.CfnPolicyPrincipalAttachment(self, \"${1:id}\", ",
            "        policyName=${2:str}, # Required",
            "        principal=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnPolicyPrincipalAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnPolicyPrincipalAttachment"
        ],
        "prefix": "l1-iot-policyprincipalattachment",
        "scope": "python"
    },
    "iot.CfnProvisioningTemplate": {
        "body": [
            "iot.CfnProvisioningTemplate(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        enabled=${3:bool},",
            "        preProvisioningHook={",
            "            payloadVersion=${4:str},",
            "            targetArn=${5:str},",
            "        },",
            "        provisioningRoleArn=${5:str}, # Required",
            "        tags=[],",
            "        templateBody=${7:str}, # Required",
            "        templateName=${8:str},",
            "        templateType=${9:str},",
            ")"
        ],
        "description": [
            "Construct: iot.CfnProvisioningTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnProvisioningTemplate",
            "Attributes: ",
            "  attrTemplateArn"
        ],
        "prefix": "l1-iot-provisioningtemplate",
        "scope": "python"
    },
    "iot.CfnResourceSpecificLogging": {
        "body": [
            "iot.CfnResourceSpecificLogging(self, \"${1:id}\", ",
            "        logLevel=${2:str}, # Required",
            "        targetName=${3:str}, # Required",
            "        targetType=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnResourceSpecificLogging",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnResourceSpecificLogging",
            "Attributes: ",
            "  attrTargetId"
        ],
        "prefix": "l1-iot-resourcespecificlogging",
        "scope": "python"
    },
    "iot.CfnRoleAlias": {
        "body": [
            "iot.CfnRoleAlias(self, \"${1:id}\", ",
            "        credentialDurationSeconds=${2:int},",
            "        roleAlias=${3:str},",
            "        roleArn=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnRoleAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnRoleAlias",
            "Attributes: ",
            "  attrRoleAliasArn"
        ],
        "prefix": "l1-iot-rolealias",
        "scope": "python"
    },
    "iot.CfnScheduledAudit": {
        "body": [
            "iot.CfnScheduledAudit(self, \"${1:id}\", ",
            "        dayOfMonth=${2:str},",
            "        dayOfWeek=${3:str},",
            "        frequency=${4:str}, # Required",
            "        scheduledAuditName=${5:str},",
            "        tags=[],",
            "        targetCheckNames=[], # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnScheduledAudit",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnScheduledAudit",
            "Attributes: ",
            "  attrScheduledAuditArn"
        ],
        "prefix": "l1-iot-scheduledaudit",
        "scope": "python"
    },
    "iot.CfnSecurityProfile": {
        "body": [
            "iot.CfnSecurityProfile(self, \"${1:id}\", ",
            "        additionalMetricsToRetainV2=[],",
            "        alertTargets={",
            "        },",
            "        behaviors=[],",
            "        metricsExportConfig={",
            "            mqttTopic=${5:str},",
            "            roleArn=${6:str},",
            "        },",
            "        securityProfileDescription=${6:str},",
            "        securityProfileName=${7:str},",
            "        tags=[],",
            "        targetArns=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnSecurityProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnSecurityProfile",
            "Attributes: ",
            "  attrSecurityProfileArn"
        ],
        "prefix": "l1-iot-securityprofile",
        "scope": "python"
    },
    "iot.CfnSoftwarePackage": {
        "body": [
            "iot.CfnSoftwarePackage(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        packageName=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iot.CfnSoftwarePackage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnSoftwarePackage",
            "Attributes: ",
            "  attrPackageArn"
        ],
        "prefix": "l1-iot-softwarepackage",
        "scope": "python"
    },
    "iot.CfnSoftwarePackageVersion": {
        "body": [
            "iot.CfnSoftwarePackageVersion(self, \"${1:id}\", ",
            "        attributes={",
            "        },",
            "        description=${3:str},",
            "        packageName=${4:str}, # Required",
            "        tags=[],",
            "        versionName=${6:str},",
            ")"
        ],
        "description": [
            "Construct: iot.CfnSoftwarePackageVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnSoftwarePackageVersion",
            "Attributes: ",
            "  attrPackageVersionArn",
            "  attrStatus",
            "  attrErrorReason"
        ],
        "prefix": "l1-iot-softwarepackageversion",
        "scope": "python"
    },
    "iot.CfnThing": {
        "body": [
            "iot.CfnThing(self, \"${1:id}\", ",
            "        attributePayload={",
            "        },",
            "        thingName=${3:str},",
            ")"
        ],
        "description": [
            "Construct: iot.CfnThing",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnThing",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iot-thing",
        "scope": "python"
    },
    "iot.CfnThingGroup": {
        "body": [
            "iot.CfnThingGroup(self, \"${1:id}\", ",
            "        parentGroupName=${2:str},",
            "        queryString=${3:str},",
            "        tags=[],",
            "        thingGroupName=${5:str},",
            "        thingGroupProperties={",
            "            thingGroupDescription=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iot.CfnThingGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnThingGroup",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iot-thinggroup",
        "scope": "python"
    },
    "iot.CfnThingPrincipalAttachment": {
        "body": [
            "iot.CfnThingPrincipalAttachment(self, \"${1:id}\", ",
            "        principal=${2:str}, # Required",
            "        thingName=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot.CfnThingPrincipalAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnThingPrincipalAttachment"
        ],
        "prefix": "l1-iot-thingprincipalattachment",
        "scope": "python"
    },
    "iot.CfnThingType": {
        "body": [
            "iot.CfnThingType(self, \"${1:id}\", ",
            "        deprecateThingType=${2:bool},",
            "        tags=[],",
            "        thingTypeName=${4:str},",
            "        thingTypeProperties={",
            "            searchableAttributes=[],",
            "            thingTypeDescription=${6:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iot.CfnThingType",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnThingType",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iot-thingtype",
        "scope": "python"
    },
    "iot.CfnTopicRule": {
        "body": [
            "iot.CfnTopicRule(self, \"${1:id}\", ",
            "        ruleName=${2:str},",
            "        tags=[],",
            "        topicRulePayload={",
            "            actions=[],",
            "            awsIotSqlVersion=${5:str},",
            "            description=${6:str},",
            "            ruleDisabled=${8:bool},",
            "            sql=${9:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iot.CfnTopicRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnTopicRule",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iot-topicrule",
        "scope": "python"
    },
    "iot.CfnTopicRuleDestination": {
        "body": [
            "iot.CfnTopicRuleDestination(self, \"${1:id}\", ",
            "        httpUrlProperties={",
            "            confirmationUrl=${2:str},",
            "        },",
            "        status=${3:str},",
            "        vpcProperties={",
            "            roleArn=${4:str},",
            "            securityGroups=[],",
            "            subnetIds=[],",
            "            vpcId=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iot.CfnTopicRuleDestination",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot.CfnTopicRuleDestination",
            "Attributes: ",
            "  attrStatusReason",
            "  attrArn"
        ],
        "prefix": "l1-iot-topicruledestination",
        "scope": "python"
    },
    "iot1click.CfnDevice": {
        "body": [
            "iot1click.CfnDevice(self, \"${1:id}\", ",
            "        deviceId=${2:str}, # Required",
            "        enabled=${3:bool}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot1click.CfnDevice",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot1click.CfnDevice",
            "Attributes: ",
            "  attrDeviceId",
            "  attrEnabled",
            "  attrArn"
        ],
        "prefix": "l1-iot1click-device",
        "scope": "python"
    },
    "iot1click.CfnPlacement": {
        "body": [
            "iot1click.CfnPlacement(self, \"${1:id}\", ",
            "        associatedDevices=${2:dict},",
            "        attributes=${3:dict},",
            "        placementName=${4:str},",
            "        projectName=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iot1click.CfnPlacement",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot1click.CfnPlacement",
            "Attributes: ",
            "  attrPlacementName",
            "  attrProjectName"
        ],
        "prefix": "l1-iot1click-placement",
        "scope": "python"
    },
    "iot1click.CfnProject": {
        "body": [
            "iot1click.CfnProject(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        placementTemplate={",
            "            defaultAttributes=${3:dict},",
            "            deviceTemplates=${4:dict},",
            "        },",
            "        projectName=${4:str},",
            ")"
        ],
        "description": [
            "Construct: iot1click.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iot1click.CfnProject",
            "Attributes: ",
            "  attrProjectName",
            "  attrArn"
        ],
        "prefix": "l1-iot1click-project",
        "scope": "python"
    },
    "iotanalytics.CfnChannel": {
        "body": [
            "iotanalytics.CfnChannel(self, \"${1:id}\", ",
            "        channelName=${2:str},",
            "        channelStorage={",
            "            serviceManagedS3=${4:dict},",
            "        },",
            "        retentionPeriod={",
            "            numberOfDays=${4:int},",
            "            unlimited=${5:bool},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotanalytics.CfnChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotanalytics.CfnChannel",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-iotanalytics-channel",
        "scope": "python"
    },
    "iotanalytics.CfnDataset": {
        "body": [
            "iotanalytics.CfnDataset(self, \"${1:id}\", ",
            "        actions=[], # Required",
            "        contentDeliveryRules=[],",
            "        datasetName=${4:str},",
            "        lateDataRules=[],",
            "        retentionPeriod={",
            "            numberOfDays=${6:int},",
            "            unlimited=${7:bool},",
            "        },",
            "        tags=[],",
            "        triggers=[],",
            "        versioningConfiguration={",
            "            maxVersions=${9:int},",
            "            unlimited=${10:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iotanalytics.CfnDataset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotanalytics.CfnDataset",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-iotanalytics-dataset",
        "scope": "python"
    },
    "iotanalytics.CfnDatastore": {
        "body": [
            "iotanalytics.CfnDatastore(self, \"${1:id}\", ",
            "        datastoreName=${2:str},",
            "        datastorePartitions={",
            "            partitions=[],",
            "        },",
            "        datastoreStorage={",
            "            serviceManagedS3=${6:dict},",
            "        },",
            "        fileFormatConfiguration={",
            "            jsonConfiguration=${5:dict},",
            "        },",
            "        retentionPeriod={",
            "            numberOfDays=${6:int},",
            "            unlimited=${7:bool},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotanalytics.CfnDatastore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotanalytics.CfnDatastore",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-iotanalytics-datastore",
        "scope": "python"
    },
    "iotanalytics.CfnPipeline": {
        "body": [
            "iotanalytics.CfnPipeline(self, \"${1:id}\", ",
            "        pipelineActivities=[], # Required",
            "        pipelineName=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotanalytics.CfnPipeline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotanalytics.CfnPipeline",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-iotanalytics-pipeline",
        "scope": "python"
    },
    "iotcoredeviceadvisor.CfnSuiteDefinition": {
        "body": [
            "iotcoredeviceadvisor.CfnSuiteDefinition(self, \"${1:id}\", ",
            "        suiteDefinitionConfiguration={",
            "            devicePermissionRoleArn=${2:str},",
            "            devices=[],",
            "            intendedForQualification=${4:bool},",
            "            rootGroup=${5:str},",
            "            suiteDefinitionName=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotcoredeviceadvisor.CfnSuiteDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotcoredeviceadvisor.CfnSuiteDefinition",
            "Attributes: ",
            "  attrSuiteDefinitionArn",
            "  attrSuiteDefinitionVersion",
            "  attrSuiteDefinitionId"
        ],
        "prefix": "l1-iotcoredeviceadvisor-suitedefinition",
        "scope": "python"
    },
    "iotevents.CfnAlarmModel": {
        "body": [
            "iotevents.CfnAlarmModel(self, \"${1:id}\", ",
            "        alarmCapabilities={",
            "        },",
            "        alarmEventActions={",
            "            alarmActions=[],",
            "        },",
            "        alarmModelDescription=${4:str},",
            "        alarmModelName=${5:str},",
            "        alarmRule={",
            "        },",
            "        key=${7:str},",
            "        roleArn=${8:str}, # Required",
            "        severity=${9:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotevents.CfnAlarmModel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotevents.CfnAlarmModel"
        ],
        "prefix": "l1-iotevents-alarmmodel",
        "scope": "python"
    },
    "iotevents.CfnDetectorModel": {
        "body": [
            "iotevents.CfnDetectorModel(self, \"${1:id}\", ",
            "        detectorModelDefinition={",
            "            initialStateName=${2:str},",
            "            states=[],",
            "        },",
            "        detectorModelDescription=${3:str},",
            "        detectorModelName=${4:str},",
            "        evaluationMethod=${5:str},",
            "        key=${6:str},",
            "        roleArn=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotevents.CfnDetectorModel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotevents.CfnDetectorModel"
        ],
        "prefix": "l1-iotevents-detectormodel",
        "scope": "python"
    },
    "iotevents.CfnInput": {
        "body": [
            "iotevents.CfnInput(self, \"${1:id}\", ",
            "        inputDefinition={",
            "            attributes=[],",
            "        },",
            "        inputDescription=${3:str},",
            "        inputName=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotevents.CfnInput",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotevents.CfnInput"
        ],
        "prefix": "l1-iotevents-input",
        "scope": "python"
    },
    "iotfleethub.CfnApplication": {
        "body": [
            "iotfleethub.CfnApplication(self, \"${1:id}\", ",
            "        applicationDescription=${2:str},",
            "        applicationName=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotfleethub.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotfleethub.CfnApplication",
            "Attributes: ",
            "  attrApplicationUrl",
            "  attrApplicationArn",
            "  attrApplicationState",
            "  attrSsoClientId",
            "  attrApplicationId",
            "  attrApplicationLastUpdateDate",
            "  attrErrorMessage",
            "  attrApplicationCreationDate"
        ],
        "prefix": "l1-iotfleethub-application",
        "scope": "python"
    },
    "iotfleetwise.CfnCampaign": {
        "body": [
            "iotfleetwise.CfnCampaign(self, \"${1:id}\", ",
            "        action=${2:str}, # Required",
            "        collectionScheme={",
            "        },",
            "        compression=${4:str},",
            "        dataDestinationConfigs=[],",
            "        dataExtraDimensions=[],",
            "        description=${7:str},",
            "        diagnosticsMode=${8:str},",
            "        expiryTime=${9:str},",
            "        name=${10:str}, # Required",
            "        postTriggerCollectionDuration=${11:float},",
            "        priority=${12:int},",
            "        signalCatalogArn=${13:str}, # Required",
            "        signalsToCollect=[],",
            "        spoolingMode=${15:str},",
            "        startTime=${16:str},",
            "        tags=[],",
            "        targetArn=${18:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iotfleetwise.CfnCampaign",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotfleetwise.CfnCampaign",
            "Attributes: ",
            "  attrStatus",
            "  attrLastModificationTime",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-iotfleetwise-campaign",
        "scope": "python"
    },
    "iotfleetwise.CfnDecoderManifest": {
        "body": [
            "iotfleetwise.CfnDecoderManifest(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        modelManifestArn=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        networkInterfaces=[],",
            "        signalDecoders=[],",
            "        status=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotfleetwise.CfnDecoderManifest",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotfleetwise.CfnDecoderManifest",
            "Attributes: ",
            "  attrLastModificationTime",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-iotfleetwise-decodermanifest",
        "scope": "python"
    },
    "iotfleetwise.CfnFleet": {
        "body": [
            "iotfleetwise.CfnFleet(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        id=${3:str}, # Required",
            "        signalCatalogArn=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotfleetwise.CfnFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotfleetwise.CfnFleet",
            "Attributes: ",
            "  attrLastModificationTime",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-iotfleetwise-fleet",
        "scope": "python"
    },
    "iotfleetwise.CfnModelManifest": {
        "body": [
            "iotfleetwise.CfnModelManifest(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        nodes=[],",
            "        signalCatalogArn=${5:str}, # Required",
            "        status=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotfleetwise.CfnModelManifest",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotfleetwise.CfnModelManifest",
            "Attributes: ",
            "  attrLastModificationTime",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-iotfleetwise-modelmanifest",
        "scope": "python"
    },
    "iotfleetwise.CfnSignalCatalog": {
        "body": [
            "iotfleetwise.CfnSignalCatalog(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str},",
            "        nodeCounts={",
            "            totalActuators=${4:float},",
            "            totalAttributes=${5:float},",
            "            totalBranches=${6:float},",
            "            totalNodes=${7:float},",
            "            totalSensors=${8:float},",
            "        },",
            "        nodes=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotfleetwise.CfnSignalCatalog",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotfleetwise.CfnSignalCatalog",
            "Attributes: ",
            "  attrLastModificationTime",
            "  attrNodeCounts.TotalNodes",
            "  attrNodeCounts.TotalSensors",
            "  attrNodeCounts.TotalAttributes",
            "  attrNodeCounts.TotalBranches",
            "  attrNodeCounts.TotalActuators",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-iotfleetwise-signalcatalog",
        "scope": "python"
    },
    "iotfleetwise.CfnVehicle": {
        "body": [
            "iotfleetwise.CfnVehicle(self, \"${1:id}\", ",
            "        associationBehavior=${2:str},",
            "        attributes={",
            "        },",
            "        decoderManifestArn=${4:str}, # Required",
            "        modelManifestArn=${5:str}, # Required",
            "        name=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotfleetwise.CfnVehicle",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotfleetwise.CfnVehicle",
            "Attributes: ",
            "  attrLastModificationTime",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-iotfleetwise-vehicle",
        "scope": "python"
    },
    "iotsitewise.CfnAccessPolicy": {
        "body": [
            "iotsitewise.CfnAccessPolicy(self, \"${1:id}\", ",
            "        accessPolicyIdentity={",
            "        },",
            "        accessPolicyPermission=${3:str}, # Required",
            "        accessPolicyResource={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iotsitewise.CfnAccessPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotsitewise.CfnAccessPolicy",
            "Attributes: ",
            "  attrAccessPolicyArn",
            "  attrAccessPolicyId"
        ],
        "prefix": "l1-iotsitewise-accesspolicy",
        "scope": "python"
    },
    "iotsitewise.CfnAsset": {
        "body": [
            "iotsitewise.CfnAsset(self, \"${1:id}\", ",
            "        assetDescription=${2:str},",
            "        assetExternalId=${3:str},",
            "        assetHierarchies=[],",
            "        assetModelId=${5:str}, # Required",
            "        assetName=${6:str}, # Required",
            "        assetProperties=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotsitewise.CfnAsset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotsitewise.CfnAsset",
            "Attributes: ",
            "  attrAssetArn",
            "  attrAssetId"
        ],
        "prefix": "l1-iotsitewise-asset",
        "scope": "python"
    },
    "iotsitewise.CfnAssetModel": {
        "body": [
            "iotsitewise.CfnAssetModel(self, \"${1:id}\", ",
            "        assetModelCompositeModels=[],",
            "        assetModelDescription=${3:str},",
            "        assetModelExternalId=${4:str},",
            "        assetModelHierarchies=[],",
            "        assetModelName=${6:str}, # Required",
            "        assetModelProperties=[],",
            "        assetModelType=${8:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotsitewise.CfnAssetModel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotsitewise.CfnAssetModel",
            "Attributes: ",
            "  attrAssetModelId",
            "  attrAssetModelArn"
        ],
        "prefix": "l1-iotsitewise-assetmodel",
        "scope": "python"
    },
    "iotsitewise.CfnDashboard": {
        "body": [
            "iotsitewise.CfnDashboard(self, \"${1:id}\", ",
            "        dashboardDefinition=${2:str}, # Required",
            "        dashboardDescription=${3:str}, # Required",
            "        dashboardName=${4:str}, # Required",
            "        projectId=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotsitewise.CfnDashboard",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotsitewise.CfnDashboard",
            "Attributes: ",
            "  attrDashboardId",
            "  attrDashboardArn"
        ],
        "prefix": "l1-iotsitewise-dashboard",
        "scope": "python"
    },
    "iotsitewise.CfnGateway": {
        "body": [
            "iotsitewise.CfnGateway(self, \"${1:id}\", ",
            "        gatewayCapabilitySummaries=[],",
            "        gatewayName=${3:str}, # Required",
            "        gatewayPlatform={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotsitewise.CfnGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotsitewise.CfnGateway",
            "Attributes: ",
            "  attrGatewayId"
        ],
        "prefix": "l1-iotsitewise-gateway",
        "scope": "python"
    },
    "iotsitewise.CfnPortal": {
        "body": [
            "iotsitewise.CfnPortal(self, \"${1:id}\", ",
            "        alarms={",
            "            alarmRoleArn=${2:str},",
            "            notificationLambdaArn=${3:str},",
            "        },",
            "        notificationSenderEmail=${3:str},",
            "        portalAuthMode=${4:str},",
            "        portalContactEmail=${5:str}, # Required",
            "        portalDescription=${6:str},",
            "        portalName=${7:str}, # Required",
            "        roleArn=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotsitewise.CfnPortal",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotsitewise.CfnPortal",
            "Attributes: ",
            "  attrPortalArn",
            "  attrPortalStartUrl",
            "  attrPortalId",
            "  attrPortalClientId"
        ],
        "prefix": "l1-iotsitewise-portal",
        "scope": "python"
    },
    "iotsitewise.CfnProject": {
        "body": [
            "iotsitewise.CfnProject(self, \"${1:id}\", ",
            "        assetIds=[],",
            "        portalId=${3:str}, # Required",
            "        projectDescription=${4:str},",
            "        projectName=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotsitewise.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotsitewise.CfnProject",
            "Attributes: ",
            "  attrProjectArn",
            "  attrProjectId"
        ],
        "prefix": "l1-iotsitewise-project",
        "scope": "python"
    },
    "iotthingsgraph.CfnFlowTemplate": {
        "body": [
            "iotthingsgraph.CfnFlowTemplate(self, \"${1:id}\", ",
            "        compatibleNamespaceVersion=${2:float},",
            "        definition={",
            "            language=${3:str},",
            "            text=${4:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iotthingsgraph.CfnFlowTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotthingsgraph.CfnFlowTemplate"
        ],
        "prefix": "l1-iotthingsgraph-flowtemplate",
        "scope": "python"
    },
    "iottwinmaker.CfnComponentType": {
        "body": [
            "iottwinmaker.CfnComponentType(self, \"${1:id}\", ",
            "        componentTypeId=${2:str}, # Required",
            "        compositeComponentTypes={",
            "        },",
            "        description=${4:str},",
            "        extendsFrom=[],",
            "        functions={",
            "        },",
            "        isSingleton=${7:bool},",
            "        propertyDefinitions={",
            "        },",
            "        propertyGroups={",
            "        },",
            "        tags={",
            "        },",
            "        workspaceId=${11:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iottwinmaker.CfnComponentType",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iottwinmaker.CfnComponentType",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationDateTime",
            "  attrStatus.Error.Message",
            "  attrIsSchemaInitialized",
            "  attrStatus.State",
            "  attrStatus.Error",
            "  attrUpdateDateTime",
            "  attrStatus.Error.Code",
            "  attrArn",
            "  attrIsAbstract"
        ],
        "prefix": "l1-iottwinmaker-componenttype",
        "scope": "python"
    },
    "iottwinmaker.CfnEntity": {
        "body": [
            "iottwinmaker.CfnEntity(self, \"${1:id}\", ",
            "        components={",
            "        },",
            "        compositeComponents={",
            "        },",
            "        description=${4:str},",
            "        entityId=${5:str},",
            "        entityName=${6:str}, # Required",
            "        parentEntityId=${7:str},",
            "        tags={",
            "        },",
            "        workspaceId=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iottwinmaker.CfnEntity",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iottwinmaker.CfnEntity",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationDateTime",
            "  attrHasChildEntities",
            "  attrStatus.State",
            "  attrStatus.Error",
            "  attrUpdateDateTime",
            "  attrArn"
        ],
        "prefix": "l1-iottwinmaker-entity",
        "scope": "python"
    },
    "iottwinmaker.CfnScene": {
        "body": [
            "iottwinmaker.CfnScene(self, \"${1:id}\", ",
            "        capabilities=[],",
            "        contentLocation=${3:str}, # Required",
            "        description=${4:str},",
            "        sceneId=${5:str}, # Required",
            "        sceneMetadata={",
            "        },",
            "        tags={",
            "        },",
            "        workspaceId=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iottwinmaker.CfnScene",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iottwinmaker.CfnScene",
            "Attributes: ",
            "  attrCreationDateTime",
            "  attrUpdateDateTime",
            "  attrArn",
            "  attrGeneratedSceneMetadata"
        ],
        "prefix": "l1-iottwinmaker-scene",
        "scope": "python"
    },
    "iottwinmaker.CfnSyncJob": {
        "body": [
            "iottwinmaker.CfnSyncJob(self, \"${1:id}\", ",
            "        syncRole=${2:str}, # Required",
            "        syncSource=${3:str}, # Required",
            "        tags={",
            "        },",
            "        workspaceId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iottwinmaker.CfnSyncJob",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iottwinmaker.CfnSyncJob",
            "Attributes: ",
            "  attrCreationDateTime",
            "  attrState",
            "  attrUpdateDateTime",
            "  attrArn"
        ],
        "prefix": "l1-iottwinmaker-syncjob",
        "scope": "python"
    },
    "iottwinmaker.CfnWorkspace": {
        "body": [
            "iottwinmaker.CfnWorkspace(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        role=${3:str}, # Required",
            "        s3Location=${4:str}, # Required",
            "        tags={",
            "        },",
            "        workspaceId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iottwinmaker.CfnWorkspace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iottwinmaker.CfnWorkspace",
            "Attributes: ",
            "  attrCreationDateTime",
            "  attrUpdateDateTime",
            "  attrArn"
        ],
        "prefix": "l1-iottwinmaker-workspace",
        "scope": "python"
    },
    "iotwireless.CfnDestination": {
        "body": [
            "iotwireless.CfnDestination(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        expression=${3:str}, # Required",
            "        expressionType=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        roleArn=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnDestination",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnDestination",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-destination",
        "scope": "python"
    },
    "iotwireless.CfnDeviceProfile": {
        "body": [
            "iotwireless.CfnDeviceProfile(self, \"${1:id}\", ",
            "        loRaWAN={",
            "            classBTimeout=${2:int},",
            "            classCTimeout=${3:int},",
            "            factoryPresetFreqsList=[],",
            "            macVersion=${5:str},",
            "            maxDutyCycle=${6:int},",
            "            maxEirp=${7:int},",
            "            pingSlotDr=${8:int},",
            "            pingSlotFreq=${9:int},",
            "            pingSlotPeriod=${10:int},",
            "            regParamsRevision=${11:str},",
            "            rfRegion=${12:str},",
            "            rxDataRate2=${13:int},",
            "            rxDelay1=${14:int},",
            "            rxDrOffset1=${15:int},",
            "            rxFreq2=${16:int},",
            "            supports32BitFCnt=${17:bool},",
            "            supportsClassB=${18:bool},",
            "            supportsClassC=${19:bool},",
            "            supportsJoin=${20:bool},",
            "        },",
            "        name=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnDeviceProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnDeviceProfile",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-deviceprofile",
        "scope": "python"
    },
    "iotwireless.CfnFuotaTask": {
        "body": [
            "iotwireless.CfnFuotaTask(self, \"${1:id}\", ",
            "        associateMulticastGroup=${2:str},",
            "        associateWirelessDevice=${3:str},",
            "        description=${4:str},",
            "        disassociateMulticastGroup=${5:str},",
            "        disassociateWirelessDevice=${6:str},",
            "        firmwareUpdateImage=${7:str}, # Required",
            "        firmwareUpdateRole=${8:str}, # Required",
            "        loRaWAN={",
            "            rfRegion=${9:str},",
            "            startTime=${10:str},",
            "        },",
            "        name=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnFuotaTask",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnFuotaTask",
            "Attributes: ",
            "  attrFuotaTaskStatus",
            "  attrLoRaWAN.StartTime",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-fuotatask",
        "scope": "python"
    },
    "iotwireless.CfnMulticastGroup": {
        "body": [
            "iotwireless.CfnMulticastGroup(self, \"${1:id}\", ",
            "        associateWirelessDevice=${2:str},",
            "        description=${3:str},",
            "        disassociateWirelessDevice=${4:str},",
            "        loRaWAN={",
            "            dlClass=${5:str},",
            "            numberOfDevicesInGroup=${6:int},",
            "            numberOfDevicesRequested=${7:int},",
            "            rfRegion=${8:str},",
            "        },",
            "        name=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnMulticastGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnMulticastGroup",
            "Attributes: ",
            "  attrStatus",
            "  attrLoRaWAN.NumberOfDevicesRequested",
            "  attrId",
            "  attrLoRaWAN.NumberOfDevicesInGroup",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-multicastgroup",
        "scope": "python"
    },
    "iotwireless.CfnNetworkAnalyzerConfiguration": {
        "body": [
            "iotwireless.CfnNetworkAnalyzerConfiguration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            "        traceContent={",
            "            logLevel=${5:str},",
            "            wirelessDeviceFrameInfo=${6:str},",
            "        },",
            "        wirelessDevices=[],",
            "        wirelessGateways=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnNetworkAnalyzerConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnNetworkAnalyzerConfiguration",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-networkanalyzerconfiguration",
        "scope": "python"
    },
    "iotwireless.CfnPartnerAccount": {
        "body": [
            "iotwireless.CfnPartnerAccount(self, \"${1:id}\", ",
            "        accountLinked=${2:bool},",
            "        partnerAccountId=${3:str},",
            "        partnerType=${4:str},",
            "        sidewalk={",
            "            appServerPrivateKey=${5:str},",
            "        },",
            "        sidewalkResponse={",
            "            amazonId=${6:str},",
            "            arn=${7:str},",
            "            fingerprint=${8:str},",
            "        },",
            "        sidewalkUpdate={",
            "            appServerPrivateKey=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnPartnerAccount",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnPartnerAccount",
            "Attributes: ",
            "  attrFingerprint",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-partneraccount",
        "scope": "python"
    },
    "iotwireless.CfnServiceProfile": {
        "body": [
            "iotwireless.CfnServiceProfile(self, \"${1:id}\", ",
            "        loRaWAN={",
            "            addGwMetadata=${2:bool},",
            "            channelMask=${3:str},",
            "            devStatusReqFreq=${4:int},",
            "            dlBucketSize=${5:int},",
            "            dlRate=${6:int},",
            "            dlRatePolicy=${7:str},",
            "            drMax=${8:int},",
            "            drMin=${9:int},",
            "            hrAllowed=${10:bool},",
            "            minGwDiversity=${11:int},",
            "            nwkGeoLoc=${12:bool},",
            "            prAllowed=${13:bool},",
            "            raAllowed=${14:bool},",
            "            reportDevStatusBattery=${15:bool},",
            "            reportDevStatusMargin=${16:bool},",
            "            targetPer=${17:int},",
            "            ulBucketSize=${18:int},",
            "            ulRate=${19:int},",
            "            ulRatePolicy=${20:str},",
            "        },",
            "        name=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnServiceProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnServiceProfile",
            "Attributes: ",
            "  attrLoRaWAN.DrMin",
            "  attrLoRaWAN.ReportDevStatusMargin",
            "  attrLoRaWAN.UlRatePolicy",
            "  attrLoRaWAN.MinGwDiversity",
            "  attrLoRaWAN.TargetPer",
            "  attrLoRaWAN.ChannelMask",
            "  attrLoRaWAN.ReportDevStatusBattery",
            "  attrLoRaWAN.DlRate",
            "  attrLoRaWAN.DlRatePolicy",
            "  attrLoRaWAN.HrAllowed",
            "  attrLoRaWAN.DlBucketSize",
            "  attrLoRaWAN.DrMax",
            "  attrLoRaWAN.UlBucketSize",
            "  attrLoRaWAN.UlRate",
            "  attrLoRaWAN.NwkGeoLoc",
            "  attrLoRaWAN.DevStatusReqFreq",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-serviceprofile",
        "scope": "python"
    },
    "iotwireless.CfnTaskDefinition": {
        "body": [
            "iotwireless.CfnTaskDefinition(self, \"${1:id}\", ",
            "        autoCreateTasks=${2:bool}, # Required",
            "        loRaWANUpdateGatewayTaskEntry={",
            "        },",
            "        name=${4:str},",
            "        tags=[],",
            "        taskDefinitionType=${6:str},",
            "        update={",
            "            updateDataRole=${8:str},",
            "            updateDataSource=${9:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnTaskDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnTaskDefinition",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-taskdefinition",
        "scope": "python"
    },
    "iotwireless.CfnWirelessDevice": {
        "body": [
            "iotwireless.CfnWirelessDevice(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        destinationName=${3:str}, # Required",
            "        lastUplinkReceivedAt=${4:str},",
            "        loRaWAN={",
            "            devEui=${7:str},",
            "            deviceProfileId=${8:str},",
            "            serviceProfileId=${12:str},",
            "        },",
            "        name=${6:str},",
            "        positioning=${7:str},",
            "        tags=[],",
            "        thingArn=${9:str},",
            "        type=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnWirelessDevice",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnWirelessDevice",
            "Attributes: ",
            "  attrId",
            "  attrThingName",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-wirelessdevice",
        "scope": "python"
    },
    "iotwireless.CfnWirelessDeviceImportTask": {
        "body": [
            "iotwireless.CfnWirelessDeviceImportTask(self, \"${1:id}\", ",
            "        destinationName=${2:str}, # Required",
            "        sidewalk={",
            "            deviceCreationFile=${3:str},",
            "            deviceCreationFileList=[],",
            "            role=${5:str},",
            "            sidewalkManufacturingSn=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnWirelessDeviceImportTask",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnWirelessDeviceImportTask",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationDate",
            "  attrSidewalk.DeviceCreationFileList",
            "  attrInitializedImportedDevicesCount",
            "  attrStatusReason",
            "  attrOnboardedImportedDevicesCount",
            "  attrFailedImportedDevicesCount",
            "  attrId",
            "  attrPendingImportedDevicesCount",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-wirelessdeviceimporttask",
        "scope": "python"
    },
    "iotwireless.CfnWirelessGateway": {
        "body": [
            "iotwireless.CfnWirelessGateway(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        lastUplinkReceivedAt=${3:str},",
            "        loRaWAN={",
            "            gatewayEui=${4:str},",
            "            rfRegion=${5:str},",
            "        },",
            "        name=${5:str},",
            "        tags=[],",
            "        thingArn=${7:str},",
            "        thingName=${8:str},",
            ")"
        ],
        "description": [
            "Construct: iotwireless.CfnWirelessGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iotwireless.CfnWirelessGateway",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-iotwireless-wirelessgateway",
        "scope": "python"
    },
    "ivs.CfnChannel": {
        "body": [
            "ivs.CfnChannel(self, \"${1:id}\", ",
            "        authorized=${2:bool},",
            "        insecureIngest=${3:bool},",
            "        latencyMode=${4:str},",
            "        name=${5:str},",
            "        preset=${6:str},",
            "        recordingConfigurationArn=${7:str},",
            "        tags=[],",
            "        type=${9:str},",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnChannel",
            "Attributes: ",
            "  attrPlaybackUrl",
            "  attrIngestEndpoint",
            "  attrArn"
        ],
        "prefix": "l1-ivs-channel",
        "scope": "python"
    },
    "ivs.CfnEncoderConfiguration": {
        "body": [
            "ivs.CfnEncoderConfiguration(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        tags=[],",
            "        video={",
            "            bitrate=${4:int},",
            "            framerate=${5:float},",
            "            height=${6:int},",
            "            width=${7:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnEncoderConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnEncoderConfiguration",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ivs-encoderconfiguration",
        "scope": "python"
    },
    "ivs.CfnPlaybackKeyPair": {
        "body": [
            "ivs.CfnPlaybackKeyPair(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        publicKeyMaterial=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnPlaybackKeyPair",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnPlaybackKeyPair",
            "Attributes: ",
            "  attrFingerprint",
            "  attrArn"
        ],
        "prefix": "l1-ivs-playbackkeypair",
        "scope": "python"
    },
    "ivs.CfnPlaybackRestrictionPolicy": {
        "body": [
            "ivs.CfnPlaybackRestrictionPolicy(self, \"${1:id}\", ",
            "        allowedCountries=[], # Required",
            "        allowedOrigins=[], # Required",
            "        enableStrictOriginEnforcement=${4:bool},",
            "        name=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnPlaybackRestrictionPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnPlaybackRestrictionPolicy",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ivs-playbackrestrictionpolicy",
        "scope": "python"
    },
    "ivs.CfnRecordingConfiguration": {
        "body": [
            "ivs.CfnRecordingConfiguration(self, \"${1:id}\", ",
            "        destinationConfiguration={",
            "        },",
            "        name=${3:str},",
            "        recordingReconnectWindowSeconds=${4:int},",
            "        renditionConfiguration={",
            "            renditionSelection=${5:str},",
            "            renditions=[],",
            "        },",
            "        tags=[],",
            "        thumbnailConfiguration={",
            "            recordingMode=${7:str},",
            "            resolution=${8:str},",
            "            storage=[],",
            "            targetIntervalSeconds=${10:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnRecordingConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnRecordingConfiguration",
            "Attributes: ",
            "  attrState",
            "  attrArn"
        ],
        "prefix": "l1-ivs-recordingconfiguration",
        "scope": "python"
    },
    "ivs.CfnStage": {
        "body": [
            "ivs.CfnStage(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnStage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnStage",
            "Attributes: ",
            "  attrArn",
            "  attrActiveSessionId"
        ],
        "prefix": "l1-ivs-stage",
        "scope": "python"
    },
    "ivs.CfnStorageConfiguration": {
        "body": [
            "ivs.CfnStorageConfiguration(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        s3={",
            "            bucketName=${3:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnStorageConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnStorageConfiguration",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ivs-storageconfiguration",
        "scope": "python"
    },
    "ivs.CfnStreamKey": {
        "body": [
            "ivs.CfnStreamKey(self, \"${1:id}\", ",
            "        channelArn=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ivs.CfnStreamKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivs.CfnStreamKey",
            "Attributes: ",
            "  attrValue",
            "  attrArn"
        ],
        "prefix": "l1-ivs-streamkey",
        "scope": "python"
    },
    "ivschat.CfnLoggingConfiguration": {
        "body": [
            "ivschat.CfnLoggingConfiguration(self, \"${1:id}\", ",
            "        destinationConfiguration={",
            "        },",
            "        name=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ivschat.CfnLoggingConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivschat.CfnLoggingConfiguration",
            "Attributes: ",
            "  attrState",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-ivschat-loggingconfiguration",
        "scope": "python"
    },
    "ivschat.CfnRoom": {
        "body": [
            "ivschat.CfnRoom(self, \"${1:id}\", ",
            "        loggingConfigurationIdentifiers=[],",
            "        maximumMessageLength=${3:int},",
            "        maximumMessageRatePerSecond=${4:int},",
            "        messageReviewHandler={",
            "            fallbackResult=${5:str},",
            "            uri=${6:str},",
            "        },",
            "        name=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ivschat.CfnRoom",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ivschat.CfnRoom",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-ivschat-room",
        "scope": "python"
    },
    "kafkaconnect.CfnConnector": {
        "body": [
            "kafkaconnect.CfnConnector(self, \"${1:id}\", ",
            "        capacity={",
            "        },",
            "        connectorConfiguration={",
            "        },",
            "        connectorDescription=${4:str},",
            "        connectorName=${5:str}, # Required",
            "        kafkaCluster={",
            "        },",
            "        kafkaClusterClientAuthentication={",
            "            authenticationType=${7:str},",
            "        },",
            "        kafkaClusterEncryptionInTransit={",
            "            encryptionType=${8:str},",
            "        },",
            "        kafkaConnectVersion=${9:str}, # Required",
            "        logDelivery={",
            "        },",
            "        plugins=[], # Required",
            "        serviceExecutionRoleArn=${12:str}, # Required",
            "        tags=[],",
            "        workerConfiguration={",
            "            revision=${14:int},",
            "            workerConfigurationArn=${15:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: kafkaconnect.CfnConnector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kafkaconnect.CfnConnector",
            "Attributes: ",
            "  attrConnectorArn"
        ],
        "prefix": "l1-kafkaconnect-connector",
        "scope": "python"
    },
    "kafkaconnect.CfnCustomPlugin": {
        "body": [
            "kafkaconnect.CfnCustomPlugin(self, \"${1:id}\", ",
            "        contentType=${2:str}, # Required",
            "        description=${3:str},",
            "        location={",
            "        },",
            "        name=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kafkaconnect.CfnCustomPlugin",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kafkaconnect.CfnCustomPlugin",
            "Attributes: ",
            "  attrCustomPluginArn",
            "  attrFileDescription",
            "  attrFileDescription.FileMd5",
            "  attrRevision",
            "  attrFileDescription.FileSize"
        ],
        "prefix": "l1-kafkaconnect-customplugin",
        "scope": "python"
    },
    "kafkaconnect.CfnWorkerConfiguration": {
        "body": [
            "kafkaconnect.CfnWorkerConfiguration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        propertiesFileContent=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kafkaconnect.CfnWorkerConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kafkaconnect.CfnWorkerConfiguration",
            "Attributes: ",
            "  attrRevision",
            "  attrWorkerConfigurationArn"
        ],
        "prefix": "l1-kafkaconnect-workerconfiguration",
        "scope": "python"
    },
    "kendra.CfnDataSource": {
        "body": [
            "kendra.CfnDataSource(self, \"${1:id}\", ",
            "        customDocumentEnrichmentConfiguration={",
            "            inlineConfigurations=[],",
            "            roleArn=${5:str},",
            "        },",
            "        dataSourceConfiguration={",
            "        },",
            "        description=${4:str},",
            "        indexId=${5:str}, # Required",
            "        languageCode=${6:str},",
            "        name=${7:str}, # Required",
            "        roleArn=${8:str},",
            "        schedule=${9:str},",
            "        tags=[],",
            "        type=${11:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: kendra.CfnDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kendra.CfnDataSource",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-kendra-datasource",
        "scope": "python"
    },
    "kendra.CfnFaq": {
        "body": [
            "kendra.CfnFaq(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        fileFormat=${3:str},",
            "        indexId=${4:str}, # Required",
            "        languageCode=${5:str},",
            "        name=${6:str}, # Required",
            "        roleArn=${7:str}, # Required",
            "        s3Path={",
            "            bucket=${8:str},",
            "            key=${9:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kendra.CfnFaq",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kendra.CfnFaq",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-kendra-faq",
        "scope": "python"
    },
    "kendra.CfnIndex": {
        "body": [
            "kendra.CfnIndex(self, \"${1:id}\", ",
            "        capacityUnits={",
            "            queryCapacityUnits=${2:int},",
            "            storageCapacityUnits=${3:int},",
            "        },",
            "        description=${3:str},",
            "        documentMetadataConfigurations=[],",
            "        edition=${5:str}, # Required",
            "        name=${6:str}, # Required",
            "        roleArn=${7:str}, # Required",
            "        serverSideEncryptionConfiguration={",
            "            kmsKeyId=${8:str},",
            "        },",
            "        tags=[],",
            "        userContextPolicy=${10:str},",
            "        userTokenConfigurations=[],",
            ")"
        ],
        "description": [
            "Construct: kendra.CfnIndex",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kendra.CfnIndex",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-kendra-index",
        "scope": "python"
    },
    "kendraranking.CfnExecutionPlan": {
        "body": [
            "kendraranking.CfnExecutionPlan(self, \"${1:id}\", ",
            "        capacityUnits={",
            "            rescoreCapacityUnits=${2:int},",
            "        },",
            "        description=${3:str},",
            "        name=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kendraranking.CfnExecutionPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kendraranking.CfnExecutionPlan",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-kendraranking-executionplan",
        "scope": "python"
    },
    "kinesis.CfnStream": {
        "body": [
            "kinesis.CfnStream(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        retentionPeriodHours=${3:int},",
            "        shardCount=${4:int},",
            "        streamEncryption={",
            "            encryptionType=${5:str},",
            "            keyId=${6:str},",
            "        },",
            "        streamModeDetails={",
            "            streamMode=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kinesis.CfnStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesis.CfnStream",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-kinesis-stream",
        "scope": "python"
    },
    "kinesis.CfnStreamConsumer": {
        "body": [
            "kinesis.CfnStreamConsumer(self, \"${1:id}\", ",
            "        consumerName=${2:str}, # Required",
            "        streamARN=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: kinesis.CfnStreamConsumer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesis.CfnStreamConsumer",
            "Attributes: ",
            "  attrConsumerCreationTimestamp",
            "  attrConsumerName",
            "  attrConsumerARN",
            "  attrConsumerStatus",
            "  attrStreamARN"
        ],
        "prefix": "l1-kinesis-streamconsumer",
        "scope": "python"
    },
    "kinesisanalytics.CfnApplication": {
        "body": [
            "kinesisanalytics.CfnApplication(self, \"${1:id}\", ",
            "        applicationCode=${2:str},",
            "        applicationDescription=${3:str},",
            "        applicationName=${4:str},",
            "        inputs=[], # Required",
            ")"
        ],
        "description": [
            "Construct: kinesisanalytics.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisanalytics.CfnApplication"
        ],
        "prefix": "l1-kinesisanalytics-application",
        "scope": "python"
    },
    "kinesisanalytics.CfnApplicationOutput": {
        "body": [
            "kinesisanalytics.CfnApplicationOutput(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        output={",
            "            name=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: kinesisanalytics.CfnApplicationOutput",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisanalytics.CfnApplicationOutput"
        ],
        "prefix": "l1-kinesisanalytics-applicationoutput",
        "scope": "python"
    },
    "kinesisanalytics.CfnApplicationReferenceDataSource": {
        "body": [
            "kinesisanalytics.CfnApplicationReferenceDataSource(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        referenceDataSource={",
            "            tableName=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: kinesisanalytics.CfnApplicationReferenceDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisanalytics.CfnApplicationReferenceDataSource"
        ],
        "prefix": "l1-kinesisanalytics-applicationreferencedatasource",
        "scope": "python"
    },
    "kinesisanalyticsv2.CfnApplication": {
        "body": [
            "kinesisanalyticsv2.CfnApplication(self, \"${1:id}\", ",
            "        applicationConfiguration={",
            "            vpcConfigurations=[],",
            "        },",
            "        applicationDescription=${3:str},",
            "        applicationMaintenanceConfiguration={",
            "            applicationMaintenanceWindowStartTime=${4:str},",
            "        },",
            "        applicationMode=${5:str},",
            "        applicationName=${6:str},",
            "        runConfiguration={",
            "        },",
            "        runtimeEnvironment=${8:str}, # Required",
            "        serviceExecutionRole=${9:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kinesisanalyticsv2.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisanalyticsv2.CfnApplication"
        ],
        "prefix": "l1-kinesisanalyticsv2-application",
        "scope": "python"
    },
    "kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption": {
        "body": [
            "kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        cloudWatchLoggingOption={",
            "            logStreamARN=${3:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisanalyticsv2.CfnApplicationCloudWatchLoggingOption"
        ],
        "prefix": "l1-kinesisanalyticsv2-applicationcloudwatchloggingoption",
        "scope": "python"
    },
    "kinesisanalyticsv2.CfnApplicationOutput": {
        "body": [
            "kinesisanalyticsv2.CfnApplicationOutput(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        output={",
            "            name=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: kinesisanalyticsv2.CfnApplicationOutput",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisanalyticsv2.CfnApplicationOutput"
        ],
        "prefix": "l1-kinesisanalyticsv2-applicationoutput",
        "scope": "python"
    },
    "kinesisanalyticsv2.CfnApplicationReferenceDataSource": {
        "body": [
            "kinesisanalyticsv2.CfnApplicationReferenceDataSource(self, \"${1:id}\", ",
            "        applicationName=${2:str}, # Required",
            "        referenceDataSource={",
            "            tableName=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: kinesisanalyticsv2.CfnApplicationReferenceDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisanalyticsv2.CfnApplicationReferenceDataSource"
        ],
        "prefix": "l1-kinesisanalyticsv2-applicationreferencedatasource",
        "scope": "python"
    },
    "kinesisfirehose.CfnDeliveryStream": {
        "body": [
            "kinesisfirehose.CfnDeliveryStream(self, \"${1:id}\", ",
            "        amazonOpenSearchServerlessDestinationConfiguration={",
            "            collectionEndpoint=${4:str},",
            "            indexName=${5:str},",
            "            roleARN=${8:str},",
            "            s3BackupMode=${9:str},",
            "        },",
            "        amazonopensearchserviceDestinationConfiguration={",
            "            clusterEndpoint=${5:str},",
            "            domainARN=${7:str},",
            "            indexName=${8:str},",
            "            indexRotationPeriod=${9:str},",
            "            roleARN=${12:str},",
            "            s3BackupMode=${13:str},",
            "            typeName=${15:str},",
            "        },",
            "        deliveryStreamEncryptionConfigurationInput={",
            "            keyARN=${4:str},",
            "            keyType=${5:str},",
            "        },",
            "        deliveryStreamName=${5:str},",
            "        deliveryStreamType=${6:str},",
            "        elasticsearchDestinationConfiguration={",
            "            clusterEndpoint=${9:str},",
            "            domainARN=${11:str},",
            "            indexName=${12:str},",
            "            indexRotationPeriod=${13:str},",
            "            roleARN=${16:str},",
            "            s3BackupMode=${17:str},",
            "            typeName=${19:str},",
            "        },",
            "        extendedS3DestinationConfiguration={",
            "            bucketARN=${8:str},",
            "            compressionFormat=${11:str},",
            "            customTimeZone=${12:str},",
            "            errorOutputPrefix=${16:str},",
            "            fileExtension=${17:str},",
            "            prefix=${18:str},",
            "            roleARN=${20:str},",
            "            s3BackupMode=${22:str},",
            "        },",
            "        httpEndpointDestinationConfiguration={",
            "            roleARN=${15:str},",
            "            s3BackupMode=${16:str},",
            "        },",
            "        kinesisStreamSourceConfiguration={",
            "            kinesisStreamARN=${10:str},",
            "            roleARN=${11:str},",
            "        },",
            "        mSKSourceConfiguration={",
            "            mSKClusterARN=${12:str},",
            "            topicName=${13:str},",
            "        },",
            "        redshiftDestinationConfiguration={",
            "            clusterJDBCURL=${13:str},",
            "            password=${15:str},",
            "            roleARN=${18:str},",
            "            s3BackupMode=${20:str},",
            "            username=${23:str},",
            "        },",
            "        s3DestinationConfiguration={",
            "            bucketARN=${13:str},",
            "            compressionFormat=${16:str},",
            "            errorOutputPrefix=${18:str},",
            "            prefix=${19:str},",
            "            roleARN=${20:str},",
            "        },",
            "        snowflakeDestinationConfiguration={",
            "            accountUrl=${14:str},",
            "            contentColumnName=${16:str},",
            "            dataLoadingOption=${17:str},",
            "            database=${18:str},",
            "            keyPassphrase=${19:str},",
            "            metaDataColumnName=${20:str},",
            "            privateKey=${21:str},",
            "            roleARN=${24:str},",
            "            s3BackupMode=${25:str},",
            "            schema=${27:str},",
            "            table=${31:str},",
            "            user=${32:str},",
            "        },",
            "        splunkDestinationConfiguration={",
            "            hECAcknowledgmentTimeoutInSeconds=${17:int},",
            "            hECEndpoint=${18:str},",
            "            hECEndpointType=${19:str},",
            "            hECToken=${20:str},",
            "            s3BackupMode=${23:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kinesisfirehose.CfnDeliveryStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisfirehose.CfnDeliveryStream",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-kinesisfirehose-deliverystream",
        "scope": "python"
    },
    "kinesisvideo.CfnSignalingChannel": {
        "body": [
            "kinesisvideo.CfnSignalingChannel(self, \"${1:id}\", ",
            "        messageTtlSeconds=${2:int},",
            "        name=${3:str},",
            "        tags=[],",
            "        type=${5:str},",
            ")"
        ],
        "description": [
            "Construct: kinesisvideo.CfnSignalingChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisvideo.CfnSignalingChannel",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-kinesisvideo-signalingchannel",
        "scope": "python"
    },
    "kinesisvideo.CfnStream": {
        "body": [
            "kinesisvideo.CfnStream(self, \"${1:id}\", ",
            "        dataRetentionInHours=${2:int},",
            "        deviceName=${3:str},",
            "        kmsKeyId=${4:str},",
            "        mediaType=${5:str},",
            "        name=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kinesisvideo.CfnStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisvideo.CfnStream",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-kinesisvideo-stream",
        "scope": "python"
    },
    "kms.CfnAlias": {
        "body": [
            "kms.CfnAlias(self, \"${1:id}\", ",
            "        aliasName=${2:str}, # Required",
            "        targetKeyId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: kms.CfnAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kms.CfnAlias"
        ],
        "prefix": "l1-kms-alias",
        "scope": "python"
    },
    "kms.CfnKey": {
        "body": [
            "kms.CfnKey(self, \"${1:id}\", ",
            "        bypassPolicyLockoutSafetyCheck=${2:bool},",
            "        description=${3:str},",
            "        enableKeyRotation=${4:bool},",
            "        enabled=${5:bool},",
            "        keyPolicy=${6:dict},",
            "        keySpec=${7:str},",
            "        keyUsage=${8:str},",
            "        multiRegion=${9:bool},",
            "        origin=${10:str},",
            "        pendingWindowInDays=${11:int},",
            "        rotationPeriodInDays=${12:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kms.CfnKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kms.CfnKey",
            "Attributes: ",
            "  attrKeyId",
            "  attrArn"
        ],
        "prefix": "l1-kms-key",
        "scope": "python"
    },
    "kms.CfnReplicaKey": {
        "body": [
            "kms.CfnReplicaKey(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        enabled=${3:bool},",
            "        keyPolicy=${4:dict}, # Required",
            "        pendingWindowInDays=${5:int},",
            "        primaryKeyArn=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: kms.CfnReplicaKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kms.CfnReplicaKey",
            "Attributes: ",
            "  attrKeyId",
            "  attrArn"
        ],
        "prefix": "l1-kms-replicakey",
        "scope": "python"
    },
    "lakeformation.CfnDataCellsFilter": {
        "body": [
            "lakeformation.CfnDataCellsFilter(self, \"${1:id}\", ",
            "        columnNames=[],",
            "        columnWildcard={",
            "            excludedColumnNames=[],",
            "        },",
            "        databaseName=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        rowFilter={",
            "            allRowsWildcard=${6:dict},",
            "            filterExpression=${7:str},",
            "        },",
            "        tableCatalogId=${7:str}, # Required",
            "        tableName=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lakeformation.CfnDataCellsFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lakeformation.CfnDataCellsFilter"
        ],
        "prefix": "l1-lakeformation-datacellsfilter",
        "scope": "python"
    },
    "lakeformation.CfnDataLakeSettings": {
        "body": [
            "lakeformation.CfnDataLakeSettings(self, \"${1:id}\", ",
            "        admins={",
            "        },",
            "        allowExternalDataFiltering=${3:bool},",
            "        allowFullTableExternalDataAccess=${4:bool},",
            "        authorizedSessionTagValueList=[],",
            "        createDatabaseDefaultPermissions={",
            "        },",
            "        createTableDefaultPermissions={",
            "        },",
            "        externalDataFilteringAllowList={",
            "        },",
            "        mutationType=${9:str},",
            "        parameters=${10:dict},",
            "        trustedResourceOwners=[],",
            ")"
        ],
        "description": [
            "Construct: lakeformation.CfnDataLakeSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lakeformation.CfnDataLakeSettings"
        ],
        "prefix": "l1-lakeformation-datalakesettings",
        "scope": "python"
    },
    "lakeformation.CfnPermissions": {
        "body": [
            "lakeformation.CfnPermissions(self, \"${1:id}\", ",
            "        dataLakePrincipal={",
            "            dataLakePrincipalIdentifier=${2:str},",
            "        },",
            "        permissions=[],",
            "        permissionsWithGrantOption=[],",
            "        resource={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: lakeformation.CfnPermissions",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lakeformation.CfnPermissions"
        ],
        "prefix": "l1-lakeformation-permissions",
        "scope": "python"
    },
    "lakeformation.CfnPrincipalPermissions": {
        "body": [
            "lakeformation.CfnPrincipalPermissions(self, \"${1:id}\", ",
            "        catalog=${2:str},",
            "        permissions=[], # Required",
            "        permissionsWithGrantOption=[], # Required",
            "        principal={",
            "            dataLakePrincipalIdentifier=${5:str},",
            "        },",
            "        resource={",
            "            catalog=${6:dict},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: lakeformation.CfnPrincipalPermissions",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lakeformation.CfnPrincipalPermissions",
            "Attributes: ",
            "  attrResourceIdentifier",
            "  attrPrincipalIdentifier"
        ],
        "prefix": "l1-lakeformation-principalpermissions",
        "scope": "python"
    },
    "lakeformation.CfnResource": {
        "body": [
            "lakeformation.CfnResource(self, \"${1:id}\", ",
            "        hybridAccessEnabled=${2:bool},",
            "        resourceArn=${3:str}, # Required",
            "        roleArn=${4:str},",
            "        useServiceLinkedRole=${5:bool}, # Required",
            "        withFederation=${6:bool},",
            ")"
        ],
        "description": [
            "Construct: lakeformation.CfnResource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lakeformation.CfnResource"
        ],
        "prefix": "l1-lakeformation-resource",
        "scope": "python"
    },
    "lakeformation.CfnTag": {
        "body": [
            "lakeformation.CfnTag(self, \"${1:id}\", ",
            "        catalogId=${2:str},",
            "        tagKey=${3:str}, # Required",
            "        tagValues=[], # Required",
            ")"
        ],
        "description": [
            "Construct: lakeformation.CfnTag",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lakeformation.CfnTag"
        ],
        "prefix": "l1-lakeformation-tag",
        "scope": "python"
    },
    "lakeformation.CfnTagAssociation": {
        "body": [
            "lakeformation.CfnTagAssociation(self, \"${1:id}\", ",
            "        lFTags=[], # Required",
            "        resource={",
            "            catalog=${3:dict},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: lakeformation.CfnTagAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lakeformation.CfnTagAssociation",
            "Attributes: ",
            "  attrResourceIdentifier",
            "  attrTagsIdentifier"
        ],
        "prefix": "l1-lakeformation-tagassociation",
        "scope": "python"
    },
    "lambda.CfnAlias": {
        "body": [
            "lambda.CfnAlias(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        functionName=${3:str}, # Required",
            "        functionVersion=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        provisionedConcurrencyConfig={",
            "            provisionedConcurrentExecutions=${6:int},",
            "        },",
            "        routingConfig={",
            "            additionalVersionWeights=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnAlias"
        ],
        "prefix": "l1-lambda-alias",
        "scope": "python"
    },
    "lambda.CfnCodeSigningConfig": {
        "body": [
            "lambda.CfnCodeSigningConfig(self, \"${1:id}\", ",
            "        allowedPublishers={",
            "            signingProfileVersionArns=[],",
            "        },",
            "        codeSigningPolicies={",
            "            untrustedArtifactOnDeployment=${3:str},",
            "        },",
            "        description=${4:str},",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnCodeSigningConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnCodeSigningConfig",
            "Attributes: ",
            "  attrCodeSigningConfigId",
            "  attrCodeSigningConfigArn"
        ],
        "prefix": "l1-lambda-codesigningconfig",
        "scope": "python"
    },
    "lambda.CfnEventInvokeConfig": {
        "body": [
            "lambda.CfnEventInvokeConfig(self, \"${1:id}\", ",
            "        destinationConfig={",
            "        },",
            "        functionName=${3:str}, # Required",
            "        maximumEventAgeInSeconds=${4:int},",
            "        maximumRetryAttempts=${5:int},",
            "        qualifier=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnEventInvokeConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnEventInvokeConfig"
        ],
        "prefix": "l1-lambda-eventinvokeconfig",
        "scope": "python"
    },
    "lambda.CfnEventSourceMapping": {
        "body": [
            "lambda.CfnEventSourceMapping(self, \"${1:id}\", ",
            "        amazonManagedKafkaEventSourceConfig={",
            "            consumerGroupId=${2:str},",
            "        },",
            "        batchSize=${3:int},",
            "        bisectBatchOnFunctionError=${4:bool},",
            "        destinationConfig={",
            "        },",
            "        documentDBEventSourceConfig={",
            "            collectionName=${6:str},",
            "            databaseName=${7:str},",
            "            fullDocument=${8:str},",
            "        },",
            "        enabled=${7:bool},",
            "        eventSourceArn=${8:str},",
            "        filterCriteria={",
            "            filters=[],",
            "        },",
            "        functionName=${10:str}, # Required",
            "        functionResponseTypes=[],",
            "        maximumBatchingWindowInSeconds=${12:int},",
            "        maximumRecordAgeInSeconds=${13:int},",
            "        maximumRetryAttempts=${14:int},",
            "        parallelizationFactor=${15:int},",
            "        queues=[],",
            "        scalingConfig={",
            "            maximumConcurrency=${17:int},",
            "        },",
            "        selfManagedEventSource={",
            "        },",
            "        selfManagedKafkaEventSourceConfig={",
            "            consumerGroupId=${19:str},",
            "        },",
            "        sourceAccessConfigurations=[],",
            "        startingPosition=${21:str},",
            "        startingPositionTimestamp=${22:float},",
            "        topics=[],",
            "        tumblingWindowInSeconds=${24:int},",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnEventSourceMapping",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnEventSourceMapping",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-lambda-eventsourcemapping",
        "scope": "python"
    },
    "lambda.CfnFunction": {
        "body": [
            "lambda.CfnFunction(self, \"${1:id}\", ",
            "        architectures=[],",
            "        code={",
            "            imageUri=${3:str},",
            "            s3Bucket=${4:str},",
            "            s3Key=${5:str},",
            "            s3ObjectVersion=${6:str},",
            "            zipFile=${7:str},",
            "        },",
            "        codeSigningConfigArn=${4:str},",
            "        deadLetterConfig={",
            "            targetArn=${5:str},",
            "        },",
            "        description=${6:str},",
            "        environment={",
            "        },",
            "        ephemeralStorage={",
            "            size=${8:int},",
            "        },",
            "        fileSystemConfigs=[],",
            "        functionName=${10:str},",
            "        handler=${11:str},",
            "        imageConfig={",
            "            command=[],",
            "            entryPoint=[],",
            "            workingDirectory=${14:str},",
            "        },",
            "        kmsKeyArn=${13:str},",
            "        layers=[],",
            "        loggingConfig={",
            "            applicationLogLevel=${15:str},",
            "            logFormat=${16:str},",
            "            logGroup=${17:str},",
            "            systemLogLevel=${18:str},",
            "        },",
            "        memorySize=${16:int},",
            "        packageType=${17:str},",
            "        reservedConcurrentExecutions=${18:int},",
            "        role=${19:str}, # Required",
            "        runtime=${20:str},",
            "        runtimeManagementConfig={",
            "            runtimeVersionArn=${21:str},",
            "            updateRuntimeOn=${22:str},",
            "        },",
            "        snapStart={",
            "            applyOn=${22:str},",
            "        },",
            "        tags=[],",
            "        timeout=${24:int},",
            "        tracingConfig={",
            "            mode=${25:str},",
            "        },",
            "        vpcConfig={",
            "            ipv6AllowedForDualStack=${26:bool},",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnFunction",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnFunction",
            "Attributes: ",
            "  attrSnapStartResponse.OptimizationStatus",
            "  attrSnapStartResponse.ApplyOn",
            "  attrSnapStartResponse",
            "  attrArn"
        ],
        "prefix": "l1-lambda-function",
        "scope": "python"
    },
    "lambda.CfnLayerVersion": {
        "body": [
            "lambda.CfnLayerVersion(self, \"${1:id}\", ",
            "        compatibleArchitectures=[],",
            "        compatibleRuntimes=[],",
            "        content={",
            "            s3Bucket=${4:str},",
            "            s3Key=${5:str},",
            "            s3ObjectVersion=${6:str},",
            "        },",
            "        description=${5:str},",
            "        layerName=${6:str},",
            "        licenseInfo=${7:str},",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnLayerVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnLayerVersion",
            "Attributes: ",
            "  attrLayerVersionArn"
        ],
        "prefix": "l1-lambda-layerversion",
        "scope": "python"
    },
    "lambda.CfnLayerVersionPermission": {
        "body": [
            "lambda.CfnLayerVersionPermission(self, \"${1:id}\", ",
            "        action=${2:str}, # Required",
            "        layerVersionArn=${3:str}, # Required",
            "        organizationId=${4:str},",
            "        principal=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnLayerVersionPermission",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnLayerVersionPermission",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-lambda-layerversionpermission",
        "scope": "python"
    },
    "lambda.CfnPermission": {
        "body": [
            "lambda.CfnPermission(self, \"${1:id}\", ",
            "        action=${2:str}, # Required",
            "        eventSourceToken=${3:str},",
            "        functionName=${4:str}, # Required",
            "        functionUrlAuthType=${5:str},",
            "        principal=${6:str}, # Required",
            "        principalOrgID=${7:str},",
            "        sourceAccount=${8:str},",
            "        sourceArn=${9:str},",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnPermission",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnPermission",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-lambda-permission",
        "scope": "python"
    },
    "lambda.CfnUrl": {
        "body": [
            "lambda.CfnUrl(self, \"${1:id}\", ",
            "        authType=${2:str}, # Required",
            "        cors={",
            "            allowCredentials=${3:bool},",
            "            allowHeaders=[],",
            "            allowMethods=[],",
            "            allowOrigins=[],",
            "            exposeHeaders=[],",
            "            maxAge=${8:int},",
            "        },",
            "        invokeMode=${4:str},",
            "        qualifier=${5:str},",
            "        targetFunctionArn=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnUrl",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnUrl",
            "Attributes: ",
            "  attrFunctionArn",
            "  attrFunctionUrl"
        ],
        "prefix": "l1-lambda-url",
        "scope": "python"
    },
    "lambda.CfnVersion": {
        "body": [
            "lambda.CfnVersion(self, \"${1:id}\", ",
            "        codeSha256=${2:str},",
            "        description=${3:str},",
            "        functionName=${4:str}, # Required",
            "        policy=${5:dict},",
            "        provisionedConcurrencyConfig={",
            "            provisionedConcurrentExecutions=${6:int},",
            "        },",
            "        runtimePolicy={",
            "            runtimeVersionArn=${7:str},",
            "            updateRuntimeOn=${8:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: lambda.CfnVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.CfnVersion",
            "Attributes: ",
            "  attrFunctionArn",
            "  attrVersion"
        ],
        "prefix": "l1-lambda-version",
        "scope": "python"
    },
    "lex.CfnBot": {
        "body": [
            "lex.CfnBot(self, \"${1:id}\", ",
            "        autoBuildBotLocales=${2:bool},",
            "        botFileS3Location={",
            "            s3Bucket=${3:str},",
            "            s3ObjectKey=${4:str},",
            "            s3ObjectVersion=${5:str},",
            "        },",
            "        botLocales=[],",
            "        botTags=[],",
            "        dataPrivacy={",
            "            childDirected=${6:bool},",
            "        },",
            "        description=${7:str},",
            "        idleSessionTTLInSeconds=${8:int}, # Required",
            "        name=${9:str}, # Required",
            "        roleArn=${10:str}, # Required",
            "        testBotAliasSettings={",
            "            botAliasLocaleSettings=[],",
            "            description=${13:str},",
            "        },",
            "        testBotAliasTags=[],",
            ")"
        ],
        "description": [
            "Construct: lex.CfnBot",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lex.CfnBot",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-lex-bot",
        "scope": "python"
    },
    "lex.CfnBotAlias": {
        "body": [
            "lex.CfnBotAlias(self, \"${1:id}\", ",
            "        botAliasLocaleSettings=[],",
            "        botAliasName=${3:str}, # Required",
            "        botAliasTags=[],",
            "        botId=${5:str}, # Required",
            "        botVersion=${6:str},",
            "        conversationLogSettings={",
            "            audioLogSettings=[],",
            "            textLogSettings=[],",
            "        },",
            "        description=${8:str},",
            "        sentimentAnalysisSettings={",
            "            detectSentiment=${9:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: lex.CfnBotAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lex.CfnBotAlias",
            "Attributes: ",
            "  attrBotAliasStatus",
            "  attrArn",
            "  attrBotAliasId"
        ],
        "prefix": "l1-lex-botalias",
        "scope": "python"
    },
    "lex.CfnBotVersion": {
        "body": [
            "lex.CfnBotVersion(self, \"${1:id}\", ",
            "        botId=${2:str}, # Required",
            "        botVersionLocaleSpecification=[], # Required",
            "        description=${4:str},",
            ")"
        ],
        "description": [
            "Construct: lex.CfnBotVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lex.CfnBotVersion",
            "Attributes: ",
            "  attrBotVersion"
        ],
        "prefix": "l1-lex-botversion",
        "scope": "python"
    },
    "lex.CfnResourcePolicy": {
        "body": [
            "lex.CfnResourcePolicy(self, \"${1:id}\", ",
            "        policy=${2:dict}, # Required",
            "        resourceArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lex.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lex.CfnResourcePolicy",
            "Attributes: ",
            "  attrId",
            "  attrRevisionId"
        ],
        "prefix": "l1-lex-resourcepolicy",
        "scope": "python"
    },
    "licensemanager.CfnGrant": {
        "body": [
            "licensemanager.CfnGrant(self, \"${1:id}\", ",
            "        allowedOperations=[],",
            "        grantName=${3:str},",
            "        homeRegion=${4:str},",
            "        licenseArn=${5:str},",
            "        principals=[],",
            "        status=${7:str},",
            ")"
        ],
        "description": [
            "Construct: licensemanager.CfnGrant",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-licensemanager.CfnGrant",
            "Attributes: ",
            "  attrGrantArn",
            "  attrVersion"
        ],
        "prefix": "l1-licensemanager-grant",
        "scope": "python"
    },
    "licensemanager.CfnLicense": {
        "body": [
            "licensemanager.CfnLicense(self, \"${1:id}\", ",
            "        beneficiary=${2:str},",
            "        consumptionConfiguration={",
            "            renewType=${5:str},",
            "        },",
            "        entitlements=[], # Required",
            "        homeRegion=${5:str}, # Required",
            "        issuer={",
            "            name=${6:str},",
            "            signKey=${7:str},",
            "        },",
            "        licenseMetadata=[],",
            "        licenseName=${8:str}, # Required",
            "        productName=${9:str}, # Required",
            "        productSKU=${10:str},",
            "        status=${11:str},",
            "        validity={",
            "            begin=${12:str},",
            "            end=${13:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: licensemanager.CfnLicense",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-licensemanager.CfnLicense",
            "Attributes: ",
            "  attrVersion",
            "  attrLicenseArn"
        ],
        "prefix": "l1-licensemanager-license",
        "scope": "python"
    },
    "lightsail.CfnAlarm": {
        "body": [
            "lightsail.CfnAlarm(self, \"${1:id}\", ",
            "        alarmName=${2:str}, # Required",
            "        comparisonOperator=${3:str}, # Required",
            "        contactProtocols=[],",
            "        datapointsToAlarm=${5:int},",
            "        evaluationPeriods=${6:int}, # Required",
            "        metricName=${7:str}, # Required",
            "        monitoredResourceName=${8:str}, # Required",
            "        notificationEnabled=${9:bool},",
            "        notificationTriggers=[],",
            "        threshold=${11:float}, # Required",
            "        treatMissingData=${12:str},",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnAlarm",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnAlarm",
            "Attributes: ",
            "  attrAlarmArn",
            "  attrState"
        ],
        "prefix": "l1-lightsail-alarm",
        "scope": "python"
    },
    "lightsail.CfnBucket": {
        "body": [
            "lightsail.CfnBucket(self, \"${1:id}\", ",
            "        accessRules={",
            "            allowPublicOverrides=${2:bool},",
            "            getObject=${3:str},",
            "        },",
            "        bucketName=${3:str}, # Required",
            "        bundleId=${4:str}, # Required",
            "        objectVersioning=${5:bool},",
            "        readOnlyAccessAccounts=[],",
            "        resourcesReceivingAccess=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnBucket",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnBucket",
            "Attributes: ",
            "  attrBucketArn",
            "  attrAbleToUpdateBundle",
            "  attrUrl"
        ],
        "prefix": "l1-lightsail-bucket",
        "scope": "python"
    },
    "lightsail.CfnCertificate": {
        "body": [
            "lightsail.CfnCertificate(self, \"${1:id}\", ",
            "        certificateName=${2:str}, # Required",
            "        domainName=${3:str}, # Required",
            "        subjectAlternativeNames=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnCertificate",
            "Attributes: ",
            "  attrStatus",
            "  attrCertificateArn"
        ],
        "prefix": "l1-lightsail-certificate",
        "scope": "python"
    },
    "lightsail.CfnContainer": {
        "body": [
            "lightsail.CfnContainer(self, \"${1:id}\", ",
            "        containerServiceDeployment={",
            "            containers=[],",
            "        },",
            "        isDisabled=${3:bool},",
            "        power=${4:str}, # Required",
            "        privateRegistryAccess={",
            "        },",
            "        publicDomainNames=[],",
            "        scale=${7:int}, # Required",
            "        serviceName=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnContainer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnContainer",
            "Attributes: ",
            "  attrPrincipalArn",
            "  attrPrivateRegistryAccess.EcrImagePullerRole.PrincipalArn",
            "  attrContainerArn",
            "  attrUrl"
        ],
        "prefix": "l1-lightsail-container",
        "scope": "python"
    },
    "lightsail.CfnDatabase": {
        "body": [
            "lightsail.CfnDatabase(self, \"${1:id}\", ",
            "        availabilityZone=${2:str},",
            "        backupRetention=${3:bool},",
            "        caCertificateIdentifier=${4:str},",
            "        masterDatabaseName=${5:str}, # Required",
            "        masterUserPassword=${6:str},",
            "        masterUsername=${7:str}, # Required",
            "        preferredBackupWindow=${8:str},",
            "        preferredMaintenanceWindow=${9:str},",
            "        publiclyAccessible=${10:bool},",
            "        relationalDatabaseBlueprintId=${11:str}, # Required",
            "        relationalDatabaseBundleId=${12:str}, # Required",
            "        relationalDatabaseName=${13:str}, # Required",
            "        relationalDatabaseParameters=[],",
            "        rotateMasterUserPassword=${15:bool},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnDatabase",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnDatabase",
            "Attributes: ",
            "  attrDatabaseArn"
        ],
        "prefix": "l1-lightsail-database",
        "scope": "python"
    },
    "lightsail.CfnDisk": {
        "body": [
            "lightsail.CfnDisk(self, \"${1:id}\", ",
            "        addOns=[],",
            "        availabilityZone=${3:str},",
            "        diskName=${4:str}, # Required",
            "        location={",
            "            availabilityZone=${5:str},",
            "            regionName=${6:str},",
            "        },",
            "        sizeInGb=${6:int}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnDisk",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnDisk",
            "Attributes: ",
            "  attrPath",
            "  attrAttachmentState",
            "  attrLocation.AvailabilityZone",
            "  attrSupportCode",
            "  attrState",
            "  attrIsAttached",
            "  attrResourceType",
            "  attrDiskArn",
            "  attrAttachedTo",
            "  attrIops",
            "  attrLocation.RegionName"
        ],
        "prefix": "l1-lightsail-disk",
        "scope": "python"
    },
    "lightsail.CfnDistribution": {
        "body": [
            "lightsail.CfnDistribution(self, \"${1:id}\", ",
            "        bundleId=${2:str}, # Required",
            "        cacheBehaviorSettings={",
            "            allowedHTTPMethods=${3:str},",
            "            cachedHTTPMethods=${4:str},",
            "            defaultTTL=${5:int},",
            "            maximumTTL=${9:int},",
            "            minimumTTL=${10:int},",
            "        },",
            "        cacheBehaviors=[],",
            "        certificateName=${5:str},",
            "        defaultCacheBehavior={",
            "            behavior=${6:str},",
            "        },",
            "        distributionName=${7:str}, # Required",
            "        ipAddressType=${8:str},",
            "        isEnabled=${9:bool},",
            "        origin={",
            "            name=${10:str},",
            "            protocolPolicy=${11:str},",
            "            regionName=${12:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnDistribution",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnDistribution",
            "Attributes: ",
            "  attrStatus",
            "  attrDistributionArn",
            "  attrAbleToUpdateBundle"
        ],
        "prefix": "l1-lightsail-distribution",
        "scope": "python"
    },
    "lightsail.CfnInstance": {
        "body": [
            "lightsail.CfnInstance(self, \"${1:id}\", ",
            "        addOns=[],",
            "        availabilityZone=${3:str},",
            "        blueprintId=${4:str}, # Required",
            "        bundleId=${5:str}, # Required",
            "        hardware={",
            "            cpuCount=${6:int},",
            "            disks=[],",
            "            ramSizeInGb=${8:int},",
            "        },",
            "        instanceName=${7:str}, # Required",
            "        keyPairName=${8:str},",
            "        location={",
            "            availabilityZone=${9:str},",
            "            regionName=${10:str},",
            "        },",
            "        networking={",
            "            ports=[],",
            "        },",
            "        state={",
            "            code=${11:int},",
            "            name=${12:str},",
            "        },",
            "        tags=[],",
            "        userData=${13:str},",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnInstance",
            "Attributes: ",
            "  attrSshKeyName",
            "  attrNetworking.MonthlyTransfer.GbPerMonthAllocated",
            "  attrHardware.CpuCount",
            "  attrIsStaticIp",
            "  attrPrivateIpAddress",
            "  attrUserName",
            "  attrResourceType",
            "  attrIpv6Addresses",
            "  attrLocation.RegionName",
            "  attrPublicIpAddress",
            "  attrLocation.AvailabilityZone",
            "  attrState.Code",
            "  attrSupportCode",
            "  attrState.Name",
            "  attrInstanceArn",
            "  attrHardware.RamSizeInGb"
        ],
        "prefix": "l1-lightsail-instance",
        "scope": "python"
    },
    "lightsail.CfnLoadBalancer": {
        "body": [
            "lightsail.CfnLoadBalancer(self, \"${1:id}\", ",
            "        attachedInstances=[],",
            "        healthCheckPath=${3:str},",
            "        instancePort=${4:int}, # Required",
            "        ipAddressType=${5:str},",
            "        loadBalancerName=${6:str}, # Required",
            "        sessionStickinessEnabled=${7:bool},",
            "        sessionStickinessLBCookieDurationSeconds=${8:str},",
            "        tags=[],",
            "        tlsPolicyName=${10:str},",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnLoadBalancer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnLoadBalancer",
            "Attributes: ",
            "  attrLoadBalancerArn"
        ],
        "prefix": "l1-lightsail-loadbalancer",
        "scope": "python"
    },
    "lightsail.CfnLoadBalancerTlsCertificate": {
        "body": [
            "lightsail.CfnLoadBalancerTlsCertificate(self, \"${1:id}\", ",
            "        certificateAlternativeNames=[],",
            "        certificateDomainName=${3:str}, # Required",
            "        certificateName=${4:str}, # Required",
            "        httpsRedirectionEnabled=${5:bool},",
            "        isAttached=${6:bool},",
            "        loadBalancerName=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnLoadBalancerTlsCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnLoadBalancerTlsCertificate",
            "Attributes: ",
            "  attrStatus",
            "  attrLoadBalancerTlsCertificateArn"
        ],
        "prefix": "l1-lightsail-loadbalancertlscertificate",
        "scope": "python"
    },
    "lightsail.CfnStaticIp": {
        "body": [
            "lightsail.CfnStaticIp(self, \"${1:id}\", ",
            "        attachedTo=${2:str},",
            "        staticIpName=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lightsail.CfnStaticIp",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lightsail.CfnStaticIp",
            "Attributes: ",
            "  attrStaticIpArn",
            "  attrIsAttached",
            "  attrIpAddress"
        ],
        "prefix": "l1-lightsail-staticip",
        "scope": "python"
    },
    "location.CfnAPIKey": {
        "body": [
            "location.CfnAPIKey(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        expireTime=${3:str},",
            "        forceDelete=${4:bool},",
            "        forceUpdate=${5:bool},",
            "        keyName=${6:str}, # Required",
            "        noExpiry=${7:bool},",
            "        restrictions={",
            "            allowActions=[],",
            "            allowReferers=[],",
            "            allowResources=[],",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: location.CfnAPIKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-location.CfnAPIKey",
            "Attributes: ",
            "  attrCreateTime",
            "  attrUpdateTime",
            "  attrKeyArn",
            "  attrArn"
        ],
        "prefix": "l1-location-apikey",
        "scope": "python"
    },
    "location.CfnGeofenceCollection": {
        "body": [
            "location.CfnGeofenceCollection(self, \"${1:id}\", ",
            "        collectionName=${2:str}, # Required",
            "        description=${3:str},",
            "        kmsKeyId=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: location.CfnGeofenceCollection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-location.CfnGeofenceCollection",
            "Attributes: ",
            "  attrCollectionArn",
            "  attrCreateTime",
            "  attrUpdateTime",
            "  attrArn"
        ],
        "prefix": "l1-location-geofencecollection",
        "scope": "python"
    },
    "location.CfnMap": {
        "body": [
            "location.CfnMap(self, \"${1:id}\", ",
            "        configuration={",
            "            customLayers=[],",
            "            politicalView=${3:str},",
            "            style=${4:str},",
            "        },",
            "        description=${3:str},",
            "        mapName=${4:str}, # Required",
            "        pricingPlan=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: location.CfnMap",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-location.CfnMap",
            "Attributes: ",
            "  attrCreateTime",
            "  attrUpdateTime",
            "  attrArn",
            "  attrMapArn"
        ],
        "prefix": "l1-location-map",
        "scope": "python"
    },
    "location.CfnPlaceIndex": {
        "body": [
            "location.CfnPlaceIndex(self, \"${1:id}\", ",
            "        dataSource=${2:str}, # Required",
            "        dataSourceConfiguration={",
            "            intendedUse=${3:str},",
            "        },",
            "        description=${4:str},",
            "        indexName=${5:str}, # Required",
            "        pricingPlan=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: location.CfnPlaceIndex",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-location.CfnPlaceIndex",
            "Attributes: ",
            "  attrIndexArn",
            "  attrCreateTime",
            "  attrUpdateTime",
            "  attrArn"
        ],
        "prefix": "l1-location-placeindex",
        "scope": "python"
    },
    "location.CfnRouteCalculator": {
        "body": [
            "location.CfnRouteCalculator(self, \"${1:id}\", ",
            "        calculatorName=${2:str}, # Required",
            "        dataSource=${3:str}, # Required",
            "        description=${4:str},",
            "        pricingPlan=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: location.CfnRouteCalculator",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-location.CfnRouteCalculator",
            "Attributes: ",
            "  attrCreateTime",
            "  attrUpdateTime",
            "  attrCalculatorArn",
            "  attrArn"
        ],
        "prefix": "l1-location-routecalculator",
        "scope": "python"
    },
    "location.CfnTracker": {
        "body": [
            "location.CfnTracker(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        eventBridgeEnabled=${3:bool},",
            "        kmsKeyEnableGeospatialQueries=${4:bool},",
            "        kmsKeyId=${5:str},",
            "        positionFiltering=${6:str},",
            "        tags=[],",
            "        trackerName=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: location.CfnTracker",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-location.CfnTracker",
            "Attributes: ",
            "  attrCreateTime",
            "  attrUpdateTime",
            "  attrArn",
            "  attrTrackerArn"
        ],
        "prefix": "l1-location-tracker",
        "scope": "python"
    },
    "location.CfnTrackerConsumer": {
        "body": [
            "location.CfnTrackerConsumer(self, \"${1:id}\", ",
            "        consumerArn=${2:str}, # Required",
            "        trackerName=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: location.CfnTrackerConsumer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-location.CfnTrackerConsumer"
        ],
        "prefix": "l1-location-trackerconsumer",
        "scope": "python"
    },
    "logs.CfnAccountPolicy": {
        "body": [
            "logs.CfnAccountPolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:str}, # Required",
            "        policyName=${3:str}, # Required",
            "        policyType=${4:str}, # Required",
            "        scope=${5:str},",
            "        selectionCriteria=${6:str},",
            ")"
        ],
        "description": [
            "Construct: logs.CfnAccountPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnAccountPolicy",
            "Attributes: ",
            "  attrAccountId"
        ],
        "prefix": "l1-logs-accountpolicy",
        "scope": "python"
    },
    "logs.CfnDelivery": {
        "body": [
            "logs.CfnDelivery(self, \"${1:id}\", ",
            "        deliveryDestinationArn=${2:str}, # Required",
            "        deliverySourceName=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: logs.CfnDelivery",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnDelivery",
            "Attributes: ",
            "  attrDeliveryId",
            "  attrArn",
            "  attrDeliveryDestinationType"
        ],
        "prefix": "l1-logs-delivery",
        "scope": "python"
    },
    "logs.CfnDeliveryDestination": {
        "body": [
            "logs.CfnDeliveryDestination(self, \"${1:id}\", ",
            "        deliveryDestinationPolicy=${2:dict},",
            "        destinationResourceArn=${3:str},",
            "        name=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: logs.CfnDeliveryDestination",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnDeliveryDestination",
            "Attributes: ",
            "  attrArn",
            "  attrDeliveryDestinationType"
        ],
        "prefix": "l1-logs-deliverydestination",
        "scope": "python"
    },
    "logs.CfnDeliverySource": {
        "body": [
            "logs.CfnDeliverySource(self, \"${1:id}\", ",
            "        logType=${2:str},",
            "        name=${3:str}, # Required",
            "        resourceArn=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: logs.CfnDeliverySource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnDeliverySource",
            "Attributes: ",
            "  attrService",
            "  attrArn",
            "  attrResourceArns"
        ],
        "prefix": "l1-logs-deliverysource",
        "scope": "python"
    },
    "logs.CfnDestination": {
        "body": [
            "logs.CfnDestination(self, \"${1:id}\", ",
            "        destinationName=${2:str}, # Required",
            "        destinationPolicy=${3:str},",
            "        roleArn=${4:str}, # Required",
            "        targetArn=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: logs.CfnDestination",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnDestination",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-logs-destination",
        "scope": "python"
    },
    "logs.CfnLogAnomalyDetector": {
        "body": [
            "logs.CfnLogAnomalyDetector(self, \"${1:id}\", ",
            "        accountId=${2:str},",
            "        anomalyVisibilityTime=${3:float},",
            "        detectorName=${4:str},",
            "        evaluationFrequency=${5:str},",
            "        filterPattern=${6:str},",
            "        kmsKeyId=${7:str},",
            "        logGroupArnList=[],",
            ")"
        ],
        "description": [
            "Construct: logs.CfnLogAnomalyDetector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnLogAnomalyDetector",
            "Attributes: ",
            "  attrCreationTimeStamp",
            "  attrAnomalyDetectorStatus",
            "  attrAnomalyDetectorArn",
            "  attrLastModifiedTimeStamp"
        ],
        "prefix": "l1-logs-loganomalydetector",
        "scope": "python"
    },
    "logs.CfnLogGroup": {
        "body": [
            "logs.CfnLogGroup(self, \"${1:id}\", ",
            "        dataProtectionPolicy=${2:dict},",
            "        kmsKeyId=${3:str},",
            "        logGroupClass=${4:str},",
            "        logGroupName=${5:str},",
            "        retentionInDays=${6:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: logs.CfnLogGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnLogGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-logs-loggroup",
        "scope": "python"
    },
    "logs.CfnLogStream": {
        "body": [
            "logs.CfnLogStream(self, \"${1:id}\", ",
            "        logGroupName=${2:str}, # Required",
            "        logStreamName=${3:str},",
            ")"
        ],
        "description": [
            "Construct: logs.CfnLogStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnLogStream"
        ],
        "prefix": "l1-logs-logstream",
        "scope": "python"
    },
    "logs.CfnMetricFilter": {
        "body": [
            "logs.CfnMetricFilter(self, \"${1:id}\", ",
            "        filterName=${2:str},",
            "        filterPattern=${3:str}, # Required",
            "        logGroupName=${4:str}, # Required",
            "        metricTransformations=[], # Required",
            ")"
        ],
        "description": [
            "Construct: logs.CfnMetricFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnMetricFilter"
        ],
        "prefix": "l1-logs-metricfilter",
        "scope": "python"
    },
    "logs.CfnQueryDefinition": {
        "body": [
            "logs.CfnQueryDefinition(self, \"${1:id}\", ",
            "        logGroupNames=[],",
            "        name=${3:str}, # Required",
            "        queryString=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: logs.CfnQueryDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnQueryDefinition",
            "Attributes: ",
            "  attrQueryDefinitionId"
        ],
        "prefix": "l1-logs-querydefinition",
        "scope": "python"
    },
    "logs.CfnResourcePolicy": {
        "body": [
            "logs.CfnResourcePolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:str}, # Required",
            "        policyName=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: logs.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnResourcePolicy"
        ],
        "prefix": "l1-logs-resourcepolicy",
        "scope": "python"
    },
    "logs.CfnSubscriptionFilter": {
        "body": [
            "logs.CfnSubscriptionFilter(self, \"${1:id}\", ",
            "        destinationArn=${2:str}, # Required",
            "        distribution=${3:str},",
            "        filterName=${4:str},",
            "        filterPattern=${5:str}, # Required",
            "        logGroupName=${6:str}, # Required",
            "        roleArn=${7:str},",
            ")"
        ],
        "description": [
            "Construct: logs.CfnSubscriptionFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-logs.CfnSubscriptionFilter"
        ],
        "prefix": "l1-logs-subscriptionfilter",
        "scope": "python"
    },
    "lookoutequipment.CfnInferenceScheduler": {
        "body": [
            "lookoutequipment.CfnInferenceScheduler(self, \"${1:id}\", ",
            "        dataDelayOffsetInMinutes=${2:int},",
            "        dataInputConfiguration={",
            "            inputTimeZoneOffset=${4:str},",
            "        },",
            "        dataOutputConfiguration={",
            "            kmsKeyId=${4:str},",
            "        },",
            "        dataUploadFrequency=${5:str}, # Required",
            "        inferenceSchedulerName=${6:str},",
            "        modelName=${7:str}, # Required",
            "        roleArn=${8:str}, # Required",
            "        serverSideKmsKeyId=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: lookoutequipment.CfnInferenceScheduler",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lookoutequipment.CfnInferenceScheduler",
            "Attributes: ",
            "  attrInferenceSchedulerArn"
        ],
        "prefix": "l1-lookoutequipment-inferencescheduler",
        "scope": "python"
    },
    "lookoutmetrics.CfnAlert": {
        "body": [
            "lookoutmetrics.CfnAlert(self, \"${1:id}\", ",
            "        action={",
            "        },",
            "        alertDescription=${3:str},",
            "        alertName=${4:str},",
            "        alertSensitivityThreshold=${5:int}, # Required",
            "        anomalyDetectorArn=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lookoutmetrics.CfnAlert",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lookoutmetrics.CfnAlert",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-lookoutmetrics-alert",
        "scope": "python"
    },
    "lookoutmetrics.CfnAnomalyDetector": {
        "body": [
            "lookoutmetrics.CfnAnomalyDetector(self, \"${1:id}\", ",
            "        anomalyDetectorConfig={",
            "            anomalyDetectorFrequency=${2:str},",
            "        },",
            "        anomalyDetectorDescription=${3:str},",
            "        anomalyDetectorName=${4:str},",
            "        kmsKeyArn=${5:str},",
            "        metricSetList=[], # Required",
            ")"
        ],
        "description": [
            "Construct: lookoutmetrics.CfnAnomalyDetector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lookoutmetrics.CfnAnomalyDetector",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-lookoutmetrics-anomalydetector",
        "scope": "python"
    },
    "lookoutvision.CfnProject": {
        "body": [
            "lookoutvision.CfnProject(self, \"${1:id}\", ",
            "        projectName=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: lookoutvision.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lookoutvision.CfnProject",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-lookoutvision-project",
        "scope": "python"
    },
    "m2.CfnApplication": {
        "body": [
            "m2.CfnApplication(self, \"${1:id}\", ",
            "        definition={",
            "            content=${2:str},",
            "            s3Location=${3:str},",
            "        },",
            "        description=${3:str},",
            "        engineType=${4:str}, # Required",
            "        kmsKeyId=${5:str},",
            "        name=${6:str}, # Required",
            "        roleArn=${7:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: m2.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-m2.CfnApplication",
            "Attributes: ",
            "  attrApplicationArn",
            "  attrApplicationId"
        ],
        "prefix": "l1-m2-application",
        "scope": "python"
    },
    "m2.CfnEnvironment": {
        "body": [
            "m2.CfnEnvironment(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        engineType=${3:str}, # Required",
            "        engineVersion=${4:str},",
            "        highAvailabilityConfig={",
            "            desiredCapacity=${5:int},",
            "        },",
            "        instanceType=${6:str}, # Required",
            "        kmsKeyId=${7:str},",
            "        name=${8:str}, # Required",
            "        preferredMaintenanceWindow=${9:str},",
            "        publiclyAccessible=${10:bool},",
            "        securityGroupIds=[],",
            "        storageConfigurations=[],",
            "        subnetIds=[],",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: m2.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-m2.CfnEnvironment",
            "Attributes: ",
            "  attrEnvironmentId",
            "  attrEnvironmentArn"
        ],
        "prefix": "l1-m2-environment",
        "scope": "python"
    },
    "macie.CfnAllowList": {
        "body": [
            "macie.CfnAllowList(self, \"${1:id}\", ",
            "        criteria={",
            "            regex=${2:str},",
            "        },",
            "        description=${3:str},",
            "        name=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: macie.CfnAllowList",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-macie.CfnAllowList",
            "Attributes: ",
            "  attrStatus",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-macie-allowlist",
        "scope": "python"
    },
    "macie.CfnCustomDataIdentifier": {
        "body": [
            "macie.CfnCustomDataIdentifier(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        ignoreWords=[],",
            "        keywords=[],",
            "        maximumMatchDistance=${5:int},",
            "        name=${6:str}, # Required",
            "        regex=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: macie.CfnCustomDataIdentifier",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-macie.CfnCustomDataIdentifier",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-macie-customdataidentifier",
        "scope": "python"
    },
    "macie.CfnFindingsFilter": {
        "body": [
            "macie.CfnFindingsFilter(self, \"${1:id}\", ",
            "        action=${2:str},",
            "        description=${3:str},",
            "        findingCriteria={",
            "        },",
            "        name=${5:str}, # Required",
            "        position=${6:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: macie.CfnFindingsFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-macie.CfnFindingsFilter",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-macie-findingsfilter",
        "scope": "python"
    },
    "macie.CfnSession": {
        "body": [
            "macie.CfnSession(self, \"${1:id}\", ",
            "        findingPublishingFrequency=${2:str},",
            "        status=${3:str},",
            ")"
        ],
        "description": [
            "Construct: macie.CfnSession",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-macie.CfnSession",
            "Attributes: ",
            "  attrServiceRole",
            "  attrAwsAccountId"
        ],
        "prefix": "l1-macie-session",
        "scope": "python"
    },
    "managedblockchain.CfnAccessor": {
        "body": [
            "managedblockchain.CfnAccessor(self, \"${1:id}\", ",
            "        accessorType=${2:str}, # Required",
            "        networkType=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: managedblockchain.CfnAccessor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-managedblockchain.CfnAccessor",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationDate",
            "  attrBillingToken",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-managedblockchain-accessor",
        "scope": "python"
    },
    "managedblockchain.CfnMember": {
        "body": [
            "managedblockchain.CfnMember(self, \"${1:id}\", ",
            "        invitationId=${2:str},",
            "        memberConfiguration={",
            "            description=${3:str},",
            "            name=${5:str},",
            "        },",
            "        networkConfiguration={",
            "            description=${4:str},",
            "            framework=${5:str},",
            "            frameworkVersion=${6:str},",
            "            name=${7:str},",
            "        },",
            "        networkId=${5:str},",
            ")"
        ],
        "description": [
            "Construct: managedblockchain.CfnMember",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-managedblockchain.CfnMember",
            "Attributes: ",
            "  attrMemberId",
            "  attrNetworkId"
        ],
        "prefix": "l1-managedblockchain-member",
        "scope": "python"
    },
    "managedblockchain.CfnNode": {
        "body": [
            "managedblockchain.CfnNode(self, \"${1:id}\", ",
            "        memberId=${2:str},",
            "        networkId=${3:str}, # Required",
            "        nodeConfiguration={",
            "            availabilityZone=${4:str},",
            "            instanceType=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: managedblockchain.CfnNode",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-managedblockchain.CfnNode",
            "Attributes: ",
            "  attrMemberId",
            "  attrNodeId",
            "  attrArn",
            "  attrNetworkId"
        ],
        "prefix": "l1-managedblockchain-node",
        "scope": "python"
    },
    "mediaconnect.CfnBridge": {
        "body": [
            "mediaconnect.CfnBridge(self, \"${1:id}\", ",
            "        egressGatewayBridge={",
            "            maxBitrate=${2:int},",
            "        },",
            "        ingressGatewayBridge={",
            "            maxBitrate=${3:int},",
            "            maxOutputs=${4:int},",
            "        },",
            "        name=${4:str}, # Required",
            "        outputs=[],",
            "        placementArn=${6:str}, # Required",
            "        sourceFailoverConfig={",
            "            failoverMode=${7:str},",
            "            state=${9:str},",
            "        },",
            "        sources=[], # Required",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnBridge",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnBridge",
            "Attributes: ",
            "  attrBridgeArn",
            "  attrBridgeState"
        ],
        "prefix": "l1-mediaconnect-bridge",
        "scope": "python"
    },
    "mediaconnect.CfnBridgeOutput": {
        "body": [
            "mediaconnect.CfnBridgeOutput(self, \"${1:id}\", ",
            "        bridgeArn=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        networkOutput={",
            "            ipAddress=${4:str},",
            "            networkName=${5:str},",
            "            port=${6:int},",
            "            protocol=${7:str},",
            "            ttl=${8:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnBridgeOutput",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnBridgeOutput"
        ],
        "prefix": "l1-mediaconnect-bridgeoutput",
        "scope": "python"
    },
    "mediaconnect.CfnBridgeSource": {
        "body": [
            "mediaconnect.CfnBridgeSource(self, \"${1:id}\", ",
            "        bridgeArn=${2:str}, # Required",
            "        flowSource={",
            "            flowArn=${3:str},",
            "        },",
            "        name=${4:str}, # Required",
            "        networkSource={",
            "            multicastIp=${5:str},",
            "            networkName=${6:str},",
            "            port=${7:int},",
            "            protocol=${8:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnBridgeSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnBridgeSource"
        ],
        "prefix": "l1-mediaconnect-bridgesource",
        "scope": "python"
    },
    "mediaconnect.CfnFlow": {
        "body": [
            "mediaconnect.CfnFlow(self, \"${1:id}\", ",
            "        availabilityZone=${2:str},",
            "        maintenance={",
            "            maintenanceDay=${3:str},",
            "            maintenanceStartHour=${4:str},",
            "        },",
            "        mediaStreams=[],",
            "        name=${5:str}, # Required",
            "        source={",
            "            description=${7:str},",
            "            entitlementArn=${8:str},",
            "            ingestIp=${10:str},",
            "            ingestPort=${11:int},",
            "            maxBitrate=${12:int},",
            "            maxLatency=${13:int},",
            "            maxSyncBuffer=${14:int},",
            "            mediaStreamSourceConfigurations=[],",
            "            minLatency=${16:int},",
            "            name=${17:str},",
            "            protocol=${18:str},",
            "            senderControlPort=${19:int},",
            "            senderIpAddress=${20:str},",
            "            sourceArn=${21:str},",
            "            sourceIngestPort=${22:str},",
            "            sourceListenerAddress=${23:str},",
            "            sourceListenerPort=${24:int},",
            "            streamId=${25:str},",
            "            vpcInterfaceName=${26:str},",
            "            whitelistCidr=${27:str},",
            "        },",
            "        sourceFailoverConfig={",
            "            failoverMode=${7:str},",
            "            recoveryWindow=${8:int},",
            "            state=${10:str},",
            "        },",
            "        vpcInterfaces=[],",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnFlow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnFlow",
            "Attributes: ",
            "  attrFlowAvailabilityZone",
            "  attrSource.SourceIngestPort",
            "  attrSource.IngestIp",
            "  attrSource.SourceArn",
            "  attrEgressIp",
            "  attrFlowArn"
        ],
        "prefix": "l1-mediaconnect-flow",
        "scope": "python"
    },
    "mediaconnect.CfnFlowEntitlement": {
        "body": [
            "mediaconnect.CfnFlowEntitlement(self, \"${1:id}\", ",
            "        dataTransferSubscriberFeePercent=${2:int},",
            "        description=${3:str}, # Required",
            "        encryption={",
            "            algorithm=${4:str},",
            "            constantInitializationVector=${5:str},",
            "            deviceId=${6:str},",
            "            keyType=${7:str},",
            "            region=${8:str},",
            "            resourceId=${9:str},",
            "            roleArn=${10:str},",
            "            secretArn=${11:str},",
            "            url=${12:str},",
            "        },",
            "        entitlementStatus=${5:str},",
            "        flowArn=${6:str}, # Required",
            "        name=${7:str}, # Required",
            "        subscribers=[], # Required",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnFlowEntitlement",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnFlowEntitlement",
            "Attributes: ",
            "  attrEntitlementArn"
        ],
        "prefix": "l1-mediaconnect-flowentitlement",
        "scope": "python"
    },
    "mediaconnect.CfnFlowOutput": {
        "body": [
            "mediaconnect.CfnFlowOutput(self, \"${1:id}\", ",
            "        cidrAllowList=[],",
            "        description=${3:str},",
            "        destination=${4:str},",
            "        encryption={",
            "            algorithm=${5:str},",
            "            keyType=${6:str},",
            "            roleArn=${7:str},",
            "            secretArn=${8:str},",
            "        },",
            "        flowArn=${6:str}, # Required",
            "        maxLatency=${7:int},",
            "        mediaStreamOutputConfigurations=[],",
            "        minLatency=${9:int},",
            "        name=${10:str},",
            "        port=${11:int},",
            "        protocol=${12:str}, # Required",
            "        remoteId=${13:str},",
            "        smoothingLatency=${14:int},",
            "        streamId=${15:str},",
            "        vpcInterfaceAttachment={",
            "            vpcInterfaceName=${16:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnFlowOutput",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnFlowOutput",
            "Attributes: ",
            "  attrOutputArn"
        ],
        "prefix": "l1-mediaconnect-flowoutput",
        "scope": "python"
    },
    "mediaconnect.CfnFlowSource": {
        "body": [
            "mediaconnect.CfnFlowSource(self, \"${1:id}\", ",
            "        decryption={",
            "            algorithm=${2:str},",
            "            constantInitializationVector=${3:str},",
            "            deviceId=${4:str},",
            "            keyType=${5:str},",
            "            region=${6:str},",
            "            resourceId=${7:str},",
            "            roleArn=${8:str},",
            "            secretArn=${9:str},",
            "            url=${10:str},",
            "        },",
            "        description=${3:str}, # Required",
            "        entitlementArn=${4:str},",
            "        flowArn=${5:str},",
            "        gatewayBridgeSource={",
            "            bridgeArn=${6:str},",
            "        },",
            "        ingestPort=${7:int},",
            "        maxBitrate=${8:int},",
            "        maxLatency=${9:int},",
            "        minLatency=${10:int},",
            "        name=${11:str}, # Required",
            "        protocol=${12:str},",
            "        senderControlPort=${13:int},",
            "        senderIpAddress=${14:str},",
            "        sourceListenerAddress=${15:str},",
            "        sourceListenerPort=${16:int},",
            "        streamId=${17:str},",
            "        vpcInterfaceName=${18:str},",
            "        whitelistCidr=${19:str},",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnFlowSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnFlowSource",
            "Attributes: ",
            "  attrIngestIp",
            "  attrSourceArn",
            "  attrSourceIngestPort"
        ],
        "prefix": "l1-mediaconnect-flowsource",
        "scope": "python"
    },
    "mediaconnect.CfnFlowVpcInterface": {
        "body": [
            "mediaconnect.CfnFlowVpcInterface(self, \"${1:id}\", ",
            "        flowArn=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            "        securityGroupIds=[], # Required",
            "        subnetId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnFlowVpcInterface",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnFlowVpcInterface",
            "Attributes: ",
            "  attrNetworkInterfaceIds"
        ],
        "prefix": "l1-mediaconnect-flowvpcinterface",
        "scope": "python"
    },
    "mediaconnect.CfnGateway": {
        "body": [
            "mediaconnect.CfnGateway(self, \"${1:id}\", ",
            "        egressCidrBlocks=[], # Required",
            "        name=${3:str}, # Required",
            "        networks=[], # Required",
            ")"
        ],
        "description": [
            "Construct: mediaconnect.CfnGateway",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconnect.CfnGateway",
            "Attributes: ",
            "  attrGatewayArn",
            "  attrGatewayState"
        ],
        "prefix": "l1-mediaconnect-gateway",
        "scope": "python"
    },
    "mediaconvert.CfnJobTemplate": {
        "body": [
            "mediaconvert.CfnJobTemplate(self, \"${1:id}\", ",
            "        accelerationSettings={",
            "            mode=${2:str},",
            "        },",
            "        category=${3:str},",
            "        description=${4:str},",
            "        hopDestinations=[],",
            "        name=${6:str},",
            "        priority=${7:int},",
            "        queue=${8:str},",
            "        settingsJson=${9:dict}, # Required",
            "        statusUpdateInterval=${10:str},",
            "        tags=${11:dict},",
            ")"
        ],
        "description": [
            "Construct: mediaconvert.CfnJobTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconvert.CfnJobTemplate",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-mediaconvert-jobtemplate",
        "scope": "python"
    },
    "mediaconvert.CfnPreset": {
        "body": [
            "mediaconvert.CfnPreset(self, \"${1:id}\", ",
            "        category=${2:str},",
            "        description=${3:str},",
            "        name=${4:str},",
            "        settingsJson=${5:dict}, # Required",
            "        tags=${6:dict},",
            ")"
        ],
        "description": [
            "Construct: mediaconvert.CfnPreset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconvert.CfnPreset",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-mediaconvert-preset",
        "scope": "python"
    },
    "mediaconvert.CfnQueue": {
        "body": [
            "mediaconvert.CfnQueue(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str},",
            "        pricingPlan=${4:str},",
            "        status=${5:str},",
            "        tags=${6:dict},",
            ")"
        ],
        "description": [
            "Construct: mediaconvert.CfnQueue",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediaconvert.CfnQueue",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-mediaconvert-queue",
        "scope": "python"
    },
    "medialive.CfnChannel": {
        "body": [
            "medialive.CfnChannel(self, \"${1:id}\", ",
            "        cdiInputSpecification={",
            "            resolution=${2:str},",
            "        },",
            "        channelClass=${3:str},",
            "        destinations=[],",
            "        encoderSettings={",
            "            audioDescriptions=[],",
            "            captionDescriptions=[],",
            "            outputGroups=[],",
            "            videoDescriptions=[],",
            "        },",
            "        inputAttachments=[],",
            "        inputSpecification={",
            "            codec=${7:str},",
            "            maximumBitrate=${8:str},",
            "            resolution=${9:str},",
            "        },",
            "        logLevel=${8:str},",
            "        maintenance={",
            "            maintenanceDay=${9:str},",
            "            maintenanceStartTime=${10:str},",
            "        },",
            "        name=${10:str},",
            "        roleArn=${11:str},",
            "        tags=${12:dict},",
            "        vpc={",
            "            publicAddressAllocationIds=[],",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: medialive.CfnChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-medialive.CfnChannel",
            "Attributes: ",
            "  attrArn",
            "  attrInputs"
        ],
        "prefix": "l1-medialive-channel",
        "scope": "python"
    },
    "medialive.CfnInput": {
        "body": [
            "medialive.CfnInput(self, \"${1:id}\", ",
            "        destinations=[],",
            "        inputDevices=[],",
            "        inputSecurityGroups=[],",
            "        mediaConnectFlows=[],",
            "        name=${6:str},",
            "        roleArn=${7:str},",
            "        sources=[],",
            "        tags=${9:dict},",
            "        type=${10:str},",
            "        vpc={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: medialive.CfnInput",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-medialive.CfnInput",
            "Attributes: ",
            "  attrDestinations",
            "  attrArn",
            "  attrSources"
        ],
        "prefix": "l1-medialive-input",
        "scope": "python"
    },
    "medialive.CfnInputSecurityGroup": {
        "body": [
            "medialive.CfnInputSecurityGroup(self, \"${1:id}\", ",
            "        tags=${2:dict},",
            "        whitelistRules=[],",
            ")"
        ],
        "description": [
            "Construct: medialive.CfnInputSecurityGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-medialive.CfnInputSecurityGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-medialive-inputsecuritygroup",
        "scope": "python"
    },
    "medialive.CfnMultiplex": {
        "body": [
            "medialive.CfnMultiplex(self, \"${1:id}\", ",
            "        availabilityZones=[], # Required",
            "        destinations=[],",
            "        multiplexSettings={",
            "            maximumVideoBufferDelayMilliseconds=${4:int},",
            "            transportStreamBitrate=${5:int},",
            "            transportStreamId=${6:int},",
            "            transportStreamReservedBitrate=${7:int},",
            "        },",
            "        name=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: medialive.CfnMultiplex",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-medialive.CfnMultiplex",
            "Attributes: ",
            "  attrState",
            "  attrProgramCount",
            "  attrPipelinesRunningCount",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-medialive-multiplex",
        "scope": "python"
    },
    "medialive.CfnMultiplexprogram": {
        "body": [
            "medialive.CfnMultiplexprogram(self, \"${1:id}\", ",
            "        channelId=${2:str},",
            "        multiplexId=${3:str},",
            "        multiplexProgramSettings={",
            "            preferredChannelPipeline=${4:str},",
            "            programNumber=${5:int},",
            "        },",
            "        packetIdentifiersMap={",
            "            audioPids=[],",
            "            dvbSubPids=[],",
            "            dvbTeletextPid=${7:int},",
            "            etvPlatformPid=${8:int},",
            "            etvSignalPid=${9:int},",
            "            klvDataPids=[],",
            "            pcrPid=${11:int},",
            "            pmtPid=${12:int},",
            "            privateMetadataPid=${13:int},",
            "            scte27Pids=[],",
            "            scte35Pid=${15:int},",
            "            timedMetadataPid=${16:int},",
            "            videoPid=${17:int},",
            "        },",
            "        pipelineDetails=[],",
            "        preferredChannelPipeline=${7:str},",
            "        programName=${8:str},",
            ")"
        ],
        "description": [
            "Construct: medialive.CfnMultiplexprogram",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-medialive.CfnMultiplexprogram"
        ],
        "prefix": "l1-medialive-multiplexprogram",
        "scope": "python"
    },
    "mediapackage.CfnAsset": {
        "body": [
            "mediapackage.CfnAsset(self, \"${1:id}\", ",
            "        egressEndpoints=[],",
            "        id=${3:str}, # Required",
            "        packagingGroupId=${4:str}, # Required",
            "        resourceId=${5:str},",
            "        sourceArn=${6:str}, # Required",
            "        sourceRoleArn=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackage.CfnAsset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackage.CfnAsset",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrArn"
        ],
        "prefix": "l1-mediapackage-asset",
        "scope": "python"
    },
    "mediapackage.CfnChannel": {
        "body": [
            "mediapackage.CfnChannel(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        egressAccessLogs={",
            "            logGroupName=${3:str},",
            "        },",
            "        hlsIngest={",
            "            ingestEndpoints=[],",
            "        },",
            "        id=${5:str}, # Required",
            "        ingressAccessLogs={",
            "            logGroupName=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackage.CfnChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackage.CfnChannel",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-mediapackage-channel",
        "scope": "python"
    },
    "mediapackage.CfnOriginEndpoint": {
        "body": [
            "mediapackage.CfnOriginEndpoint(self, \"${1:id}\", ",
            "        authorization={",
            "            cdnIdentifierSecret=${2:str},",
            "            secretsRoleArn=${3:str},",
            "        },",
            "        channelId=${3:str}, # Required",
            "        cmafPackage={",
            "            hlsManifests=[],",
            "            segmentDurationSeconds=${6:int},",
            "            segmentPrefix=${7:str},",
            "        },",
            "        dashPackage={",
            "            adTriggers=[],",
            "            adsOnDeliveryRestrictions=${6:str},",
            "            includeIframeOnlyStream=${8:bool},",
            "            manifestLayout=${9:str},",
            "            manifestWindowSeconds=${10:int},",
            "            minBufferTimeSeconds=${11:int},",
            "            minUpdatePeriodSeconds=${12:int},",
            "            periodTriggers=[],",
            "            profile=${14:str},",
            "            segmentDurationSeconds=${15:int},",
            "            segmentTemplateFormat=${16:str},",
            "            suggestedPresentationDelaySeconds=${18:int},",
            "            utcTiming=${19:str},",
            "            utcTimingUri=${20:str},",
            "        },",
            "        description=${6:str},",
            "        hlsPackage={",
            "            adMarkers=${7:str},",
            "            adTriggers=[],",
            "            adsOnDeliveryRestrictions=${9:str},",
            "            includeDvbSubtitles=${11:bool},",
            "            includeIframeOnlyStream=${12:bool},",
            "            playlistType=${13:str},",
            "            playlistWindowSeconds=${14:int},",
            "            programDateTimeIntervalSeconds=${15:int},",
            "            segmentDurationSeconds=${16:int},",
            "            useAudioRenditionGroup=${18:bool},",
            "        },",
            "        id=${8:str}, # Required",
            "        manifestName=${9:str},",
            "        mssPackage={",
            "            manifestWindowSeconds=${11:int},",
            "            segmentDurationSeconds=${12:int},",
            "        },",
            "        origination=${11:str},",
            "        startoverWindowSeconds=${12:int},",
            "        tags=[],",
            "        timeDelaySeconds=${14:int},",
            "        whitelist=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackage.CfnOriginEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackage.CfnOriginEndpoint",
            "Attributes: ",
            "  attrArn",
            "  attrUrl"
        ],
        "prefix": "l1-mediapackage-originendpoint",
        "scope": "python"
    },
    "mediapackage.CfnPackagingConfiguration": {
        "body": [
            "mediapackage.CfnPackagingConfiguration(self, \"${1:id}\", ",
            "        cmafPackage={",
            "            hlsManifests=[],",
            "            includeEncoderConfigurationInSegments=${4:bool},",
            "            segmentDurationSeconds=${5:int},",
            "        },",
            "        dashPackage={",
            "            dashManifests=[],",
            "            includeEncoderConfigurationInSegments=${5:bool},",
            "            includeIframeOnlyStream=${6:bool},",
            "            periodTriggers=[],",
            "            segmentDurationSeconds=${8:int},",
            "            segmentTemplateFormat=${9:str},",
            "        },",
            "        hlsPackage={",
            "            hlsManifests=[],",
            "            includeDvbSubtitles=${6:bool},",
            "            segmentDurationSeconds=${7:int},",
            "            useAudioRenditionGroup=${8:bool},",
            "        },",
            "        id=${5:str}, # Required",
            "        mssPackage={",
            "            mssManifests=[],",
            "            segmentDurationSeconds=${8:int},",
            "        },",
            "        packagingGroupId=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackage.CfnPackagingConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackage.CfnPackagingConfiguration",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-mediapackage-packagingconfiguration",
        "scope": "python"
    },
    "mediapackage.CfnPackagingGroup": {
        "body": [
            "mediapackage.CfnPackagingGroup(self, \"${1:id}\", ",
            "        authorization={",
            "            cdnIdentifierSecret=${2:str},",
            "            secretsRoleArn=${3:str},",
            "        },",
            "        egressAccessLogs={",
            "            logGroupName=${3:str},",
            "        },",
            "        id=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackage.CfnPackagingGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackage.CfnPackagingGroup",
            "Attributes: ",
            "  attrDomainName",
            "  attrArn"
        ],
        "prefix": "l1-mediapackage-packaginggroup",
        "scope": "python"
    },
    "mediapackagev2.CfnChannel": {
        "body": [
            "mediapackagev2.CfnChannel(self, \"${1:id}\", ",
            "        channelGroupName=${2:str}, # Required",
            "        channelName=${3:str}, # Required",
            "        description=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackagev2.CfnChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackagev2.CfnChannel",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrIngestEndpoints",
            "  attrCreatedAt",
            "  attrArn",
            "  attrIngestEndpointUrls"
        ],
        "prefix": "l1-mediapackagev2-channel",
        "scope": "python"
    },
    "mediapackagev2.CfnChannelGroup": {
        "body": [
            "mediapackagev2.CfnChannelGroup(self, \"${1:id}\", ",
            "        channelGroupName=${2:str}, # Required",
            "        description=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackagev2.CfnChannelGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackagev2.CfnChannelGroup",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrCreatedAt",
            "  attrArn",
            "  attrEgressDomain"
        ],
        "prefix": "l1-mediapackagev2-channelgroup",
        "scope": "python"
    },
    "mediapackagev2.CfnChannelPolicy": {
        "body": [
            "mediapackagev2.CfnChannelPolicy(self, \"${1:id}\", ",
            "        channelGroupName=${2:str}, # Required",
            "        channelName=${3:str}, # Required",
            "        policy=${4:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: mediapackagev2.CfnChannelPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackagev2.CfnChannelPolicy"
        ],
        "prefix": "l1-mediapackagev2-channelpolicy",
        "scope": "python"
    },
    "mediapackagev2.CfnOriginEndpoint": {
        "body": [
            "mediapackagev2.CfnOriginEndpoint(self, \"${1:id}\", ",
            "        channelGroupName=${2:str}, # Required",
            "        channelName=${3:str}, # Required",
            "        containerType=${4:str},",
            "        dashManifests=[],",
            "        description=${6:str},",
            "        hlsManifests=[],",
            "        lowLatencyHlsManifests=[],",
            "        originEndpointName=${9:str}, # Required",
            "        segment={",
            "            includeIframeOnlyStreams=${11:bool},",
            "            segmentDurationSeconds=${13:int},",
            "            segmentName=${14:str},",
            "            tsIncludeDvbSubtitles=${15:bool},",
            "            tsUseAudioRenditionGroup=${16:bool},",
            "        },",
            "        startoverWindowSeconds=${11:int},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediapackagev2.CfnOriginEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackagev2.CfnOriginEndpoint",
            "Attributes: ",
            "  attrModifiedAt",
            "  attrLowLatencyHlsManifestUrls",
            "  attrCreatedAt",
            "  attrArn",
            "  attrHlsManifestUrls",
            "  attrDashManifestUrls"
        ],
        "prefix": "l1-mediapackagev2-originendpoint",
        "scope": "python"
    },
    "mediapackagev2.CfnOriginEndpointPolicy": {
        "body": [
            "mediapackagev2.CfnOriginEndpointPolicy(self, \"${1:id}\", ",
            "        channelGroupName=${2:str}, # Required",
            "        channelName=${3:str}, # Required",
            "        originEndpointName=${4:str}, # Required",
            "        policy=${5:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: mediapackagev2.CfnOriginEndpointPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediapackagev2.CfnOriginEndpointPolicy"
        ],
        "prefix": "l1-mediapackagev2-originendpointpolicy",
        "scope": "python"
    },
    "mediastore.CfnContainer": {
        "body": [
            "mediastore.CfnContainer(self, \"${1:id}\", ",
            "        accessLoggingEnabled=${2:bool},",
            "        containerName=${3:str}, # Required",
            "        corsPolicy=[],",
            "        lifecyclePolicy=${5:str},",
            "        metricPolicy={",
            "            containerLevelMetrics=${6:str},",
            "            metricPolicyRules=[],",
            "        },",
            "        policy=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediastore.CfnContainer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediastore.CfnContainer",
            "Attributes: ",
            "  attrEndpoint"
        ],
        "prefix": "l1-mediastore-container",
        "scope": "python"
    },
    "mediatailor.CfnChannel": {
        "body": [
            "mediatailor.CfnChannel(self, \"${1:id}\", ",
            "        audiences=[],",
            "        channelName=${3:str}, # Required",
            "        fillerSlate={",
            "            sourceLocationName=${4:str},",
            "            vodSourceName=${5:str},",
            "        },",
            "        logConfiguration={",
            "            logTypes=[],",
            "        },",
            "        outputs=[], # Required",
            "        playbackMode=${7:str}, # Required",
            "        tags=[],",
            "        tier=${9:str},",
            "        timeShiftConfiguration={",
            "            maxTimeDelaySeconds=${10:float},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: mediatailor.CfnChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediatailor.CfnChannel",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-mediatailor-channel",
        "scope": "python"
    },
    "mediatailor.CfnChannelPolicy": {
        "body": [
            "mediatailor.CfnChannelPolicy(self, \"${1:id}\", ",
            "        channelName=${2:str}, # Required",
            "        policy=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: mediatailor.CfnChannelPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediatailor.CfnChannelPolicy"
        ],
        "prefix": "l1-mediatailor-channelpolicy",
        "scope": "python"
    },
    "mediatailor.CfnLiveSource": {
        "body": [
            "mediatailor.CfnLiveSource(self, \"${1:id}\", ",
            "        httpPackageConfigurations=[], # Required",
            "        liveSourceName=${3:str}, # Required",
            "        sourceLocationName=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediatailor.CfnLiveSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediatailor.CfnLiveSource",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-mediatailor-livesource",
        "scope": "python"
    },
    "mediatailor.CfnPlaybackConfiguration": {
        "body": [
            "mediatailor.CfnPlaybackConfiguration(self, \"${1:id}\", ",
            "        adDecisionServerUrl=${2:str}, # Required",
            "        availSuppression={",
            "            fillPolicy=${3:str},",
            "            mode=${4:str},",
            "            value=${5:str},",
            "        },",
            "        bumper={",
            "            endUrl=${4:str},",
            "            startUrl=${5:str},",
            "        },",
            "        cdnConfiguration={",
            "            adSegmentUrlPrefix=${5:str},",
            "            contentSegmentUrlPrefix=${6:str},",
            "        },",
            "        configurationAliases={",
            "        },",
            "        dashConfiguration={",
            "            manifestEndpointPrefix=${7:str},",
            "            mpdLocation=${8:str},",
            "            originManifestType=${9:str},",
            "        },",
            "        hlsConfiguration={",
            "            manifestEndpointPrefix=${8:str},",
            "        },",
            "        livePreRollConfiguration={",
            "            adDecisionServerUrl=${9:str},",
            "            maxDurationSeconds=${10:int},",
            "        },",
            "        manifestProcessingRules={",
            "        },",
            "        name=${11:str}, # Required",
            "        personalizationThresholdSeconds=${12:int},",
            "        slateAdUrl=${13:str},",
            "        tags=[],",
            "        transcodeProfileName=${15:str},",
            "        videoContentSourceUrl=${16:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: mediatailor.CfnPlaybackConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediatailor.CfnPlaybackConfiguration",
            "Attributes: ",
            "  attrHlsConfiguration.ManifestEndpointPrefix",
            "  attrSessionInitializationEndpointPrefix",
            "  attrDashConfiguration.ManifestEndpointPrefix",
            "  attrPlaybackConfigurationArn",
            "  attrPlaybackEndpointPrefix"
        ],
        "prefix": "l1-mediatailor-playbackconfiguration",
        "scope": "python"
    },
    "mediatailor.CfnSourceLocation": {
        "body": [
            "mediatailor.CfnSourceLocation(self, \"${1:id}\", ",
            "        accessConfiguration={",
            "            accessType=${2:str},",
            "        },",
            "        defaultSegmentDeliveryConfiguration={",
            "            baseUrl=${3:str},",
            "        },",
            "        httpConfiguration={",
            "            baseUrl=${4:str},",
            "        },",
            "        segmentDeliveryConfigurations=[],",
            "        sourceLocationName=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: mediatailor.CfnSourceLocation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediatailor.CfnSourceLocation",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-mediatailor-sourcelocation",
        "scope": "python"
    },
    "mediatailor.CfnVodSource": {
        "body": [
            "mediatailor.CfnVodSource(self, \"${1:id}\", ",
            "        httpPackageConfigurations=[], # Required",
            "        sourceLocationName=${3:str}, # Required",
            "        tags=[],",
            "        vodSourceName=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: mediatailor.CfnVodSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mediatailor.CfnVodSource",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-mediatailor-vodsource",
        "scope": "python"
    },
    "memorydb.CfnACL": {
        "body": [
            "memorydb.CfnACL(self, \"${1:id}\", ",
            "        aCLName=${2:str}, # Required",
            "        tags=[],",
            "        userNames=[],",
            ")"
        ],
        "description": [
            "Construct: memorydb.CfnACL",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-memorydb.CfnACL",
            "Attributes: ",
            "  attrStatus",
            "  attrArn"
        ],
        "prefix": "l1-memorydb-acl",
        "scope": "python"
    },
    "memorydb.CfnCluster": {
        "body": [
            "memorydb.CfnCluster(self, \"${1:id}\", ",
            "        aCLName=${2:str}, # Required",
            "        autoMinorVersionUpgrade=${3:bool},",
            "        clusterEndpoint={",
            "            address=${4:str},",
            "            port=${5:int},",
            "        },",
            "        clusterName=${5:str}, # Required",
            "        dataTiering=${6:str},",
            "        description=${7:str},",
            "        engineVersion=${8:str},",
            "        finalSnapshotName=${9:str},",
            "        kmsKeyId=${10:str},",
            "        maintenanceWindow=${11:str},",
            "        nodeType=${12:str}, # Required",
            "        numReplicasPerShard=${13:int},",
            "        numShards=${14:int},",
            "        parameterGroupName=${15:str},",
            "        port=${16:int},",
            "        securityGroupIds=[],",
            "        snapshotArns=[],",
            "        snapshotName=${19:str},",
            "        snapshotRetentionLimit=${20:int},",
            "        snapshotWindow=${21:str},",
            "        snsTopicArn=${22:str},",
            "        snsTopicStatus=${23:str},",
            "        subnetGroupName=${24:str},",
            "        tLSEnabled=${25:bool},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: memorydb.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-memorydb.CfnCluster",
            "Attributes: ",
            "  attrStatus",
            "  attrClusterEndpoint.Address",
            "  attrClusterEndpoint.Port",
            "  attrParameterGroupStatus",
            "  attrARN"
        ],
        "prefix": "l1-memorydb-cluster",
        "scope": "python"
    },
    "memorydb.CfnParameterGroup": {
        "body": [
            "memorydb.CfnParameterGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        family=${3:str}, # Required",
            "        parameterGroupName=${4:str}, # Required",
            "        parameters=${5:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: memorydb.CfnParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-memorydb.CfnParameterGroup",
            "Attributes: ",
            "  attrARN"
        ],
        "prefix": "l1-memorydb-parametergroup",
        "scope": "python"
    },
    "memorydb.CfnSubnetGroup": {
        "body": [
            "memorydb.CfnSubnetGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        subnetGroupName=${3:str}, # Required",
            "        subnetIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: memorydb.CfnSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-memorydb.CfnSubnetGroup",
            "Attributes: ",
            "  attrARN"
        ],
        "prefix": "l1-memorydb-subnetgroup",
        "scope": "python"
    },
    "memorydb.CfnUser": {
        "body": [
            "memorydb.CfnUser(self, \"${1:id}\", ",
            "        accessString=${2:str},",
            "        authenticationMode={",
            "            passwords=[],",
            "            type=${4:str},",
            "        },",
            "        tags=[],",
            "        userName=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: memorydb.CfnUser",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-memorydb.CfnUser",
            "Attributes: ",
            "  attrStatus",
            "  attrArn"
        ],
        "prefix": "l1-memorydb-user",
        "scope": "python"
    },
    "msk.CfnBatchScramSecret": {
        "body": [
            "msk.CfnBatchScramSecret(self, \"${1:id}\", ",
            "        clusterArn=${2:str}, # Required",
            "        secretArnList=[],",
            ")"
        ],
        "description": [
            "Construct: msk.CfnBatchScramSecret",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-msk.CfnBatchScramSecret"
        ],
        "prefix": "l1-msk-batchscramsecret",
        "scope": "python"
    },
    "msk.CfnCluster": {
        "body": [
            "msk.CfnCluster(self, \"${1:id}\", ",
            "        brokerNodeGroupInfo={",
            "            brokerAZDistribution=${2:str},",
            "            clientSubnets=[],",
            "            instanceType=${5:str},",
            "            securityGroups=[],",
            "        },",
            "        clientAuthentication={",
            "        },",
            "        clusterName=${4:str}, # Required",
            "        configurationInfo={",
            "            arn=${5:str},",
            "            revision=${6:int},",
            "        },",
            "        currentVersion=${6:str},",
            "        encryptionInfo={",
            "        },",
            "        enhancedMonitoring=${8:str},",
            "        kafkaVersion=${9:str}, # Required",
            "        loggingInfo={",
            "        },",
            "        numberOfBrokerNodes=${11:int}, # Required",
            "        openMonitoring={",
            "        },",
            "        storageMode=${13:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: msk.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-msk.CfnCluster",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-msk-cluster",
        "scope": "python"
    },
    "msk.CfnClusterPolicy": {
        "body": [
            "msk.CfnClusterPolicy(self, \"${1:id}\", ",
            "        clusterArn=${2:str}, # Required",
            "        policy=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: msk.CfnClusterPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-msk.CfnClusterPolicy",
            "Attributes: ",
            "  attrCurrentVersion"
        ],
        "prefix": "l1-msk-clusterpolicy",
        "scope": "python"
    },
    "msk.CfnConfiguration": {
        "body": [
            "msk.CfnConfiguration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        kafkaVersionsList=[],",
            "        latestRevision={",
            "            creationTime=${4:str},",
            "            description=${5:str},",
            "            revision=${6:int},",
            "        },",
            "        name=${5:str}, # Required",
            "        serverProperties=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: msk.CfnConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-msk.CfnConfiguration",
            "Attributes: ",
            "  attrLatestRevision.Revision",
            "  attrLatestRevision.CreationTime",
            "  attrLatestRevision.Description",
            "  attrArn"
        ],
        "prefix": "l1-msk-configuration",
        "scope": "python"
    },
    "msk.CfnReplicator": {
        "body": [
            "msk.CfnReplicator(self, \"${1:id}\", ",
            "        currentVersion=${2:str},",
            "        description=${3:str},",
            "        kafkaClusters=[], # Required",
            "        replicationInfoList=[], # Required",
            "        replicatorName=${6:str}, # Required",
            "        serviceExecutionRoleArn=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: msk.CfnReplicator",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-msk.CfnReplicator",
            "Attributes: ",
            "  attrReplicatorArn"
        ],
        "prefix": "l1-msk-replicator",
        "scope": "python"
    },
    "msk.CfnServerlessCluster": {
        "body": [
            "msk.CfnServerlessCluster(self, \"${1:id}\", ",
            "        clientAuthentication={",
            "        },",
            "        clusterName=${3:str}, # Required",
            "        tags={",
            "        },",
            "        vpcConfigs=[], # Required",
            ")"
        ],
        "description": [
            "Construct: msk.CfnServerlessCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-msk.CfnServerlessCluster",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-msk-serverlesscluster",
        "scope": "python"
    },
    "msk.CfnVpcConnection": {
        "body": [
            "msk.CfnVpcConnection(self, \"${1:id}\", ",
            "        authentication=${2:str}, # Required",
            "        clientSubnets=[], # Required",
            "        securityGroups=[], # Required",
            "        tags={",
            "        },",
            "        targetClusterArn=${6:str}, # Required",
            "        vpcId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: msk.CfnVpcConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-msk.CfnVpcConnection",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-msk-vpcconnection",
        "scope": "python"
    },
    "mwaa.CfnEnvironment": {
        "body": [
            "mwaa.CfnEnvironment(self, \"${1:id}\", ",
            "        airflowConfigurationOptions=${2:dict},",
            "        airflowVersion=${3:str},",
            "        dagS3Path=${4:str},",
            "        endpointManagement=${5:str},",
            "        environmentClass=${6:str},",
            "        executionRoleArn=${7:str},",
            "        kmsKey=${8:str},",
            "        loggingConfiguration={",
            "        },",
            "        maxWebservers=${10:int},",
            "        maxWorkers=${11:int},",
            "        minWebservers=${12:int},",
            "        minWorkers=${13:int},",
            "        name=${14:str}, # Required",
            "        networkConfiguration={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            "        pluginsS3ObjectVersion=${16:str},",
            "        pluginsS3Path=${17:str},",
            "        requirementsS3ObjectVersion=${18:str},",
            "        requirementsS3Path=${19:str},",
            "        schedulers=${20:int},",
            "        sourceBucketArn=${21:str},",
            "        startupScriptS3ObjectVersion=${22:str},",
            "        startupScriptS3Path=${23:str},",
            "        tags=${24:dict},",
            "        webserverAccessMode=${25:str},",
            "        weeklyMaintenanceWindowStart=${26:str},",
            ")"
        ],
        "description": [
            "Construct: mwaa.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-mwaa.CfnEnvironment",
            "Attributes: ",
            "  attrLoggingConfiguration.TaskLogs.CloudWatchLogGroupArn",
            "  attrWebserverVpcEndpointService",
            "  attrDatabaseVpcEndpointService",
            "  attrCeleryExecutorQueue",
            "  attrLoggingConfiguration.WebserverLogs.CloudWatchLogGroupArn",
            "  attrLoggingConfiguration.DagProcessingLogs.CloudWatchLogGroupArn",
            "  attrWebserverUrl",
            "  attrLoggingConfiguration.SchedulerLogs.CloudWatchLogGroupArn",
            "  attrArn",
            "  attrLoggingConfiguration.WorkerLogs.CloudWatchLogGroupArn"
        ],
        "prefix": "l1-mwaa-environment",
        "scope": "python"
    },
    "neptune.CfnDBCluster": {
        "body": [
            "neptune.CfnDBCluster(self, \"${1:id}\", ",
            "        associatedRoles=[],",
            "        availabilityZones=[],",
            "        backupRetentionPeriod=${4:int},",
            "        copyTagsToSnapshot=${5:bool},",
            "        dBClusterIdentifier=${6:str},",
            "        dBClusterParameterGroupName=${7:str},",
            "        dBInstanceParameterGroupName=${8:str},",
            "        dBPort=${9:int},",
            "        dBSubnetGroupName=${10:str},",
            "        deletionProtection=${11:bool},",
            "        enableCloudwatchLogsExports=[],",
            "        engineVersion=${13:str},",
            "        iamAuthEnabled=${14:bool},",
            "        kmsKeyId=${15:str},",
            "        preferredBackupWindow=${16:str},",
            "        preferredMaintenanceWindow=${17:str},",
            "        restoreToTime=${18:str},",
            "        restoreType=${19:str},",
            "        serverlessScalingConfiguration={",
            "            maxCapacity=${20:float},",
            "            minCapacity=${21:float},",
            "        },",
            "        snapshotIdentifier=${21:str},",
            "        sourceDBClusterIdentifier=${22:str},",
            "        storageEncrypted=${23:bool},",
            "        tags=[],",
            "        useLatestRestorableTime=${25:bool},",
            "        vpcSecurityGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: neptune.CfnDBCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptune.CfnDBCluster",
            "Attributes: ",
            "  attrClusterResourceId",
            "  attrEndpoint",
            "  attrPort",
            "  attrReadEndpoint"
        ],
        "prefix": "l1-neptune-dbcluster",
        "scope": "python"
    },
    "neptune.CfnDBClusterParameterGroup": {
        "body": [
            "neptune.CfnDBClusterParameterGroup(self, \"${1:id}\", ",
            "        description=${2:str}, # Required",
            "        family=${3:str}, # Required",
            "        name=${4:str},",
            "        parameters=${5:dict}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: neptune.CfnDBClusterParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptune.CfnDBClusterParameterGroup"
        ],
        "prefix": "l1-neptune-dbclusterparametergroup",
        "scope": "python"
    },
    "neptune.CfnDBInstance": {
        "body": [
            "neptune.CfnDBInstance(self, \"${1:id}\", ",
            "        allowMajorVersionUpgrade=${2:bool},",
            "        autoMinorVersionUpgrade=${3:bool},",
            "        availabilityZone=${4:str},",
            "        dBClusterIdentifier=${5:str},",
            "        dBInstanceClass=${6:str}, # Required",
            "        dBInstanceIdentifier=${7:str},",
            "        dBParameterGroupName=${8:str},",
            "        dBSnapshotIdentifier=${9:str},",
            "        dBSubnetGroupName=${10:str},",
            "        preferredMaintenanceWindow=${11:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: neptune.CfnDBInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptune.CfnDBInstance",
            "Attributes: ",
            "  attrEndpoint",
            "  attrPort"
        ],
        "prefix": "l1-neptune-dbinstance",
        "scope": "python"
    },
    "neptune.CfnDBParameterGroup": {
        "body": [
            "neptune.CfnDBParameterGroup(self, \"${1:id}\", ",
            "        description=${2:str}, # Required",
            "        family=${3:str}, # Required",
            "        name=${4:str},",
            "        parameters=${5:dict}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: neptune.CfnDBParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptune.CfnDBParameterGroup"
        ],
        "prefix": "l1-neptune-dbparametergroup",
        "scope": "python"
    },
    "neptune.CfnDBSubnetGroup": {
        "body": [
            "neptune.CfnDBSubnetGroup(self, \"${1:id}\", ",
            "        dBSubnetGroupDescription=${2:str}, # Required",
            "        dBSubnetGroupName=${3:str},",
            "        subnetIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: neptune.CfnDBSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptune.CfnDBSubnetGroup"
        ],
        "prefix": "l1-neptune-dbsubnetgroup",
        "scope": "python"
    },
    "neptune.CfnEventSubscription": {
        "body": [
            "neptune.CfnEventSubscription(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        eventCategories=[],",
            "        snsTopicArn=${4:str},",
            "        sourceIds=[],",
            "        sourceType=${6:str},",
            ")"
        ],
        "description": [
            "Construct: neptune.CfnEventSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptune.CfnEventSubscription"
        ],
        "prefix": "l1-neptune-eventsubscription",
        "scope": "python"
    },
    "neptunegraph.CfnGraph": {
        "body": [
            "neptunegraph.CfnGraph(self, \"${1:id}\", ",
            "        deletionProtection=${2:bool},",
            "        graphName=${3:str},",
            "        provisionedMemory=${4:int}, # Required",
            "        publicConnectivity=${5:bool},",
            "        replicaCount=${6:int},",
            "        tags=[],",
            "        vectorSearchConfiguration={",
            "            vectorSearchDimension=${8:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: neptunegraph.CfnGraph",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptunegraph.CfnGraph",
            "Attributes: ",
            "  attrEndpoint",
            "  attrGraphArn",
            "  attrGraphId"
        ],
        "prefix": "l1-neptunegraph-graph",
        "scope": "python"
    },
    "neptunegraph.CfnPrivateGraphEndpoint": {
        "body": [
            "neptunegraph.CfnPrivateGraphEndpoint(self, \"${1:id}\", ",
            "        graphIdentifier=${2:str}, # Required",
            "        securityGroupIds=[],",
            "        subnetIds=[],",
            "        vpcId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: neptunegraph.CfnPrivateGraphEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-neptunegraph.CfnPrivateGraphEndpoint",
            "Attributes: ",
            "  attrVpcEndpointId",
            "  attrPrivateGraphEndpointIdentifier"
        ],
        "prefix": "l1-neptunegraph-privategraphendpoint",
        "scope": "python"
    },
    "networkfirewall.CfnFirewall": {
        "body": [
            "networkfirewall.CfnFirewall(self, \"${1:id}\", ",
            "        deleteProtection=${2:bool},",
            "        description=${3:str},",
            "        firewallName=${4:str}, # Required",
            "        firewallPolicyArn=${5:str}, # Required",
            "        firewallPolicyChangeProtection=${6:bool},",
            "        subnetChangeProtection=${7:bool},",
            "        subnetMappings=[], # Required",
            "        tags=[],",
            "        vpcId=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkfirewall.CfnFirewall",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkfirewall.CfnFirewall",
            "Attributes: ",
            "  attrFirewallArn",
            "  attrEndpointIds",
            "  attrFirewallId"
        ],
        "prefix": "l1-networkfirewall-firewall",
        "scope": "python"
    },
    "networkfirewall.CfnFirewallPolicy": {
        "body": [
            "networkfirewall.CfnFirewallPolicy(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        firewallPolicy={",
            "            statefulDefaultActions=[],",
            "            statefulRuleGroupReferences=[],",
            "            statelessCustomActions=[],",
            "            statelessDefaultActions=[],",
            "            statelessFragmentDefaultActions=[],",
            "            statelessRuleGroupReferences=[],",
            "            tLSInspectionConfigurationArn=${11:str},",
            "        },",
            "        firewallPolicyName=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: networkfirewall.CfnFirewallPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkfirewall.CfnFirewallPolicy",
            "Attributes: ",
            "  attrFirewallPolicyArn",
            "  attrFirewallPolicyId"
        ],
        "prefix": "l1-networkfirewall-firewallpolicy",
        "scope": "python"
    },
    "networkfirewall.CfnLoggingConfiguration": {
        "body": [
            "networkfirewall.CfnLoggingConfiguration(self, \"${1:id}\", ",
            "        firewallArn=${2:str}, # Required",
            "        firewallName=${3:str},",
            "        loggingConfiguration={",
            "            logDestinationConfigs=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: networkfirewall.CfnLoggingConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkfirewall.CfnLoggingConfiguration"
        ],
        "prefix": "l1-networkfirewall-loggingconfiguration",
        "scope": "python"
    },
    "networkfirewall.CfnRuleGroup": {
        "body": [
            "networkfirewall.CfnRuleGroup(self, \"${1:id}\", ",
            "        capacity=${2:int}, # Required",
            "        description=${3:str},",
            "        ruleGroup={",
            "        },",
            "        ruleGroupName=${5:str}, # Required",
            "        tags=[],",
            "        type=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkfirewall.CfnRuleGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkfirewall.CfnRuleGroup",
            "Attributes: ",
            "  attrRuleGroupId",
            "  attrRuleGroupArn"
        ],
        "prefix": "l1-networkfirewall-rulegroup",
        "scope": "python"
    },
    "networkfirewall.CfnTLSInspectionConfiguration": {
        "body": [
            "networkfirewall.CfnTLSInspectionConfiguration(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        tLSInspectionConfiguration={",
            "            serverCertificateConfigurations=[],",
            "        },",
            "        tLSInspectionConfigurationName=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: networkfirewall.CfnTLSInspectionConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkfirewall.CfnTLSInspectionConfiguration",
            "Attributes: ",
            "  attrTLSInspectionConfigurationId",
            "  attrTLSInspectionConfigurationArn"
        ],
        "prefix": "l1-networkfirewall-tlsinspectionconfiguration",
        "scope": "python"
    },
    "networkmanager.CfnConnectAttachment": {
        "body": [
            "networkmanager.CfnConnectAttachment(self, \"${1:id}\", ",
            "        coreNetworkId=${2:str}, # Required",
            "        edgeLocation=${3:str}, # Required",
            "        options={",
            "            protocol=${4:str},",
            "        },",
            "        proposedSegmentChange={",
            "            attachmentPolicyRuleNumber=${5:int},",
            "            segmentName=${6:str},",
            "            tags=[],",
            "        },",
            "        tags=[],",
            "        transportAttachmentId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnConnectAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnConnectAttachment",
            "Attributes: ",
            "  attrResourceArn",
            "  attrAttachmentType",
            "  attrSegmentName",
            "  attrState",
            "  attrCreatedAt",
            "  attrOwnerAccountId",
            "  attrUpdatedAt",
            "  attrAttachmentId",
            "  attrCoreNetworkArn",
            "  attrAttachmentPolicyRuleNumber"
        ],
        "prefix": "l1-networkmanager-connectattachment",
        "scope": "python"
    },
    "networkmanager.CfnConnectPeer": {
        "body": [
            "networkmanager.CfnConnectPeer(self, \"${1:id}\", ",
            "        bgpOptions={",
            "            peerAsn=${2:float},",
            "        },",
            "        connectAttachmentId=${3:str}, # Required",
            "        coreNetworkAddress=${4:str},",
            "        insideCidrBlocks=[],",
            "        peerAddress=${6:str}, # Required",
            "        subnetArn=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnConnectPeer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnConnectPeer",
            "Attributes: ",
            "  attrConfiguration.BgpConfigurations",
            "  attrCoreNetworkId",
            "  attrConfiguration.InsideCidrBlocks",
            "  attrConfiguration",
            "  attrState",
            "  attrCreatedAt",
            "  attrConnectPeerId",
            "  attrConfiguration.CoreNetworkAddress",
            "  attrConfiguration.Protocol",
            "  attrConfiguration.PeerAddress",
            "  attrEdgeLocation"
        ],
        "prefix": "l1-networkmanager-connectpeer",
        "scope": "python"
    },
    "networkmanager.CfnCoreNetwork": {
        "body": [
            "networkmanager.CfnCoreNetwork(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        globalNetworkId=${3:str}, # Required",
            "        policyDocument=${4:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnCoreNetwork",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnCoreNetwork",
            "Attributes: ",
            "  attrCoreNetworkId",
            "  attrState",
            "  attrCreatedAt",
            "  attrSegments",
            "  attrOwnerAccount",
            "  attrEdges",
            "  attrCoreNetworkArn"
        ],
        "prefix": "l1-networkmanager-corenetwork",
        "scope": "python"
    },
    "networkmanager.CfnCustomerGatewayAssociation": {
        "body": [
            "networkmanager.CfnCustomerGatewayAssociation(self, \"${1:id}\", ",
            "        customerGatewayArn=${2:str}, # Required",
            "        deviceId=${3:str}, # Required",
            "        globalNetworkId=${4:str}, # Required",
            "        linkId=${5:str},",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnCustomerGatewayAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnCustomerGatewayAssociation"
        ],
        "prefix": "l1-networkmanager-customergatewayassociation",
        "scope": "python"
    },
    "networkmanager.CfnDevice": {
        "body": [
            "networkmanager.CfnDevice(self, \"${1:id}\", ",
            "        aWSLocation={",
            "            subnetArn=${2:str},",
            "            zone=${3:str},",
            "        },",
            "        description=${3:str},",
            "        globalNetworkId=${4:str}, # Required",
            "        location={",
            "            address=${5:str},",
            "            latitude=${6:str},",
            "            longitude=${7:str},",
            "        },",
            "        model=${6:str},",
            "        serialNumber=${7:str},",
            "        siteId=${8:str},",
            "        tags=[],",
            "        type=${10:str},",
            "        vendor=${11:str},",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnDevice",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnDevice",
            "Attributes: ",
            "  attrDeviceArn",
            "  attrDeviceId",
            "  attrState",
            "  attrCreatedAt"
        ],
        "prefix": "l1-networkmanager-device",
        "scope": "python"
    },
    "networkmanager.CfnGlobalNetwork": {
        "body": [
            "networkmanager.CfnGlobalNetwork(self, \"${1:id}\", ",
            "        createdAt=${2:str},",
            "        description=${3:str},",
            "        state=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnGlobalNetwork",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnGlobalNetwork",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-networkmanager-globalnetwork",
        "scope": "python"
    },
    "networkmanager.CfnLink": {
        "body": [
            "networkmanager.CfnLink(self, \"${1:id}\", ",
            "        bandwidth={",
            "            downloadSpeed=${2:int},",
            "            uploadSpeed=${3:int},",
            "        },",
            "        description=${3:str},",
            "        globalNetworkId=${4:str}, # Required",
            "        provider=${5:str},",
            "        siteId=${6:str}, # Required",
            "        tags=[],",
            "        type=${8:str},",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnLink",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnLink",
            "Attributes: ",
            "  attrLinkArn",
            "  attrState",
            "  attrCreatedAt",
            "  attrLinkId"
        ],
        "prefix": "l1-networkmanager-link",
        "scope": "python"
    },
    "networkmanager.CfnLinkAssociation": {
        "body": [
            "networkmanager.CfnLinkAssociation(self, \"${1:id}\", ",
            "        deviceId=${2:str}, # Required",
            "        globalNetworkId=${3:str}, # Required",
            "        linkId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnLinkAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnLinkAssociation"
        ],
        "prefix": "l1-networkmanager-linkassociation",
        "scope": "python"
    },
    "networkmanager.CfnSite": {
        "body": [
            "networkmanager.CfnSite(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        globalNetworkId=${3:str}, # Required",
            "        location={",
            "            address=${4:str},",
            "            latitude=${5:str},",
            "            longitude=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnSite",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnSite",
            "Attributes: ",
            "  attrSiteId",
            "  attrSiteArn",
            "  attrState",
            "  attrCreatedAt"
        ],
        "prefix": "l1-networkmanager-site",
        "scope": "python"
    },
    "networkmanager.CfnSiteToSiteVpnAttachment": {
        "body": [
            "networkmanager.CfnSiteToSiteVpnAttachment(self, \"${1:id}\", ",
            "        coreNetworkId=${2:str}, # Required",
            "        proposedSegmentChange={",
            "            attachmentPolicyRuleNumber=${3:int},",
            "            segmentName=${4:str},",
            "            tags=[],",
            "        },",
            "        tags=[],",
            "        vpnConnectionArn=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnSiteToSiteVpnAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnSiteToSiteVpnAttachment",
            "Attributes: ",
            "  attrResourceArn",
            "  attrAttachmentType",
            "  attrSegmentName",
            "  attrState",
            "  attrCreatedAt",
            "  attrOwnerAccountId",
            "  attrUpdatedAt",
            "  attrAttachmentId",
            "  attrCoreNetworkArn",
            "  attrEdgeLocation",
            "  attrAttachmentPolicyRuleNumber"
        ],
        "prefix": "l1-networkmanager-sitetositevpnattachment",
        "scope": "python"
    },
    "networkmanager.CfnTransitGatewayPeering": {
        "body": [
            "networkmanager.CfnTransitGatewayPeering(self, \"${1:id}\", ",
            "        coreNetworkId=${2:str}, # Required",
            "        tags=[],",
            "        transitGatewayArn=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnTransitGatewayPeering",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnTransitGatewayPeering",
            "Attributes: ",
            "  attrResourceArn",
            "  attrPeeringType",
            "  attrState",
            "  attrCreatedAt",
            "  attrPeeringId",
            "  attrTransitGatewayPeeringAttachmentId",
            "  attrOwnerAccountId",
            "  attrCoreNetworkArn",
            "  attrEdgeLocation"
        ],
        "prefix": "l1-networkmanager-transitgatewaypeering",
        "scope": "python"
    },
    "networkmanager.CfnTransitGatewayRegistration": {
        "body": [
            "networkmanager.CfnTransitGatewayRegistration(self, \"${1:id}\", ",
            "        globalNetworkId=${2:str}, # Required",
            "        transitGatewayArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnTransitGatewayRegistration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnTransitGatewayRegistration"
        ],
        "prefix": "l1-networkmanager-transitgatewayregistration",
        "scope": "python"
    },
    "networkmanager.CfnTransitGatewayRouteTableAttachment": {
        "body": [
            "networkmanager.CfnTransitGatewayRouteTableAttachment(self, \"${1:id}\", ",
            "        peeringId=${2:str}, # Required",
            "        proposedSegmentChange={",
            "            attachmentPolicyRuleNumber=${3:int},",
            "            segmentName=${4:str},",
            "            tags=[],",
            "        },",
            "        tags=[],",
            "        transitGatewayRouteTableArn=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnTransitGatewayRouteTableAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnTransitGatewayRouteTableAttachment",
            "Attributes: ",
            "  attrResourceArn",
            "  attrCoreNetworkId",
            "  attrAttachmentType",
            "  attrSegmentName",
            "  attrState",
            "  attrCreatedAt",
            "  attrOwnerAccountId",
            "  attrUpdatedAt",
            "  attrAttachmentId",
            "  attrCoreNetworkArn",
            "  attrEdgeLocation",
            "  attrAttachmentPolicyRuleNumber"
        ],
        "prefix": "l1-networkmanager-transitgatewayroutetableattachment",
        "scope": "python"
    },
    "networkmanager.CfnVpcAttachment": {
        "body": [
            "networkmanager.CfnVpcAttachment(self, \"${1:id}\", ",
            "        coreNetworkId=${2:str}, # Required",
            "        options={",
            "            applianceModeSupport=${3:bool},",
            "            ipv6Support=${4:bool},",
            "        },",
            "        proposedSegmentChange={",
            "            attachmentPolicyRuleNumber=${4:int},",
            "            segmentName=${5:str},",
            "            tags=[],",
            "        },",
            "        subnetArns=[], # Required",
            "        tags=[],",
            "        vpcArn=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: networkmanager.CfnVpcAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-networkmanager.CfnVpcAttachment",
            "Attributes: ",
            "  attrResourceArn",
            "  attrAttachmentType",
            "  attrSegmentName",
            "  attrState",
            "  attrCreatedAt",
            "  attrOwnerAccountId",
            "  attrUpdatedAt",
            "  attrAttachmentId",
            "  attrCoreNetworkArn",
            "  attrEdgeLocation",
            "  attrAttachmentPolicyRuleNumber"
        ],
        "prefix": "l1-networkmanager-vpcattachment",
        "scope": "python"
    },
    "nimblestudio.CfnLaunchProfile": {
        "body": [
            "nimblestudio.CfnLaunchProfile(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        ec2SubnetIds=[], # Required",
            "        launchProfileProtocolVersions=[], # Required",
            "        name=${5:str}, # Required",
            "        streamConfiguration={",
            "            automaticTerminationMode=${6:str},",
            "            clipboardMode=${7:str},",
            "            ec2InstanceTypes=[],",
            "            maxSessionLengthInMinutes=${9:float},",
            "            maxStoppedSessionLengthInMinutes=${10:float},",
            "            sessionPersistenceMode=${12:str},",
            "            streamingImageIds=[],",
            "        },",
            "        studioComponentIds=[], # Required",
            "        studioId=${8:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: nimblestudio.CfnLaunchProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-nimblestudio.CfnLaunchProfile",
            "Attributes: ",
            "  attrLaunchProfileId"
        ],
        "prefix": "l1-nimblestudio-launchprofile",
        "scope": "python"
    },
    "nimblestudio.CfnStreamingImage": {
        "body": [
            "nimblestudio.CfnStreamingImage(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        ec2ImageId=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        studioId=${5:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: nimblestudio.CfnStreamingImage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-nimblestudio.CfnStreamingImage",
            "Attributes: ",
            "  attrOwner",
            "  attrPlatform",
            "  attrEncryptionConfiguration",
            "  attrEulaIds",
            "  attrEncryptionConfiguration.KeyArn",
            "  attrEncryptionConfiguration.KeyType",
            "  attrStreamingImageId"
        ],
        "prefix": "l1-nimblestudio-streamingimage",
        "scope": "python"
    },
    "nimblestudio.CfnStudio": {
        "body": [
            "nimblestudio.CfnStudio(self, \"${1:id}\", ",
            "        adminRoleArn=${2:str}, # Required",
            "        displayName=${3:str}, # Required",
            "        studioEncryptionConfiguration={",
            "            keyArn=${4:str},",
            "            keyType=${5:str},",
            "        },",
            "        studioName=${5:str}, # Required",
            "        tags={",
            "        },",
            "        userRoleArn=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: nimblestudio.CfnStudio",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-nimblestudio.CfnStudio",
            "Attributes: ",
            "  attrHomeRegion",
            "  attrStudioUrl",
            "  attrSsoClientId",
            "  attrStudioId"
        ],
        "prefix": "l1-nimblestudio-studio",
        "scope": "python"
    },
    "nimblestudio.CfnStudioComponent": {
        "body": [
            "nimblestudio.CfnStudioComponent(self, \"${1:id}\", ",
            "        configuration={",
            "        },",
            "        description=${3:str},",
            "        ec2SecurityGroupIds=[],",
            "        initializationScripts=[],",
            "        name=${6:str}, # Required",
            "        scriptParameters=[],",
            "        studioId=${8:str}, # Required",
            "        subtype=${9:str},",
            "        tags={",
            "        },",
            "        type=${11:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: nimblestudio.CfnStudioComponent",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-nimblestudio.CfnStudioComponent",
            "Attributes: ",
            "  attrStudioComponentId"
        ],
        "prefix": "l1-nimblestudio-studiocomponent",
        "scope": "python"
    },
    "oam.CfnLink": {
        "body": [
            "oam.CfnLink(self, \"${1:id}\", ",
            "        labelTemplate=${2:str},",
            "        linkConfiguration={",
            "        },",
            "        resourceTypes=[], # Required",
            "        sinkIdentifier=${5:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: oam.CfnLink",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-oam.CfnLink",
            "Attributes: ",
            "  attrLabel",
            "  attrArn"
        ],
        "prefix": "l1-oam-link",
        "scope": "python"
    },
    "oam.CfnSink": {
        "body": [
            "oam.CfnSink(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        policy=${3:dict},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: oam.CfnSink",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-oam.CfnSink",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-oam-sink",
        "scope": "python"
    },
    "omics.CfnAnnotationStore": {
        "body": [
            "omics.CfnAnnotationStore(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        reference={",
            "            referenceArn=${4:str},",
            "        },",
            "        sseConfig={",
            "            keyArn=${5:str},",
            "            type=${6:str},",
            "        },",
            "        storeFormat=${6:str}, # Required",
            "        storeOptions={",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: omics.CfnAnnotationStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-omics.CfnAnnotationStore",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationTime",
            "  attrUpdateTime",
            "  attrId",
            "  attrStoreSizeBytes",
            "  attrStatusMessage",
            "  attrStoreArn"
        ],
        "prefix": "l1-omics-annotationstore",
        "scope": "python"
    },
    "omics.CfnReferenceStore": {
        "body": [
            "omics.CfnReferenceStore(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        sseConfig={",
            "            keyArn=${4:str},",
            "            type=${5:str},",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: omics.CfnReferenceStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-omics.CfnReferenceStore",
            "Attributes: ",
            "  attrReferenceStoreId",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-omics-referencestore",
        "scope": "python"
    },
    "omics.CfnRunGroup": {
        "body": [
            "omics.CfnRunGroup(self, \"${1:id}\", ",
            "        maxCpus=${2:float},",
            "        maxDuration=${3:float},",
            "        maxGpus=${4:float},",
            "        maxRuns=${5:float},",
            "        name=${6:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: omics.CfnRunGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-omics.CfnRunGroup",
            "Attributes: ",
            "  attrCreationTime",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-omics-rungroup",
        "scope": "python"
    },
    "omics.CfnSequenceStore": {
        "body": [
            "omics.CfnSequenceStore(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        fallbackLocation=${3:str},",
            "        name=${4:str}, # Required",
            "        sseConfig={",
            "            keyArn=${5:str},",
            "            type=${6:str},",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: omics.CfnSequenceStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-omics.CfnSequenceStore",
            "Attributes: ",
            "  attrSequenceStoreId",
            "  attrCreationTime",
            "  attrArn"
        ],
        "prefix": "l1-omics-sequencestore",
        "scope": "python"
    },
    "omics.CfnVariantStore": {
        "body": [
            "omics.CfnVariantStore(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        reference={",
            "            referenceArn=${4:str},",
            "        },",
            "        sseConfig={",
            "            keyArn=${5:str},",
            "            type=${6:str},",
            "        },",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: omics.CfnVariantStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-omics.CfnVariantStore",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationTime",
            "  attrUpdateTime",
            "  attrId",
            "  attrStoreSizeBytes",
            "  attrStatusMessage",
            "  attrStoreArn"
        ],
        "prefix": "l1-omics-variantstore",
        "scope": "python"
    },
    "omics.CfnWorkflow": {
        "body": [
            "omics.CfnWorkflow(self, \"${1:id}\", ",
            "        accelerators=${2:str},",
            "        definitionUri=${3:str},",
            "        description=${4:str},",
            "        engine=${5:str},",
            "        main=${6:str},",
            "        name=${7:str},",
            "        parameterTemplate={",
            "        },",
            "        storageCapacity=${9:float},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: omics.CfnWorkflow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-omics.CfnWorkflow",
            "Attributes: ",
            "  attrStatus",
            "  attrType",
            "  attrCreationTime",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-omics-workflow",
        "scope": "python"
    },
    "opensearchserverless.CfnAccessPolicy": {
        "body": [
            "opensearchserverless.CfnAccessPolicy(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        policy=${4:str}, # Required",
            "        type=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: opensearchserverless.CfnAccessPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opensearchserverless.CfnAccessPolicy"
        ],
        "prefix": "l1-opensearchserverless-accesspolicy",
        "scope": "python"
    },
    "opensearchserverless.CfnCollection": {
        "body": [
            "opensearchserverless.CfnCollection(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        standbyReplicas=${4:str},",
            "        tags=[],",
            "        type=${6:str},",
            ")"
        ],
        "description": [
            "Construct: opensearchserverless.CfnCollection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opensearchserverless.CfnCollection",
            "Attributes: ",
            "  attrCollectionEndpoint",
            "  attrId",
            "  attrArn",
            "  attrDashboardEndpoint"
        ],
        "prefix": "l1-opensearchserverless-collection",
        "scope": "python"
    },
    "opensearchserverless.CfnLifecyclePolicy": {
        "body": [
            "opensearchserverless.CfnLifecyclePolicy(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        policy=${4:str}, # Required",
            "        type=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: opensearchserverless.CfnLifecyclePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opensearchserverless.CfnLifecyclePolicy"
        ],
        "prefix": "l1-opensearchserverless-lifecyclepolicy",
        "scope": "python"
    },
    "opensearchserverless.CfnSecurityConfig": {
        "body": [
            "opensearchserverless.CfnSecurityConfig(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str},",
            "        samlOptions={",
            "            groupAttribute=${4:str},",
            "            metadata=${5:str},",
            "            sessionTimeout=${6:int},",
            "            userAttribute=${7:str},",
            "        },",
            "        type=${5:str},",
            ")"
        ],
        "description": [
            "Construct: opensearchserverless.CfnSecurityConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opensearchserverless.CfnSecurityConfig",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-opensearchserverless-securityconfig",
        "scope": "python"
    },
    "opensearchserverless.CfnSecurityPolicy": {
        "body": [
            "opensearchserverless.CfnSecurityPolicy(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        policy=${4:str}, # Required",
            "        type=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: opensearchserverless.CfnSecurityPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opensearchserverless.CfnSecurityPolicy"
        ],
        "prefix": "l1-opensearchserverless-securitypolicy",
        "scope": "python"
    },
    "opensearchserverless.CfnVpcEndpoint": {
        "body": [
            "opensearchserverless.CfnVpcEndpoint(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        securityGroupIds=[],",
            "        subnetIds=[], # Required",
            "        vpcId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: opensearchserverless.CfnVpcEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opensearchserverless.CfnVpcEndpoint",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-opensearchserverless-vpcendpoint",
        "scope": "python"
    },
    "opensearchservice.CfnDomain": {
        "body": [
            "opensearchservice.CfnDomain(self, \"${1:id}\", ",
            "        accessPolicies=${2:dict},",
            "        advancedOptions={",
            "        },",
            "        advancedSecurityOptions={",
            "            anonymousAuthDisableDate=${4:str},",
            "            anonymousAuthEnabled=${5:bool},",
            "            enabled=${6:bool},",
            "            internalUserDatabaseEnabled=${7:bool},",
            "        },",
            "        clusterConfig={",
            "            dedicatedMasterCount=${6:int},",
            "            dedicatedMasterEnabled=${7:bool},",
            "            dedicatedMasterType=${8:str},",
            "            instanceCount=${9:int},",
            "            instanceType=${10:str},",
            "            multiAZWithStandbyEnabled=${11:bool},",
            "            warmCount=${12:int},",
            "            warmEnabled=${13:bool},",
            "            warmType=${14:str},",
            "            zoneAwarenessEnabled=${16:bool},",
            "        },",
            "        cognitoOptions={",
            "            enabled=${6:bool},",
            "            identityPoolId=${7:str},",
            "            roleArn=${8:str},",
            "            userPoolId=${9:str},",
            "        },",
            "        domainEndpointOptions={",
            "            customEndpoint=${7:str},",
            "            customEndpointCertificateArn=${8:str},",
            "            customEndpointEnabled=${9:bool},",
            "            enforceHTTPS=${10:bool},",
            "            tLSSecurityPolicy=${11:str},",
            "        },",
            "        domainName=${8:str},",
            "        eBSOptions={",
            "            eBSEnabled=${9:bool},",
            "            iops=${10:int},",
            "            throughput=${11:int},",
            "            volumeSize=${12:int},",
            "            volumeType=${13:str},",
            "        },",
            "        encryptionAtRestOptions={",
            "            enabled=${10:bool},",
            "            kmsKeyId=${11:str},",
            "        },",
            "        engineVersion=${11:str},",
            "        iPAddressType=${12:str},",
            "        logPublishingOptions={",
            "        },",
            "        nodeToNodeEncryptionOptions={",
            "            enabled=${14:bool},",
            "        },",
            "        offPeakWindowOptions={",
            "            enabled=${15:bool},",
            "        },",
            "        snapshotOptions={",
            "            automatedSnapshotStartHour=${16:int},",
            "        },",
            "        softwareUpdateOptions={",
            "            autoSoftwareUpdateEnabled=${17:bool},",
            "        },",
            "        tags=[],",
            "        vPCOptions={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: opensearchservice.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opensearchservice.CfnDomain",
            "Attributes: ",
            "  attrServiceSoftwareOptions.OptionalDeployment",
            "  attrServiceSoftwareOptions.Description",
            "  attrServiceSoftwareOptions.UpdateStatus",
            "  attrServiceSoftwareOptions.AutomatedUpdateDate",
            "  attrServiceSoftwareOptions.CurrentVersion",
            "  attrDomainEndpointV2",
            "  attrDomainEndpoints",
            "  attrDomainArn",
            "  attrServiceSoftwareOptions.UpdateAvailable",
            "  attrDomainEndpoint",
            "  attrServiceSoftwareOptions",
            "  attrAdvancedSecurityOptions.AnonymousAuthDisableDate",
            "  attrServiceSoftwareOptions.NewVersion",
            "  attrId",
            "  attrArn",
            "  attrServiceSoftwareOptions.Cancellable"
        ],
        "prefix": "l1-opensearchservice-domain",
        "scope": "python"
    },
    "opsworks.CfnApp": {
        "body": [
            "opsworks.CfnApp(self, \"${1:id}\", ",
            "        appSource={",
            "            password=${2:str},",
            "            revision=${3:str},",
            "            sshKey=${4:str},",
            "            type=${5:str},",
            "            url=${6:str},",
            "            username=${7:str},",
            "        },",
            "        attributes={",
            "        },",
            "        dataSources=[],",
            "        description=${5:str},",
            "        domains=[],",
            "        enableSsl=${7:bool},",
            "        environment=[],",
            "        name=${9:str}, # Required",
            "        shortname=${10:str},",
            "        sslConfiguration={",
            "            certificate=${11:str},",
            "            chain=${12:str},",
            "            privateKey=${13:str},",
            "        },",
            "        stackId=${12:str}, # Required",
            "        type=${13:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: opsworks.CfnApp",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworks.CfnApp"
        ],
        "prefix": "l1-opsworks-app",
        "scope": "python"
    },
    "opsworks.CfnElasticLoadBalancerAttachment": {
        "body": [
            "opsworks.CfnElasticLoadBalancerAttachment(self, \"${1:id}\", ",
            "        elasticLoadBalancerName=${2:str}, # Required",
            "        layerId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: opsworks.CfnElasticLoadBalancerAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworks.CfnElasticLoadBalancerAttachment"
        ],
        "prefix": "l1-opsworks-elasticloadbalancerattachment",
        "scope": "python"
    },
    "opsworks.CfnInstance": {
        "body": [
            "opsworks.CfnInstance(self, \"${1:id}\", ",
            "        agentVersion=${2:str},",
            "        amiId=${3:str},",
            "        architecture=${4:str},",
            "        autoScalingType=${5:str},",
            "        availabilityZone=${6:str},",
            "        blockDeviceMappings=[],",
            "        ebsOptimized=${8:bool},",
            "        elasticIps=[],",
            "        hostname=${10:str},",
            "        installUpdatesOnBoot=${11:bool},",
            "        instanceType=${12:str}, # Required",
            "        layerIds=[], # Required",
            "        os=${14:str},",
            "        rootDeviceType=${15:str},",
            "        sshKeyName=${16:str},",
            "        stackId=${17:str}, # Required",
            "        subnetId=${18:str},",
            "        tenancy=${19:str},",
            "        timeBasedAutoScaling={",
            "        },",
            "        virtualizationType=${21:str},",
            "        volumes=[],",
            ")"
        ],
        "description": [
            "Construct: opsworks.CfnInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworks.CfnInstance",
            "Attributes: ",
            "  attrAvailabilityZone",
            "  attrPrivateDnsName",
            "  attrPrivateIp",
            "  attrPublicDnsName",
            "  attrPublicIp"
        ],
        "prefix": "l1-opsworks-instance",
        "scope": "python"
    },
    "opsworks.CfnLayer": {
        "body": [
            "opsworks.CfnLayer(self, \"${1:id}\", ",
            "        attributes={",
            "        },",
            "        autoAssignElasticIps=${3:bool}, # Required",
            "        autoAssignPublicIps=${4:bool}, # Required",
            "        customInstanceProfileArn=${5:str},",
            "        customJson=${6:dict},",
            "        customRecipes={",
            "            configure=[],",
            "            deploy=[],",
            "            setup=[],",
            "            shutdown=[],",
            "            undeploy=[],",
            "        },",
            "        customSecurityGroupIds=[],",
            "        enableAutoHealing=${9:bool}, # Required",
            "        installUpdatesOnBoot=${10:bool},",
            "        lifecycleEventConfiguration={",
            "        },",
            "        loadBasedAutoScaling={",
            "            enable=${13:bool},",
            "        },",
            "        name=${13:str}, # Required",
            "        packages=[],",
            "        shortname=${15:str}, # Required",
            "        stackId=${16:str}, # Required",
            "        tags=[],",
            "        type=${18:str}, # Required",
            "        useEbsOptimizedInstances=${19:bool},",
            "        volumeConfigurations=[],",
            ")"
        ],
        "description": [
            "Construct: opsworks.CfnLayer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworks.CfnLayer"
        ],
        "prefix": "l1-opsworks-layer",
        "scope": "python"
    },
    "opsworks.CfnStack": {
        "body": [
            "opsworks.CfnStack(self, \"${1:id}\", ",
            "        agentVersion=${2:str},",
            "        attributes={",
            "        },",
            "        chefConfiguration={",
            "            berkshelfVersion=${4:str},",
            "            manageBerkshelf=${5:bool},",
            "        },",
            "        cloneAppIds=[],",
            "        clonePermissions=${6:bool},",
            "        configurationManager={",
            "            name=${7:str},",
            "            version=${8:str},",
            "        },",
            "        customCookbooksSource={",
            "            password=${8:str},",
            "            revision=${9:str},",
            "            sshKey=${10:str},",
            "            type=${11:str},",
            "            url=${12:str},",
            "            username=${13:str},",
            "        },",
            "        customJson=${9:dict},",
            "        defaultAvailabilityZone=${10:str},",
            "        defaultInstanceProfileArn=${11:str}, # Required",
            "        defaultOs=${12:str},",
            "        defaultRootDeviceType=${13:str},",
            "        defaultSshKeyName=${14:str},",
            "        defaultSubnetId=${15:str},",
            "        ecsClusterArn=${16:str},",
            "        elasticIps=[],",
            "        hostnameTheme=${18:str},",
            "        name=${19:str}, # Required",
            "        rdsDbInstances=[],",
            "        serviceRoleArn=${21:str}, # Required",
            "        sourceStackId=${22:str},",
            "        tags=[],",
            "        useCustomCookbooks=${24:bool},",
            "        useOpsworksSecurityGroups=${25:bool},",
            "        vpcId=${26:str},",
            ")"
        ],
        "description": [
            "Construct: opsworks.CfnStack",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworks.CfnStack"
        ],
        "prefix": "l1-opsworks-stack",
        "scope": "python"
    },
    "opsworks.CfnUserProfile": {
        "body": [
            "opsworks.CfnUserProfile(self, \"${1:id}\", ",
            "        allowSelfManagement=${2:bool},",
            "        iamUserArn=${3:str}, # Required",
            "        sshPublicKey=${4:str},",
            "        sshUsername=${5:str},",
            ")"
        ],
        "description": [
            "Construct: opsworks.CfnUserProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworks.CfnUserProfile",
            "Attributes: ",
            "  attrSshUsername"
        ],
        "prefix": "l1-opsworks-userprofile",
        "scope": "python"
    },
    "opsworks.CfnVolume": {
        "body": [
            "opsworks.CfnVolume(self, \"${1:id}\", ",
            "        ec2VolumeId=${2:str}, # Required",
            "        mountPoint=${3:str},",
            "        name=${4:str},",
            "        stackId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: opsworks.CfnVolume",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworks.CfnVolume"
        ],
        "prefix": "l1-opsworks-volume",
        "scope": "python"
    },
    "opsworkscm.CfnServer": {
        "body": [
            "opsworkscm.CfnServer(self, \"${1:id}\", ",
            "        associatePublicIpAddress=${2:bool},",
            "        backupId=${3:str},",
            "        backupRetentionCount=${4:int},",
            "        customCertificate=${5:str},",
            "        customDomain=${6:str},",
            "        customPrivateKey=${7:str},",
            "        disableAutomatedBackup=${8:bool},",
            "        engine=${9:str},",
            "        engineAttributes=[],",
            "        engineModel=${11:str},",
            "        engineVersion=${12:str},",
            "        instanceProfileArn=${13:str}, # Required",
            "        instanceType=${14:str}, # Required",
            "        keyPair=${15:str},",
            "        preferredBackupWindow=${16:str},",
            "        preferredMaintenanceWindow=${17:str},",
            "        securityGroupIds=[],",
            "        serviceRoleArn=${19:str}, # Required",
            "        subnetIds=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: opsworkscm.CfnServer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-opsworkscm.CfnServer",
            "Attributes: ",
            "  attrEndpoint",
            "  attrServerName",
            "  attrArn"
        ],
        "prefix": "l1-opsworkscm-server",
        "scope": "python"
    },
    "organizations.CfnAccount": {
        "body": [
            "organizations.CfnAccount(self, \"${1:id}\", ",
            "        accountName=${2:str}, # Required",
            "        email=${3:str}, # Required",
            "        parentIds=[],",
            "        roleName=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: organizations.CfnAccount",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-organizations.CfnAccount",
            "Attributes: ",
            "  attrJoinedMethod",
            "  attrStatus",
            "  attrJoinedTimestamp",
            "  attrAccountId",
            "  attrArn"
        ],
        "prefix": "l1-organizations-account",
        "scope": "python"
    },
    "organizations.CfnOrganization": {
        "body": [
            "organizations.CfnOrganization(self, \"${1:id}\", ",
            "        featureSet=${2:str},",
            ")"
        ],
        "description": [
            "Construct: organizations.CfnOrganization",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-organizations.CfnOrganization",
            "Attributes: ",
            "  attrRootId",
            "  attrId",
            "  attrArn",
            "  attrManagementAccountArn",
            "  attrManagementAccountId",
            "  attrManagementAccountEmail"
        ],
        "prefix": "l1-organizations-organization",
        "scope": "python"
    },
    "organizations.CfnOrganizationalUnit": {
        "body": [
            "organizations.CfnOrganizationalUnit(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        parentId=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: organizations.CfnOrganizationalUnit",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-organizations.CfnOrganizationalUnit",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-organizations-organizationalunit",
        "scope": "python"
    },
    "organizations.CfnPolicy": {
        "body": [
            "organizations.CfnPolicy(self, \"${1:id}\", ",
            "        content=${2:dict}, # Required",
            "        description=${3:str},",
            "        name=${4:str}, # Required",
            "        tags=[],",
            "        targetIds=[],",
            "        type=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: organizations.CfnPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-organizations.CfnPolicy",
            "Attributes: ",
            "  attrId",
            "  attrArn",
            "  attrAwsManaged"
        ],
        "prefix": "l1-organizations-policy",
        "scope": "python"
    },
    "organizations.CfnResourcePolicy": {
        "body": [
            "organizations.CfnResourcePolicy(self, \"${1:id}\", ",
            "        content=${2:dict}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: organizations.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-organizations.CfnResourcePolicy",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-organizations-resourcepolicy",
        "scope": "python"
    },
    "osis.CfnPipeline": {
        "body": [
            "osis.CfnPipeline(self, \"${1:id}\", ",
            "        bufferOptions={",
            "            persistentBufferEnabled=${2:bool},",
            "        },",
            "        encryptionAtRestOptions={",
            "            kmsKeyArn=${3:str},",
            "        },",
            "        logPublishingOptions={",
            "            isLoggingEnabled=${5:bool},",
            "        },",
            "        maxUnits=${5:int}, # Required",
            "        minUnits=${6:int}, # Required",
            "        pipelineConfigurationBody=${7:str}, # Required",
            "        pipelineName=${8:str}, # Required",
            "        tags=[],",
            "        vpcOptions={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "            vpcEndpointManagement=${12:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: osis.CfnPipeline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-osis.CfnPipeline",
            "Attributes: ",
            "  attrPipelineArn",
            "  attrVpcEndpoints",
            "  attrIngestEndpointUrls",
            "  attrVpcEndpointService"
        ],
        "prefix": "l1-osis-pipeline",
        "scope": "python"
    },
    "panorama.CfnApplicationInstance": {
        "body": [
            "panorama.CfnApplicationInstance(self, \"${1:id}\", ",
            "        applicationInstanceIdToReplace=${2:str},",
            "        defaultRuntimeContextDevice=${3:str}, # Required",
            "        description=${4:str},",
            "        manifestOverridesPayload={",
            "            payloadData=${5:str},",
            "        },",
            "        manifestPayload={",
            "            payloadData=${6:str},",
            "        },",
            "        name=${7:str},",
            "        runtimeRoleArn=${8:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: panorama.CfnApplicationInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-panorama.CfnApplicationInstance",
            "Attributes: ",
            "  attrDefaultRuntimeContextDeviceName",
            "  attrStatus",
            "  attrApplicationInstanceId",
            "  attrCreatedTime",
            "  attrStatusDescription",
            "  attrHealthStatus",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-panorama-applicationinstance",
        "scope": "python"
    },
    "panorama.CfnPackage": {
        "body": [
            "panorama.CfnPackage(self, \"${1:id}\", ",
            "        packageName=${2:str}, # Required",
            "        storageLocation={",
            "            binaryPrefixLocation=${3:str},",
            "            bucket=${4:str},",
            "            generatedPrefixLocation=${5:str},",
            "            manifestPrefixLocation=${6:str},",
            "            repoPrefixLocation=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: panorama.CfnPackage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-panorama.CfnPackage",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrStorageLocation.ManifestPrefixLocation",
            "  attrStorageLocation.GeneratedPrefixLocation",
            "  attrStorageLocation.BinaryPrefixLocation",
            "  attrPackageId",
            "  attrArn",
            "  attrStorageLocation.Bucket",
            "  attrStorageLocation.RepoPrefixLocation"
        ],
        "prefix": "l1-panorama-package",
        "scope": "python"
    },
    "panorama.CfnPackageVersion": {
        "body": [
            "panorama.CfnPackageVersion(self, \"${1:id}\", ",
            "        markLatest=${2:bool},",
            "        ownerAccount=${3:str},",
            "        packageId=${4:str}, # Required",
            "        packageVersion=${5:str}, # Required",
            "        patchVersion=${6:str}, # Required",
            "        updatedLatestPatchVersion=${7:str},",
            ")"
        ],
        "description": [
            "Construct: panorama.CfnPackageVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-panorama.CfnPackageVersion",
            "Attributes: ",
            "  attrStatus",
            "  attrPackageName",
            "  attrStatusDescription",
            "  attrPackageArn",
            "  attrIsLatestPatch",
            "  attrRegisteredTime"
        ],
        "prefix": "l1-panorama-packageversion",
        "scope": "python"
    },
    "paymentcryptography.CfnAlias": {
        "body": [
            "paymentcryptography.CfnAlias(self, \"${1:id}\", ",
            "        aliasName=${2:str}, # Required",
            "        keyArn=${3:str},",
            ")"
        ],
        "description": [
            "Construct: paymentcryptography.CfnAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-paymentcryptography.CfnAlias"
        ],
        "prefix": "l1-paymentcryptography-alias",
        "scope": "python"
    },
    "paymentcryptography.CfnKey": {
        "body": [
            "paymentcryptography.CfnKey(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        exportable=${3:bool}, # Required",
            "        keyAttributes={",
            "            keyAlgorithm=${4:str},",
            "            keyClass=${5:str},",
            "            keyUsage=${7:str},",
            "        },",
            "        keyCheckValueAlgorithm=${5:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: paymentcryptography.CfnKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-paymentcryptography.CfnKey",
            "Attributes: ",
            "  attrKeyIdentifier",
            "  attrKeyState",
            "  attrKeyOrigin"
        ],
        "prefix": "l1-paymentcryptography-key",
        "scope": "python"
    },
    "pcaconnectorad.CfnConnector": {
        "body": [
            "pcaconnectorad.CfnConnector(self, \"${1:id}\", ",
            "        certificateAuthorityArn=${2:str}, # Required",
            "        directoryId=${3:str}, # Required",
            "        tags={",
            "        },",
            "        vpcInformation={",
            "            securityGroupIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: pcaconnectorad.CfnConnector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pcaconnectorad.CfnConnector",
            "Attributes: ",
            "  attrConnectorArn"
        ],
        "prefix": "l1-pcaconnectorad-connector",
        "scope": "python"
    },
    "pcaconnectorad.CfnDirectoryRegistration": {
        "body": [
            "pcaconnectorad.CfnDirectoryRegistration(self, \"${1:id}\", ",
            "        directoryId=${2:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: pcaconnectorad.CfnDirectoryRegistration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pcaconnectorad.CfnDirectoryRegistration",
            "Attributes: ",
            "  attrDirectoryRegistrationArn"
        ],
        "prefix": "l1-pcaconnectorad-directoryregistration",
        "scope": "python"
    },
    "pcaconnectorad.CfnServicePrincipalName": {
        "body": [
            "pcaconnectorad.CfnServicePrincipalName(self, \"${1:id}\", ",
            "        connectorArn=${2:str},",
            "        directoryRegistrationArn=${3:str},",
            ")"
        ],
        "description": [
            "Construct: pcaconnectorad.CfnServicePrincipalName",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pcaconnectorad.CfnServicePrincipalName"
        ],
        "prefix": "l1-pcaconnectorad-serviceprincipalname",
        "scope": "python"
    },
    "pcaconnectorad.CfnTemplate": {
        "body": [
            "pcaconnectorad.CfnTemplate(self, \"${1:id}\", ",
            "        connectorArn=${2:str}, # Required",
            "        definition={",
            "        },",
            "        name=${4:str}, # Required",
            "        reenrollAllCertificateHolders=${5:bool},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: pcaconnectorad.CfnTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pcaconnectorad.CfnTemplate",
            "Attributes: ",
            "  attrTemplateArn"
        ],
        "prefix": "l1-pcaconnectorad-template",
        "scope": "python"
    },
    "pcaconnectorad.CfnTemplateGroupAccessControlEntry": {
        "body": [
            "pcaconnectorad.CfnTemplateGroupAccessControlEntry(self, \"${1:id}\", ",
            "        accessRights={",
            "            autoEnroll=${2:str},",
            "            enroll=${3:str},",
            "        },",
            "        groupDisplayName=${3:str}, # Required",
            "        groupSecurityIdentifier=${4:str},",
            "        templateArn=${5:str},",
            ")"
        ],
        "description": [
            "Construct: pcaconnectorad.CfnTemplateGroupAccessControlEntry",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pcaconnectorad.CfnTemplateGroupAccessControlEntry"
        ],
        "prefix": "l1-pcaconnectorad-templategroupaccesscontrolentry",
        "scope": "python"
    },
    "personalize.CfnDataset": {
        "body": [
            "personalize.CfnDataset(self, \"${1:id}\", ",
            "        datasetGroupArn=${2:str}, # Required",
            "        datasetImportJob={",
            "            datasetArn=${4:str},",
            "            datasetImportJobArn=${5:str},",
            "            jobName=${6:str},",
            "            roleArn=${7:str},",
            "        },",
            "        datasetType=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        schemaArn=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: personalize.CfnDataset",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-personalize.CfnDataset",
            "Attributes: ",
            "  attrDatasetArn"
        ],
        "prefix": "l1-personalize-dataset",
        "scope": "python"
    },
    "personalize.CfnDatasetGroup": {
        "body": [
            "personalize.CfnDatasetGroup(self, \"${1:id}\", ",
            "        domain=${2:str},",
            "        kmsKeyArn=${3:str},",
            "        name=${4:str}, # Required",
            "        roleArn=${5:str},",
            ")"
        ],
        "description": [
            "Construct: personalize.CfnDatasetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-personalize.CfnDatasetGroup",
            "Attributes: ",
            "  attrDatasetGroupArn"
        ],
        "prefix": "l1-personalize-datasetgroup",
        "scope": "python"
    },
    "personalize.CfnSchema": {
        "body": [
            "personalize.CfnSchema(self, \"${1:id}\", ",
            "        domain=${2:str},",
            "        name=${3:str}, # Required",
            "        schema=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: personalize.CfnSchema",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-personalize.CfnSchema",
            "Attributes: ",
            "  attrSchemaArn"
        ],
        "prefix": "l1-personalize-schema",
        "scope": "python"
    },
    "personalize.CfnSolution": {
        "body": [
            "personalize.CfnSolution(self, \"${1:id}\", ",
            "        datasetGroupArn=${2:str}, # Required",
            "        eventType=${3:str},",
            "        name=${4:str}, # Required",
            "        performAutoML=${5:bool},",
            "        performHPO=${6:bool},",
            "        recipeArn=${7:str},",
            "        solutionConfig={",
            "            eventValueThreshold=${10:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: personalize.CfnSolution",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-personalize.CfnSolution",
            "Attributes: ",
            "  attrSolutionArn"
        ],
        "prefix": "l1-personalize-solution",
        "scope": "python"
    },
    "pinpoint.CfnADMChannel": {
        "body": [
            "pinpoint.CfnADMChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        clientId=${3:str}, # Required",
            "        clientSecret=${4:str}, # Required",
            "        enabled=${5:bool},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnADMChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnADMChannel"
        ],
        "prefix": "l1-pinpoint-admchannel",
        "scope": "python"
    },
    "pinpoint.CfnAPNSChannel": {
        "body": [
            "pinpoint.CfnAPNSChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        bundleId=${3:str},",
            "        certificate=${4:str},",
            "        defaultAuthenticationMethod=${5:str},",
            "        enabled=${6:bool},",
            "        privateKey=${7:str},",
            "        teamId=${8:str},",
            "        tokenKey=${9:str},",
            "        tokenKeyId=${10:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnAPNSChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnAPNSChannel"
        ],
        "prefix": "l1-pinpoint-apnschannel",
        "scope": "python"
    },
    "pinpoint.CfnAPNSSandboxChannel": {
        "body": [
            "pinpoint.CfnAPNSSandboxChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        bundleId=${3:str},",
            "        certificate=${4:str},",
            "        defaultAuthenticationMethod=${5:str},",
            "        enabled=${6:bool},",
            "        privateKey=${7:str},",
            "        teamId=${8:str},",
            "        tokenKey=${9:str},",
            "        tokenKeyId=${10:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnAPNSSandboxChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnAPNSSandboxChannel"
        ],
        "prefix": "l1-pinpoint-apnssandboxchannel",
        "scope": "python"
    },
    "pinpoint.CfnAPNSVoipChannel": {
        "body": [
            "pinpoint.CfnAPNSVoipChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        bundleId=${3:str},",
            "        certificate=${4:str},",
            "        defaultAuthenticationMethod=${5:str},",
            "        enabled=${6:bool},",
            "        privateKey=${7:str},",
            "        teamId=${8:str},",
            "        tokenKey=${9:str},",
            "        tokenKeyId=${10:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnAPNSVoipChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnAPNSVoipChannel"
        ],
        "prefix": "l1-pinpoint-apnsvoipchannel",
        "scope": "python"
    },
    "pinpoint.CfnAPNSVoipSandboxChannel": {
        "body": [
            "pinpoint.CfnAPNSVoipSandboxChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        bundleId=${3:str},",
            "        certificate=${4:str},",
            "        defaultAuthenticationMethod=${5:str},",
            "        enabled=${6:bool},",
            "        privateKey=${7:str},",
            "        teamId=${8:str},",
            "        tokenKey=${9:str},",
            "        tokenKeyId=${10:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnAPNSVoipSandboxChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnAPNSVoipSandboxChannel"
        ],
        "prefix": "l1-pinpoint-apnsvoipsandboxchannel",
        "scope": "python"
    },
    "pinpoint.CfnApp": {
        "body": [
            "pinpoint.CfnApp(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        tags=${3:dict},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnApp",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnApp",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-pinpoint-app",
        "scope": "python"
    },
    "pinpoint.CfnApplicationSettings": {
        "body": [
            "pinpoint.CfnApplicationSettings(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        campaignHook={",
            "            lambdaFunctionName=${3:str},",
            "            mode=${4:str},",
            "            webUrl=${5:str},",
            "        },",
            "        cloudWatchMetricsEnabled=${4:bool},",
            "        limits={",
            "            daily=${5:int},",
            "            maximumDuration=${6:int},",
            "            messagesPerSecond=${7:int},",
            "            total=${8:int},",
            "        },",
            "        quietTime={",
            "            end=${6:str},",
            "            start=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnApplicationSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnApplicationSettings"
        ],
        "prefix": "l1-pinpoint-applicationsettings",
        "scope": "python"
    },
    "pinpoint.CfnBaiduChannel": {
        "body": [
            "pinpoint.CfnBaiduChannel(self, \"${1:id}\", ",
            "        apiKey=${2:str}, # Required",
            "        applicationId=${3:str}, # Required",
            "        enabled=${4:bool},",
            "        secretKey=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnBaiduChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnBaiduChannel"
        ],
        "prefix": "l1-pinpoint-baiduchannel",
        "scope": "python"
    },
    "pinpoint.CfnCampaign": {
        "body": [
            "pinpoint.CfnCampaign(self, \"${1:id}\", ",
            "        additionalTreatments=[],",
            "        applicationId=${3:str}, # Required",
            "        campaignHook={",
            "            lambdaFunctionName=${4:str},",
            "            mode=${5:str},",
            "            webUrl=${6:str},",
            "        },",
            "        customDeliveryConfiguration={",
            "            deliveryUri=${5:str},",
            "            endpointTypes=[],",
            "        },",
            "        description=${6:str},",
            "        holdoutPercent=${7:int},",
            "        isPaused=${8:bool},",
            "        limits={",
            "            daily=${9:int},",
            "            maximumDuration=${10:int},",
            "            messagesPerSecond=${11:int},",
            "            session=${12:int},",
            "            total=${13:int},",
            "        },",
            "        messageConfiguration={",
            "        },",
            "        name=${11:str}, # Required",
            "        priority=${12:int},",
            "        schedule={",
            "            endTime=${13:str},",
            "            frequency=${15:str},",
            "            isLocalTime=${16:bool},",
            "            startTime=${18:str},",
            "            timeZone=${19:str},",
            "        },",
            "        segmentId=${14:str}, # Required",
            "        segmentVersion=${15:int},",
            "        tags=${16:dict},",
            "        templateConfiguration={",
            "        },",
            "        treatmentDescription=${18:str},",
            "        treatmentName=${19:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnCampaign",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnCampaign",
            "Attributes: ",
            "  attrCampaignId",
            "  attrArn"
        ],
        "prefix": "l1-pinpoint-campaign",
        "scope": "python"
    },
    "pinpoint.CfnEmailChannel": {
        "body": [
            "pinpoint.CfnEmailChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        configurationSet=${3:str},",
            "        enabled=${4:bool},",
            "        fromAddress=${5:str}, # Required",
            "        identity=${6:str}, # Required",
            "        orchestrationSendingRoleArn=${7:str},",
            "        roleArn=${8:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnEmailChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnEmailChannel"
        ],
        "prefix": "l1-pinpoint-emailchannel",
        "scope": "python"
    },
    "pinpoint.CfnEmailTemplate": {
        "body": [
            "pinpoint.CfnEmailTemplate(self, \"${1:id}\", ",
            "        defaultSubstitutions=${2:str},",
            "        htmlPart=${3:str},",
            "        subject=${4:str}, # Required",
            "        tags=${5:dict},",
            "        templateDescription=${6:str},",
            "        templateName=${7:str}, # Required",
            "        textPart=${8:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnEmailTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnEmailTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-pinpoint-emailtemplate",
        "scope": "python"
    },
    "pinpoint.CfnEventStream": {
        "body": [
            "pinpoint.CfnEventStream(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        destinationStreamArn=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnEventStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnEventStream"
        ],
        "prefix": "l1-pinpoint-eventstream",
        "scope": "python"
    },
    "pinpoint.CfnGCMChannel": {
        "body": [
            "pinpoint.CfnGCMChannel(self, \"${1:id}\", ",
            "        apiKey=${2:str},",
            "        applicationId=${3:str}, # Required",
            "        defaultAuthenticationMethod=${4:str},",
            "        enabled=${5:bool},",
            "        serviceJson=${6:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnGCMChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnGCMChannel"
        ],
        "prefix": "l1-pinpoint-gcmchannel",
        "scope": "python"
    },
    "pinpoint.CfnInAppTemplate": {
        "body": [
            "pinpoint.CfnInAppTemplate(self, \"${1:id}\", ",
            "        content=[],",
            "        customConfig=${3:dict},",
            "        layout=${4:str},",
            "        tags=${5:dict},",
            "        templateDescription=${6:str},",
            "        templateName=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnInAppTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnInAppTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-pinpoint-inapptemplate",
        "scope": "python"
    },
    "pinpoint.CfnPushTemplate": {
        "body": [
            "pinpoint.CfnPushTemplate(self, \"${1:id}\", ",
            "        aDM={",
            "            action=${2:str},",
            "            body=${3:str},",
            "            imageIconUrl=${4:str},",
            "            imageUrl=${5:str},",
            "            smallImageIconUrl=${6:str},",
            "            sound=${7:str},",
            "            title=${8:str},",
            "            url=${9:str},",
            "        },",
            "        aPNS={",
            "            action=${3:str},",
            "            body=${4:str},",
            "            mediaUrl=${5:str},",
            "            sound=${6:str},",
            "            title=${7:str},",
            "            url=${8:str},",
            "        },",
            "        baidu={",
            "            action=${4:str},",
            "            body=${5:str},",
            "            imageIconUrl=${6:str},",
            "            imageUrl=${7:str},",
            "            smallImageIconUrl=${8:str},",
            "            sound=${9:str},",
            "            title=${10:str},",
            "            url=${11:str},",
            "        },",
            "        default={",
            "            action=${5:str},",
            "            body=${6:str},",
            "            sound=${7:str},",
            "            title=${8:str},",
            "            url=${9:str},",
            "        },",
            "        defaultSubstitutions=${6:str},",
            "        gCM={",
            "            action=${7:str},",
            "            body=${8:str},",
            "            imageIconUrl=${9:str},",
            "            imageUrl=${10:str},",
            "            smallImageIconUrl=${11:str},",
            "            sound=${12:str},",
            "            title=${13:str},",
            "            url=${14:str},",
            "        },",
            "        tags=${8:dict},",
            "        templateDescription=${9:str},",
            "        templateName=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnPushTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnPushTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-pinpoint-pushtemplate",
        "scope": "python"
    },
    "pinpoint.CfnSMSChannel": {
        "body": [
            "pinpoint.CfnSMSChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        enabled=${3:bool},",
            "        senderId=${4:str},",
            "        shortCode=${5:str},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnSMSChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnSMSChannel"
        ],
        "prefix": "l1-pinpoint-smschannel",
        "scope": "python"
    },
    "pinpoint.CfnSegment": {
        "body": [
            "pinpoint.CfnSegment(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        dimensions={",
            "            attributes=${3:dict},",
            "            metrics=${7:dict},",
            "            userAttributes=${8:dict},",
            "        },",
            "        name=${4:str}, # Required",
            "        segmentGroups={",
            "            groups=[],",
            "            include=${6:str},",
            "        },",
            "        tags=${6:dict},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnSegment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnSegment",
            "Attributes: ",
            "  attrSegmentId",
            "  attrArn"
        ],
        "prefix": "l1-pinpoint-segment",
        "scope": "python"
    },
    "pinpoint.CfnSmsTemplate": {
        "body": [
            "pinpoint.CfnSmsTemplate(self, \"${1:id}\", ",
            "        body=${2:str}, # Required",
            "        defaultSubstitutions=${3:str},",
            "        tags=${4:dict},",
            "        templateDescription=${5:str},",
            "        templateName=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnSmsTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnSmsTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-pinpoint-smstemplate",
        "scope": "python"
    },
    "pinpoint.CfnVoiceChannel": {
        "body": [
            "pinpoint.CfnVoiceChannel(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        enabled=${3:bool},",
            ")"
        ],
        "description": [
            "Construct: pinpoint.CfnVoiceChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpoint.CfnVoiceChannel"
        ],
        "prefix": "l1-pinpoint-voicechannel",
        "scope": "python"
    },
    "pinpointemail.CfnConfigurationSet": {
        "body": [
            "pinpointemail.CfnConfigurationSet(self, \"${1:id}\", ",
            "        deliveryOptions={",
            "            sendingPoolName=${2:str},",
            "        },",
            "        name=${3:str}, # Required",
            "        reputationOptions={",
            "            reputationMetricsEnabled=${4:bool},",
            "        },",
            "        sendingOptions={",
            "            sendingEnabled=${5:bool},",
            "        },",
            "        tags=[],",
            "        trackingOptions={",
            "            customRedirectDomain=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: pinpointemail.CfnConfigurationSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpointemail.CfnConfigurationSet"
        ],
        "prefix": "l1-pinpointemail-configurationset",
        "scope": "python"
    },
    "pinpointemail.CfnConfigurationSetEventDestination": {
        "body": [
            "pinpointemail.CfnConfigurationSetEventDestination(self, \"${1:id}\", ",
            "        configurationSetName=${2:str}, # Required",
            "        eventDestination={",
            "            enabled=${4:bool},",
            "            matchingEventTypes=[],",
            "        },",
            "        eventDestinationName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: pinpointemail.CfnConfigurationSetEventDestination",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpointemail.CfnConfigurationSetEventDestination"
        ],
        "prefix": "l1-pinpointemail-configurationseteventdestination",
        "scope": "python"
    },
    "pinpointemail.CfnDedicatedIpPool": {
        "body": [
            "pinpointemail.CfnDedicatedIpPool(self, \"${1:id}\", ",
            "        poolName=${2:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: pinpointemail.CfnDedicatedIpPool",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpointemail.CfnDedicatedIpPool"
        ],
        "prefix": "l1-pinpointemail-dedicatedippool",
        "scope": "python"
    },
    "pinpointemail.CfnIdentity": {
        "body": [
            "pinpointemail.CfnIdentity(self, \"${1:id}\", ",
            "        dkimSigningEnabled=${2:bool},",
            "        feedbackForwardingEnabled=${3:bool},",
            "        mailFromAttributes={",
            "            behaviorOnMxFailure=${4:str},",
            "            mailFromDomain=${5:str},",
            "        },",
            "        name=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: pinpointemail.CfnIdentity",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pinpointemail.CfnIdentity",
            "Attributes: ",
            "  attrIdentityDNSRecordName3",
            "  attrIdentityDNSRecordName1",
            "  attrIdentityDNSRecordName2",
            "  attrIdentityDNSRecordValue3",
            "  attrIdentityDNSRecordValue2",
            "  attrIdentityDNSRecordValue1"
        ],
        "prefix": "l1-pinpointemail-identity",
        "scope": "python"
    },
    "pipes.CfnPipe": {
        "body": [
            "pipes.CfnPipe(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        desiredState=${3:str},",
            "        enrichment=${4:str},",
            "        enrichmentParameters={",
            "            inputTemplate=${6:str},",
            "        },",
            "        logConfiguration={",
            "            includeExecutionData=[],",
            "            level=${9:str},",
            "        },",
            "        name=${7:str},",
            "        roleArn=${8:str}, # Required",
            "        source=${9:str}, # Required",
            "        sourceParameters={",
            "        },",
            "        tags={",
            "        },",
            "        target=${12:str}, # Required",
            "        targetParameters={",
            "            inputTemplate=${18:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: pipes.CfnPipe",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-pipes.CfnPipe",
            "Attributes: ",
            "  attrStateReason",
            "  attrCurrentState",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrArn"
        ],
        "prefix": "l1-pipes-pipe",
        "scope": "python"
    },
    "proton.CfnEnvironmentAccountConnection": {
        "body": [
            "proton.CfnEnvironmentAccountConnection(self, \"${1:id}\", ",
            "        codebuildRoleArn=${2:str},",
            "        componentRoleArn=${3:str},",
            "        environmentAccountId=${4:str},",
            "        environmentName=${5:str},",
            "        managementAccountId=${6:str},",
            "        roleArn=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: proton.CfnEnvironmentAccountConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-proton.CfnEnvironmentAccountConnection",
            "Attributes: ",
            "  attrStatus",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-proton-environmentaccountconnection",
        "scope": "python"
    },
    "proton.CfnEnvironmentTemplate": {
        "body": [
            "proton.CfnEnvironmentTemplate(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        displayName=${3:str},",
            "        encryptionKey=${4:str},",
            "        name=${5:str},",
            "        provisioning=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: proton.CfnEnvironmentTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-proton.CfnEnvironmentTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-proton-environmenttemplate",
        "scope": "python"
    },
    "proton.CfnServiceTemplate": {
        "body": [
            "proton.CfnServiceTemplate(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        displayName=${3:str},",
            "        encryptionKey=${4:str},",
            "        name=${5:str},",
            "        pipelineProvisioning=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: proton.CfnServiceTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-proton.CfnServiceTemplate",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-proton-servicetemplate",
        "scope": "python"
    },
    "qbusiness.CfnApplication": {
        "body": [
            "qbusiness.CfnApplication(self, \"${1:id}\", ",
            "        attachmentsConfiguration={",
            "            attachmentsControlMode=${2:str},",
            "        },",
            "        description=${3:str},",
            "        displayName=${4:str}, # Required",
            "        encryptionConfiguration={",
            "            kmsKeyId=${5:str},",
            "        },",
            "        identityCenterInstanceArn=${6:str},",
            "        roleArn=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: qbusiness.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qbusiness.CfnApplication",
            "Attributes: ",
            "  attrStatus",
            "  attrIdentityCenterApplicationArn",
            "  attrApplicationArn",
            "  attrCreatedAt",
            "  attrApplicationId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-qbusiness-application",
        "scope": "python"
    },
    "qbusiness.CfnDataSource": {
        "body": [
            "qbusiness.CfnDataSource(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        configuration=${3:dict}, # Required",
            "        description=${4:str},",
            "        displayName=${5:str}, # Required",
            "        documentEnrichmentConfiguration={",
            "            inlineConfigurations=[],",
            "        },",
            "        indexId=${7:str}, # Required",
            "        roleArn=${8:str},",
            "        syncSchedule=${9:str},",
            "        tags=[],",
            "        vpcConfiguration={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: qbusiness.CfnDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qbusiness.CfnDataSource",
            "Attributes: ",
            "  attrStatus",
            "  attrDataSourceArn",
            "  attrType",
            "  attrCreatedAt",
            "  attrUpdatedAt",
            "  attrDataSourceId"
        ],
        "prefix": "l1-qbusiness-datasource",
        "scope": "python"
    },
    "qbusiness.CfnIndex": {
        "body": [
            "qbusiness.CfnIndex(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        capacityConfiguration={",
            "            units=${3:float},",
            "        },",
            "        description=${4:str},",
            "        displayName=${5:str}, # Required",
            "        documentAttributeConfigurations=[],",
            "        tags=[],",
            "        type=${8:str},",
            ")"
        ],
        "description": [
            "Construct: qbusiness.CfnIndex",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qbusiness.CfnIndex",
            "Attributes: ",
            "  attrStatus",
            "  attrIndexStatistics",
            "  attrIndexStatistics.TextDocumentStatistics.IndexedTextDocumentCount",
            "  attrIndexId",
            "  attrIndexArn",
            "  attrIndexStatistics.TextDocumentStatistics",
            "  attrCreatedAt",
            "  attrIndexStatistics.TextDocumentStatistics.IndexedTextBytes",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-qbusiness-index",
        "scope": "python"
    },
    "qbusiness.CfnPlugin": {
        "body": [
            "qbusiness.CfnPlugin(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        authConfiguration={",
            "            noAuthConfiguration=${4:dict},",
            "        },",
            "        customPluginConfiguration={",
            "            apiSchemaType=${5:str},",
            "            description=${6:str},",
            "        },",
            "        displayName=${5:str}, # Required",
            "        serverUrl=${6:str},",
            "        state=${7:str},",
            "        tags=[],",
            "        type=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: qbusiness.CfnPlugin",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qbusiness.CfnPlugin",
            "Attributes: ",
            "  attrPluginArn",
            "  attrCreatedAt",
            "  attrBuildStatus",
            "  attrPluginId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-qbusiness-plugin",
        "scope": "python"
    },
    "qbusiness.CfnRetriever": {
        "body": [
            "qbusiness.CfnRetriever(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        configuration={",
            "        },",
            "        displayName=${4:str}, # Required",
            "        roleArn=${5:str},",
            "        tags=[],",
            "        type=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: qbusiness.CfnRetriever",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qbusiness.CfnRetriever",
            "Attributes: ",
            "  attrStatus",
            "  attrRetrieverArn",
            "  attrCreatedAt",
            "  attrRetrieverId",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-qbusiness-retriever",
        "scope": "python"
    },
    "qbusiness.CfnWebExperience": {
        "body": [
            "qbusiness.CfnWebExperience(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        roleArn=${3:str},",
            "        samplePromptsControlMode=${4:str},",
            "        subtitle=${5:str},",
            "        tags=[],",
            "        title=${7:str},",
            "        welcomeMessage=${8:str},",
            ")"
        ],
        "description": [
            "Construct: qbusiness.CfnWebExperience",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qbusiness.CfnWebExperience",
            "Attributes: ",
            "  attrStatus",
            "  attrWebExperienceId",
            "  attrDefaultEndpoint",
            "  attrWebExperienceArn",
            "  attrCreatedAt",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-qbusiness-webexperience",
        "scope": "python"
    },
    "qldb.CfnLedger": {
        "body": [
            "qldb.CfnLedger(self, \"${1:id}\", ",
            "        deletionProtection=${2:bool},",
            "        kmsKey=${3:str},",
            "        name=${4:str},",
            "        permissionsMode=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: qldb.CfnLedger",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qldb.CfnLedger"
        ],
        "prefix": "l1-qldb-ledger",
        "scope": "python"
    },
    "qldb.CfnStream": {
        "body": [
            "qldb.CfnStream(self, \"${1:id}\", ",
            "        exclusiveEndTime=${2:str},",
            "        inclusiveStartTime=${3:str}, # Required",
            "        kinesisConfiguration={",
            "            aggregationEnabled=${4:bool},",
            "            streamArn=${5:str},",
            "        },",
            "        ledgerName=${5:str}, # Required",
            "        roleArn=${6:str}, # Required",
            "        streamName=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: qldb.CfnStream",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-qldb.CfnStream",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-qldb-stream",
        "scope": "python"
    },
    "quicksight.CfnAnalysis": {
        "body": [
            "quicksight.CfnAnalysis(self, \"${1:id}\", ",
            "        analysisId=${2:str}, # Required",
            "        awsAccountId=${3:str}, # Required",
            "        definition={",
            "            calculatedFields=[],",
            "            columnConfigurations=[],",
            "            dataSetIdentifierDeclarations=[],",
            "            filterGroups=[],",
            "            parameterDeclarations=[],",
            "            sheets=[],",
            "        },",
            "        errors=[],",
            "        name=${6:str}, # Required",
            "        parameters={",
            "            dateTimeParameters=[],",
            "            decimalParameters=[],",
            "            integerParameters=[],",
            "            stringParameters=[],",
            "        },",
            "        permissions=[],",
            "        sheets=[],",
            "        sourceEntity={",
            "        },",
            "        status=${11:str},",
            "        tags=[],",
            "        themeArn=${13:str},",
            "        validationStrategy={",
            "            mode=${14:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnAnalysis",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnAnalysis",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrDataSetArns",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-quicksight-analysis",
        "scope": "python"
    },
    "quicksight.CfnDashboard": {
        "body": [
            "quicksight.CfnDashboard(self, \"${1:id}\", ",
            "        awsAccountId=${2:str}, # Required",
            "        dashboardId=${3:str}, # Required",
            "        dashboardPublishOptions={",
            "        },",
            "        definition={",
            "            calculatedFields=[],",
            "            columnConfigurations=[],",
            "            dataSetIdentifierDeclarations=[],",
            "            filterGroups=[],",
            "            parameterDeclarations=[],",
            "            sheets=[],",
            "        },",
            "        linkEntities=[],",
            "        linkSharingConfiguration={",
            "            permissions=[],",
            "        },",
            "        name=${8:str}, # Required",
            "        parameters={",
            "            dateTimeParameters=[],",
            "            decimalParameters=[],",
            "            integerParameters=[],",
            "            stringParameters=[],",
            "        },",
            "        permissions=[],",
            "        sourceEntity={",
            "        },",
            "        tags=[],",
            "        themeArn=${13:str},",
            "        validationStrategy={",
            "            mode=${14:str},",
            "        },",
            "        versionDescription=${15:str},",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnDashboard",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnDashboard",
            "Attributes: ",
            "  attrVersion.Status",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrVersion.VersionNumber",
            "  attrVersion.Sheets",
            "  attrVersion.Arn",
            "  attrVersion.ThemeArn",
            "  attrVersion.Errors",
            "  attrVersion.CreatedTime",
            "  attrVersion.Description",
            "  attrLastPublishedTime",
            "  attrVersion",
            "  attrVersion.DataSetArns",
            "  attrArn",
            "  attrVersion.SourceEntityArn"
        ],
        "prefix": "l1-quicksight-dashboard",
        "scope": "python"
    },
    "quicksight.CfnDataSet": {
        "body": [
            "quicksight.CfnDataSet(self, \"${1:id}\", ",
            "        awsAccountId=${2:str},",
            "        columnGroups=[],",
            "        columnLevelPermissionRules=[],",
            "        dataSetId=${5:str},",
            "        dataSetRefreshProperties={",
            "        },",
            "        dataSetUsageConfiguration={",
            "            disableUseAsDirectQuerySource=${7:bool},",
            "            disableUseAsImportedSource=${8:bool},",
            "        },",
            "        datasetParameters=[],",
            "        fieldFolders={",
            "        },",
            "        importMode=${10:str},",
            "        ingestionWaitPolicy={",
            "            ingestionWaitTimeInHours=${11:float},",
            "            waitForSpiceIngestion=${12:bool},",
            "        },",
            "        logicalTableMap={",
            "        },",
            "        name=${13:str},",
            "        permissions=[],",
            "        physicalTableMap={",
            "        },",
            "        rowLevelPermissionDataSet={",
            "            arn=${16:str},",
            "            formatVersion=${17:str},",
            "            namespace=${18:str},",
            "            permissionPolicy=${19:str},",
            "            status=${20:str},",
            "        },",
            "        rowLevelPermissionTagConfiguration={",
            "            status=${17:str},",
            "            tagRuleConfigurations=${18:dict},",
            "            tagRules=[],",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnDataSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnDataSet",
            "Attributes: ",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrOutputColumns",
            "  attrConsumedSpiceCapacityInBytes",
            "  attrArn"
        ],
        "prefix": "l1-quicksight-dataset",
        "scope": "python"
    },
    "quicksight.CfnDataSource": {
        "body": [
            "quicksight.CfnDataSource(self, \"${1:id}\", ",
            "        alternateDataSourceParameters=[],",
            "        awsAccountId=${3:str},",
            "        credentials={",
            "            copySourceArn=${4:str},",
            "            secretArn=${6:str},",
            "        },",
            "        dataSourceId=${5:str},",
            "        dataSourceParameters={",
            "        },",
            "        errorInfo={",
            "            message=${7:str},",
            "            type=${8:str},",
            "        },",
            "        name=${8:str}, # Required",
            "        permissions=[],",
            "        sslProperties={",
            "            disableSsl=${10:bool},",
            "        },",
            "        tags=[],",
            "        type=${12:str}, # Required",
            "        vpcConnectionProperties={",
            "            vpcConnectionArn=${13:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnDataSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnDataSource",
            "Attributes: ",
            "  attrStatus",
            "  attrCreatedTime",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-quicksight-datasource",
        "scope": "python"
    },
    "quicksight.CfnRefreshSchedule": {
        "body": [
            "quicksight.CfnRefreshSchedule(self, \"${1:id}\", ",
            "        awsAccountId=${2:str},",
            "        dataSetId=${3:str},",
            "        schedule={",
            "            refreshType=${4:str},",
            "            scheduleId=${6:str},",
            "            startAfterDateTime=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnRefreshSchedule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnRefreshSchedule",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-quicksight-refreshschedule",
        "scope": "python"
    },
    "quicksight.CfnTemplate": {
        "body": [
            "quicksight.CfnTemplate(self, \"${1:id}\", ",
            "        awsAccountId=${2:str}, # Required",
            "        definition={",
            "            calculatedFields=[],",
            "            columnConfigurations=[],",
            "            dataSetConfigurations=[],",
            "            filterGroups=[],",
            "            parameterDeclarations=[],",
            "            sheets=[],",
            "        },",
            "        name=${4:str},",
            "        permissions=[],",
            "        sourceEntity={",
            "        },",
            "        tags=[],",
            "        templateId=${8:str}, # Required",
            "        validationStrategy={",
            "            mode=${9:str},",
            "        },",
            "        versionDescription=${10:str},",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnTemplate",
            "Attributes: ",
            "  attrVersion.Status",
            "  attrCreatedTime",
            "  attrVersion.DataSetConfigurations",
            "  attrLastUpdatedTime",
            "  attrVersion.VersionNumber",
            "  attrVersion.Sheets",
            "  attrVersion.ThemeArn",
            "  attrVersion.Errors",
            "  attrVersion.CreatedTime",
            "  attrVersion.Description",
            "  attrVersion",
            "  attrArn",
            "  attrVersion.SourceEntityArn"
        ],
        "prefix": "l1-quicksight-template",
        "scope": "python"
    },
    "quicksight.CfnTheme": {
        "body": [
            "quicksight.CfnTheme(self, \"${1:id}\", ",
            "        awsAccountId=${2:str}, # Required",
            "        baseThemeId=${3:str}, # Required",
            "        configuration={",
            "        },",
            "        name=${5:str}, # Required",
            "        permissions=[],",
            "        tags=[],",
            "        themeId=${8:str}, # Required",
            "        versionDescription=${9:str},",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnTheme",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnTheme",
            "Attributes: ",
            "  attrVersion.Configuration.Typography",
            "  attrVersion.Status",
            "  attrVersion.BaseThemeId",
            "  attrCreatedTime",
            "  attrVersion.Configuration",
            "  attrVersion.Configuration.DataColorPalette",
            "  attrLastUpdatedTime",
            "  attrVersion.Configuration.UIColorPalette",
            "  attrVersion.VersionNumber",
            "  attrVersion.Arn",
            "  attrVersion.Errors",
            "  attrVersion.Description",
            "  attrVersion.CreatedTime",
            "  attrType",
            "  attrVersion",
            "  attrArn",
            "  attrVersion.Configuration.Sheet"
        ],
        "prefix": "l1-quicksight-theme",
        "scope": "python"
    },
    "quicksight.CfnTopic": {
        "body": [
            "quicksight.CfnTopic(self, \"${1:id}\", ",
            "        awsAccountId=${2:str},",
            "        dataSets=[],",
            "        description=${4:str},",
            "        name=${5:str},",
            "        topicId=${6:str},",
            "        userExperienceVersion=${7:str},",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnTopic",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnTopic",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-quicksight-topic",
        "scope": "python"
    },
    "quicksight.CfnVPCConnection": {
        "body": [
            "quicksight.CfnVPCConnection(self, \"${1:id}\", ",
            "        availabilityStatus=${2:str},",
            "        awsAccountId=${3:str},",
            "        dnsResolvers=[],",
            "        name=${5:str},",
            "        roleArn=${6:str},",
            "        securityGroupIds=[],",
            "        subnetIds=[],",
            "        tags=[],",
            "        vPCConnectionId=${10:str},",
            ")"
        ],
        "description": [
            "Construct: quicksight.CfnVPCConnection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-quicksight.CfnVPCConnection",
            "Attributes: ",
            "  attrStatus",
            "  attrCreatedTime",
            "  attrVPCId",
            "  attrNetworkInterfaces",
            "  attrLastUpdatedTime",
            "  attrArn"
        ],
        "prefix": "l1-quicksight-vpcconnection",
        "scope": "python"
    },
    "ram.CfnPermission": {
        "body": [
            "ram.CfnPermission(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        policyTemplate=${3:dict}, # Required",
            "        resourceType=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ram.CfnPermission",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ram.CfnPermission",
            "Attributes: ",
            "  attrVersion",
            "  attrPermissionType",
            "  attrArn",
            "  attrIsResourceTypeDefault"
        ],
        "prefix": "l1-ram-permission",
        "scope": "python"
    },
    "ram.CfnResourceShare": {
        "body": [
            "ram.CfnResourceShare(self, \"${1:id}\", ",
            "        allowExternalPrincipals=${2:bool},",
            "        name=${3:str}, # Required",
            "        permissionArns=[],",
            "        principals=[],",
            "        resourceArns=[],",
            "        sources=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ram.CfnResourceShare",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ram.CfnResourceShare",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ram-resourceshare",
        "scope": "python"
    },
    "rds.CfnCustomDBEngineVersion": {
        "body": [
            "rds.CfnCustomDBEngineVersion(self, \"${1:id}\", ",
            "        databaseInstallationFilesS3BucketName=${2:str},",
            "        databaseInstallationFilesS3Prefix=${3:str},",
            "        description=${4:str},",
            "        engine=${5:str}, # Required",
            "        engineVersion=${6:str}, # Required",
            "        imageId=${7:str},",
            "        kMSKeyId=${8:str},",
            "        manifest=${9:str},",
            "        sourceCustomDbEngineVersionIdentifier=${10:str},",
            "        status=${11:str},",
            "        tags=[],",
            "        useAwsProvidedLatestImage=${13:bool},",
            ")"
        ],
        "description": [
            "Construct: rds.CfnCustomDBEngineVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnCustomDBEngineVersion",
            "Attributes: ",
            "  attrDBEngineVersionArn"
        ],
        "prefix": "l1-rds-customdbengineversion",
        "scope": "python"
    },
    "rds.CfnDBCluster": {
        "body": [
            "rds.CfnDBCluster(self, \"${1:id}\", ",
            "        allocatedStorage=${2:int},",
            "        associatedRoles=[],",
            "        autoMinorVersionUpgrade=${4:bool},",
            "        availabilityZones=[],",
            "        backtrackWindow=${6:int},",
            "        backupRetentionPeriod=${7:int},",
            "        copyTagsToSnapshot=${8:bool},",
            "        dBClusterIdentifier=${9:str},",
            "        dBClusterInstanceClass=${10:str},",
            "        dBClusterParameterGroupName=${11:str},",
            "        dBInstanceParameterGroupName=${12:str},",
            "        dBSubnetGroupName=${13:str},",
            "        dBSystemId=${14:str},",
            "        databaseName=${15:str},",
            "        deletionProtection=${16:bool},",
            "        domain=${17:str},",
            "        domainIAMRoleName=${18:str},",
            "        enableCloudwatchLogsExports=[],",
            "        enableGlobalWriteForwarding=${20:bool},",
            "        enableHttpEndpoint=${21:bool},",
            "        enableIAMDatabaseAuthentication=${22:bool},",
            "        enableLocalWriteForwarding=${23:bool},",
            "        engine=${24:str},",
            "        engineLifecycleSupport=${25:str},",
            "        engineMode=${26:str},",
            "        engineVersion=${27:str},",
            "        globalClusterIdentifier=${28:str},",
            "        iops=${29:int},",
            "        kmsKeyId=${30:str},",
            "        manageMasterUserPassword=${31:bool},",
            "        masterUserPassword=${32:str},",
            "        masterUserSecret={",
            "            kmsKeyId=${33:str},",
            "            secretArn=${34:str},",
            "        },",
            "        masterUsername=${34:str},",
            "        monitoringInterval=${35:int},",
            "        monitoringRoleArn=${36:str},",
            "        networkType=${37:str},",
            "        performanceInsightsEnabled=${38:bool},",
            "        performanceInsightsKmsKeyId=${39:str},",
            "        performanceInsightsRetentionPeriod=${40:int},",
            "        port=${41:int},",
            "        preferredBackupWindow=${42:str},",
            "        preferredMaintenanceWindow=${43:str},",
            "        publiclyAccessible=${44:bool},",
            "        replicationSourceIdentifier=${45:str},",
            "        restoreToTime=${46:str},",
            "        restoreType=${47:str},",
            "        scalingConfiguration={",
            "            autoPause=${48:bool},",
            "            maxCapacity=${49:int},",
            "            minCapacity=${50:int},",
            "            secondsBeforeTimeout=${51:int},",
            "            secondsUntilAutoPause=${52:int},",
            "            timeoutAction=${53:str},",
            "        },",
            "        serverlessV2ScalingConfiguration={",
            "            maxCapacity=${49:float},",
            "            minCapacity=${50:float},",
            "        },",
            "        snapshotIdentifier=${50:str},",
            "        sourceDBClusterIdentifier=${51:str},",
            "        sourceRegion=${52:str},",
            "        storageEncrypted=${53:bool},",
            "        storageType=${54:str},",
            "        tags=[],",
            "        useLatestRestorableTime=${56:bool},",
            "        vpcSecurityGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBCluster",
            "Attributes: ",
            "  attrEndpoint.Address",
            "  attrEndpoint",
            "  attrDBClusterArn",
            "  attrEndpoint.Port",
            "  attrReadEndpoint.Address",
            "  attrStorageThroughput",
            "  attrDBClusterResourceId",
            "  attrMasterUserSecret.SecretArn"
        ],
        "prefix": "l1-rds-dbcluster",
        "scope": "python"
    },
    "rds.CfnDBClusterParameterGroup": {
        "body": [
            "rds.CfnDBClusterParameterGroup(self, \"${1:id}\", ",
            "        dBClusterParameterGroupName=${2:str},",
            "        description=${3:str}, # Required",
            "        family=${4:str}, # Required",
            "        parameters=${5:dict}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBClusterParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBClusterParameterGroup"
        ],
        "prefix": "l1-rds-dbclusterparametergroup",
        "scope": "python"
    },
    "rds.CfnDBInstance": {
        "body": [
            "rds.CfnDBInstance(self, \"${1:id}\", ",
            "        allocatedStorage=${2:str},",
            "        allowMajorVersionUpgrade=${3:bool},",
            "        associatedRoles=[],",
            "        autoMinorVersionUpgrade=${5:bool},",
            "        automaticBackupReplicationKmsKeyId=${6:str},",
            "        automaticBackupReplicationRegion=${7:str},",
            "        availabilityZone=${8:str},",
            "        backupRetentionPeriod=${9:int},",
            "        cACertificateIdentifier=${10:str},",
            "        certificateDetails={",
            "            cAIdentifier=${11:str},",
            "            validTill=${12:str},",
            "        },",
            "        certificateRotationRestart=${12:bool},",
            "        characterSetName=${13:str},",
            "        copyTagsToSnapshot=${14:bool},",
            "        customIAMInstanceProfile=${15:str},",
            "        dBClusterIdentifier=${16:str},",
            "        dBClusterSnapshotIdentifier=${17:str},",
            "        dBInstanceClass=${18:str},",
            "        dBInstanceIdentifier=${19:str},",
            "        dBName=${20:str},",
            "        dBParameterGroupName=${21:str},",
            "        dBSecurityGroups=[],",
            "        dBSnapshotIdentifier=${23:str},",
            "        dBSubnetGroupName=${24:str},",
            "        dedicatedLogVolume=${25:bool},",
            "        deleteAutomatedBackups=${26:bool},",
            "        deletionProtection=${27:bool},",
            "        domain=${28:str},",
            "        domainAuthSecretArn=${29:str},",
            "        domainDnsIps=[],",
            "        domainFqdn=${31:str},",
            "        domainIAMRoleName=${32:str},",
            "        domainOu=${33:str},",
            "        enableCloudwatchLogsExports=[],",
            "        enableIAMDatabaseAuthentication=${35:bool},",
            "        enablePerformanceInsights=${36:bool},",
            "        endpoint={",
            "            address=${37:str},",
            "            hostedZoneId=${38:str},",
            "            port=${39:str},",
            "        },",
            "        engine=${38:str},",
            "        engineLifecycleSupport=${39:str},",
            "        engineVersion=${40:str},",
            "        iops=${41:int},",
            "        kmsKeyId=${42:str},",
            "        licenseModel=${43:str},",
            "        manageMasterUserPassword=${44:bool},",
            "        masterUserPassword=${45:str},",
            "        masterUserSecret={",
            "            kmsKeyId=${46:str},",
            "            secretArn=${47:str},",
            "        },",
            "        masterUsername=${47:str},",
            "        maxAllocatedStorage=${48:int},",
            "        monitoringInterval=${49:int},",
            "        monitoringRoleArn=${50:str},",
            "        multiAZ=${51:bool},",
            "        ncharCharacterSetName=${52:str},",
            "        networkType=${53:str},",
            "        optionGroupName=${54:str},",
            "        performanceInsightsKMSKeyId=${55:str},",
            "        performanceInsightsRetentionPeriod=${56:int},",
            "        port=${57:str},",
            "        preferredBackupWindow=${58:str},",
            "        preferredMaintenanceWindow=${59:str},",
            "        processorFeatures=[],",
            "        promotionTier=${61:int},",
            "        publiclyAccessible=${62:bool},",
            "        replicaMode=${63:str},",
            "        restoreTime=${64:str},",
            "        sourceDBClusterIdentifier=${65:str},",
            "        sourceDBInstanceAutomatedBackupsArn=${66:str},",
            "        sourceDBInstanceIdentifier=${67:str},",
            "        sourceDbiResourceId=${68:str},",
            "        sourceRegion=${69:str},",
            "        storageEncrypted=${70:bool},",
            "        storageThroughput=${71:int},",
            "        storageType=${72:str},",
            "        tags=[],",
            "        timezone=${74:str},",
            "        useDefaultProcessorFeatures=${75:bool},",
            "        useLatestRestorableTime=${76:bool},",
            "        vPCSecurityGroups=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBInstance",
            "Attributes: ",
            "  attrDBSystemId",
            "  attrEndpoint.Address",
            "  attrDBInstanceArn",
            "  attrCertificateDetails.ValidTill",
            "  attrCertificateDetails.CAIdentifier",
            "  attrEndpoint.Port",
            "  attrEndpoint.HostedZoneId",
            "  attrDbiResourceId",
            "  attrMasterUserSecret.SecretArn"
        ],
        "prefix": "l1-rds-dbinstance",
        "scope": "python"
    },
    "rds.CfnDBParameterGroup": {
        "body": [
            "rds.CfnDBParameterGroup(self, \"${1:id}\", ",
            "        dBParameterGroupName=${2:str},",
            "        description=${3:str}, # Required",
            "        family=${4:str}, # Required",
            "        parameters=${5:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBParameterGroup",
            "Attributes: ",
            "  attrDBParameterGroupName"
        ],
        "prefix": "l1-rds-dbparametergroup",
        "scope": "python"
    },
    "rds.CfnDBProxy": {
        "body": [
            "rds.CfnDBProxy(self, \"${1:id}\", ",
            "        auth=[], # Required",
            "        dBProxyName=${3:str}, # Required",
            "        debugLogging=${4:bool},",
            "        engineFamily=${5:str}, # Required",
            "        idleClientTimeout=${6:int},",
            "        requireTLS=${7:bool},",
            "        roleArn=${8:str}, # Required",
            "        tags=[],",
            "        vpcSecurityGroupIds=[],",
            "        vpcSubnetIds=[], # Required",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBProxy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBProxy",
            "Attributes: ",
            "  attrEndpoint",
            "  attrVpcId",
            "  attrDBProxyArn"
        ],
        "prefix": "l1-rds-dbproxy",
        "scope": "python"
    },
    "rds.CfnDBProxyEndpoint": {
        "body": [
            "rds.CfnDBProxyEndpoint(self, \"${1:id}\", ",
            "        dBProxyEndpointName=${2:str}, # Required",
            "        dBProxyName=${3:str}, # Required",
            "        tags=[],",
            "        targetRole=${5:str},",
            "        vpcSecurityGroupIds=[],",
            "        vpcSubnetIds=[], # Required",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBProxyEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBProxyEndpoint",
            "Attributes: ",
            "  attrDBProxyEndpointArn",
            "  attrIsDefault",
            "  attrVpcId",
            "  attrEndpoint"
        ],
        "prefix": "l1-rds-dbproxyendpoint",
        "scope": "python"
    },
    "rds.CfnDBProxyTargetGroup": {
        "body": [
            "rds.CfnDBProxyTargetGroup(self, \"${1:id}\", ",
            "        connectionPoolConfigurationInfo={",
            "            connectionBorrowTimeout=${2:int},",
            "            initQuery=${3:str},",
            "            maxConnectionsPercent=${4:int},",
            "            maxIdleConnectionsPercent=${5:int},",
            "            sessionPinningFilters=[],",
            "        },",
            "        dBClusterIdentifiers=[],",
            "        dBInstanceIdentifiers=[],",
            "        dBProxyName=${5:str}, # Required",
            "        targetGroupName=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBProxyTargetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBProxyTargetGroup",
            "Attributes: ",
            "  attrTargetGroupArn"
        ],
        "prefix": "l1-rds-dbproxytargetgroup",
        "scope": "python"
    },
    "rds.CfnDBSecurityGroup": {
        "body": [
            "rds.CfnDBSecurityGroup(self, \"${1:id}\", ",
            "        dBSecurityGroupIngress=[], # Required",
            "        eC2VpcId=${3:str},",
            "        groupDescription=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBSecurityGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBSecurityGroup"
        ],
        "prefix": "l1-rds-dbsecuritygroup",
        "scope": "python"
    },
    "rds.CfnDBSecurityGroupIngress": {
        "body": [
            "rds.CfnDBSecurityGroupIngress(self, \"${1:id}\", ",
            "        cIDRIP=${2:str},",
            "        dBSecurityGroupName=${3:str}, # Required",
            "        eC2SecurityGroupId=${4:str},",
            "        eC2SecurityGroupName=${5:str},",
            "        eC2SecurityGroupOwnerId=${6:str},",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBSecurityGroupIngress",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBSecurityGroupIngress"
        ],
        "prefix": "l1-rds-dbsecuritygroupingress",
        "scope": "python"
    },
    "rds.CfnDBSubnetGroup": {
        "body": [
            "rds.CfnDBSubnetGroup(self, \"${1:id}\", ",
            "        dBSubnetGroupDescription=${2:str}, # Required",
            "        dBSubnetGroupName=${3:str},",
            "        subnetIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnDBSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnDBSubnetGroup"
        ],
        "prefix": "l1-rds-dbsubnetgroup",
        "scope": "python"
    },
    "rds.CfnEventSubscription": {
        "body": [
            "rds.CfnEventSubscription(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        eventCategories=[],",
            "        snsTopicArn=${4:str}, # Required",
            "        sourceIds=[],",
            "        sourceType=${6:str},",
            "        subscriptionName=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnEventSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnEventSubscription"
        ],
        "prefix": "l1-rds-eventsubscription",
        "scope": "python"
    },
    "rds.CfnGlobalCluster": {
        "body": [
            "rds.CfnGlobalCluster(self, \"${1:id}\", ",
            "        deletionProtection=${2:bool},",
            "        engine=${3:str},",
            "        engineLifecycleSupport=${4:str},",
            "        engineVersion=${5:str},",
            "        globalClusterIdentifier=${6:str},",
            "        sourceDBClusterIdentifier=${7:str},",
            "        storageEncrypted=${8:bool},",
            ")"
        ],
        "description": [
            "Construct: rds.CfnGlobalCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnGlobalCluster"
        ],
        "prefix": "l1-rds-globalcluster",
        "scope": "python"
    },
    "rds.CfnIntegration": {
        "body": [
            "rds.CfnIntegration(self, \"${1:id}\", ",
            "        additionalEncryptionContext={",
            "        },",
            "        dataFilter=${3:str},",
            "        description=${4:str},",
            "        integrationName=${5:str},",
            "        kMSKeyId=${6:str},",
            "        sourceArn=${7:str}, # Required",
            "        tags=[],",
            "        targetArn=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: rds.CfnIntegration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnIntegration",
            "Attributes: ",
            "  attrIntegrationArn",
            "  attrCreateTime"
        ],
        "prefix": "l1-rds-integration",
        "scope": "python"
    },
    "rds.CfnOptionGroup": {
        "body": [
            "rds.CfnOptionGroup(self, \"${1:id}\", ",
            "        engineName=${2:str}, # Required",
            "        majorEngineVersion=${3:str}, # Required",
            "        optionConfigurations=[],",
            "        optionGroupDescription=${5:str}, # Required",
            "        optionGroupName=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rds.CfnOptionGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rds.CfnOptionGroup"
        ],
        "prefix": "l1-rds-optiongroup",
        "scope": "python"
    },
    "redshift.CfnCluster": {
        "body": [
            "redshift.CfnCluster(self, \"${1:id}\", ",
            "        allowVersionUpgrade=${2:bool},",
            "        aquaConfigurationStatus=${3:str},",
            "        automatedSnapshotRetentionPeriod=${4:int},",
            "        availabilityZone=${5:str},",
            "        availabilityZoneRelocation=${6:bool},",
            "        availabilityZoneRelocationStatus=${7:str},",
            "        classic=${8:bool},",
            "        clusterIdentifier=${9:str},",
            "        clusterParameterGroupName=${10:str},",
            "        clusterSecurityGroups=[],",
            "        clusterSubnetGroupName=${12:str},",
            "        clusterType=${13:str}, # Required",
            "        clusterVersion=${14:str},",
            "        dBName=${15:str}, # Required",
            "        deferMaintenance=${16:bool},",
            "        deferMaintenanceDuration=${17:int},",
            "        deferMaintenanceEndTime=${18:str},",
            "        deferMaintenanceStartTime=${19:str},",
            "        destinationRegion=${20:str},",
            "        elasticIp=${21:str},",
            "        encrypted=${22:bool},",
            "        endpoint={",
            "            address=${23:str},",
            "            port=${24:str},",
            "        },",
            "        enhancedVpcRouting=${24:bool},",
            "        hsmClientCertificateIdentifier=${25:str},",
            "        hsmConfigurationIdentifier=${26:str},",
            "        iamRoles=[],",
            "        kmsKeyId=${28:str},",
            "        loggingProperties={",
            "            bucketName=${29:str},",
            "            s3KeyPrefix=${30:str},",
            "        },",
            "        maintenanceTrackName=${30:str},",
            "        manageMasterPassword=${31:bool},",
            "        manualSnapshotRetentionPeriod=${32:int},",
            "        masterPasswordSecretKmsKeyId=${33:str},",
            "        masterUserPassword=${34:str},",
            "        masterUsername=${35:str}, # Required",
            "        multiAZ=${36:bool},",
            "        namespaceResourcePolicy=${37:dict},",
            "        nodeType=${38:str}, # Required",
            "        numberOfNodes=${39:int},",
            "        ownerAccount=${40:str},",
            "        port=${41:int},",
            "        preferredMaintenanceWindow=${42:str},",
            "        publiclyAccessible=${43:bool},",
            "        resourceAction=${44:str},",
            "        revisionTarget=${45:str},",
            "        rotateEncryptionKey=${46:bool},",
            "        snapshotClusterIdentifier=${47:str},",
            "        snapshotCopyGrantName=${48:str},",
            "        snapshotCopyManual=${49:bool},",
            "        snapshotCopyRetentionPeriod=${50:int},",
            "        snapshotIdentifier=${51:str},",
            "        tags=[],",
            "        vpcSecurityGroupIds=[],",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnCluster",
            "Attributes: ",
            "  attrMasterPasswordSecretArn",
            "  attrEndpoint.Address",
            "  attrEndpoint.Port",
            "  attrClusterNamespaceArn",
            "  attrDeferMaintenanceIdentifier"
        ],
        "prefix": "l1-redshift-cluster",
        "scope": "python"
    },
    "redshift.CfnClusterParameterGroup": {
        "body": [
            "redshift.CfnClusterParameterGroup(self, \"${1:id}\", ",
            "        description=${2:str}, # Required",
            "        parameterGroupFamily=${3:str}, # Required",
            "        parameterGroupName=${4:str},",
            "        parameters=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnClusterParameterGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnClusterParameterGroup"
        ],
        "prefix": "l1-redshift-clusterparametergroup",
        "scope": "python"
    },
    "redshift.CfnClusterSecurityGroup": {
        "body": [
            "redshift.CfnClusterSecurityGroup(self, \"${1:id}\", ",
            "        description=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnClusterSecurityGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnClusterSecurityGroup"
        ],
        "prefix": "l1-redshift-clustersecuritygroup",
        "scope": "python"
    },
    "redshift.CfnClusterSecurityGroupIngress": {
        "body": [
            "redshift.CfnClusterSecurityGroupIngress(self, \"${1:id}\", ",
            "        cIDRIP=${2:str},",
            "        clusterSecurityGroupName=${3:str}, # Required",
            "        eC2SecurityGroupName=${4:str},",
            "        eC2SecurityGroupOwnerId=${5:str},",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnClusterSecurityGroupIngress",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnClusterSecurityGroupIngress"
        ],
        "prefix": "l1-redshift-clustersecuritygroupingress",
        "scope": "python"
    },
    "redshift.CfnClusterSubnetGroup": {
        "body": [
            "redshift.CfnClusterSubnetGroup(self, \"${1:id}\", ",
            "        description=${2:str}, # Required",
            "        subnetIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnClusterSubnetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnClusterSubnetGroup",
            "Attributes: ",
            "  attrClusterSubnetGroupName"
        ],
        "prefix": "l1-redshift-clustersubnetgroup",
        "scope": "python"
    },
    "redshift.CfnEndpointAccess": {
        "body": [
            "redshift.CfnEndpointAccess(self, \"${1:id}\", ",
            "        clusterIdentifier=${2:str}, # Required",
            "        endpointName=${3:str}, # Required",
            "        resourceOwner=${4:str},",
            "        subnetGroupName=${5:str}, # Required",
            "        vpcSecurityGroupIds=[], # Required",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnEndpointAccess",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnEndpointAccess",
            "Attributes: ",
            "  attrEndpointStatus",
            "  attrVpcEndpoint",
            "  attrAddress",
            "  attrPort",
            "  attrEndpointCreateTime",
            "  attrVpcEndpoint.VpcId",
            "  attrVpcEndpoint.NetworkInterfaces",
            "  attrVpcSecurityGroups",
            "  attrVpcEndpoint.VpcEndpointId"
        ],
        "prefix": "l1-redshift-endpointaccess",
        "scope": "python"
    },
    "redshift.CfnEndpointAuthorization": {
        "body": [
            "redshift.CfnEndpointAuthorization(self, \"${1:id}\", ",
            "        account=${2:str}, # Required",
            "        clusterIdentifier=${3:str}, # Required",
            "        force=${4:bool},",
            "        vpcIds=[],",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnEndpointAuthorization",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnEndpointAuthorization",
            "Attributes: ",
            "  attrStatus",
            "  attrGrantee",
            "  attrGrantor",
            "  attrEndpointCount",
            "  attrAuthorizeTime",
            "  attrAllowedVPCs",
            "  attrAllowedAllVPCs",
            "  attrClusterStatus"
        ],
        "prefix": "l1-redshift-endpointauthorization",
        "scope": "python"
    },
    "redshift.CfnEventSubscription": {
        "body": [
            "redshift.CfnEventSubscription(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        eventCategories=[],",
            "        severity=${4:str},",
            "        snsTopicArn=${5:str},",
            "        sourceIds=[],",
            "        sourceType=${7:str},",
            "        subscriptionName=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnEventSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnEventSubscription",
            "Attributes: ",
            "  attrStatus",
            "  attrCustSubscriptionId",
            "  attrEventCategoriesList",
            "  attrSourceIdsList",
            "  attrSubscriptionCreationTime",
            "  attrCustomerAwsId"
        ],
        "prefix": "l1-redshift-eventsubscription",
        "scope": "python"
    },
    "redshift.CfnScheduledAction": {
        "body": [
            "redshift.CfnScheduledAction(self, \"${1:id}\", ",
            "        enable=${2:bool},",
            "        endTime=${3:str},",
            "        iamRole=${4:str},",
            "        schedule=${5:str},",
            "        scheduledActionDescription=${6:str},",
            "        scheduledActionName=${7:str}, # Required",
            "        startTime=${8:str},",
            "        targetAction={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: redshift.CfnScheduledAction",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.CfnScheduledAction",
            "Attributes: ",
            "  attrState",
            "  attrNextInvocations"
        ],
        "prefix": "l1-redshift-scheduledaction",
        "scope": "python"
    },
    "redshiftserverless.CfnNamespace": {
        "body": [
            "redshiftserverless.CfnNamespace(self, \"${1:id}\", ",
            "        adminPasswordSecretKmsKeyId=${2:str},",
            "        adminUserPassword=${3:str},",
            "        adminUsername=${4:str},",
            "        dbName=${5:str},",
            "        defaultIamRoleArn=${6:str},",
            "        finalSnapshotName=${7:str},",
            "        finalSnapshotRetentionPeriod=${8:int},",
            "        iamRoles=[],",
            "        kmsKeyId=${10:str},",
            "        logExports=[],",
            "        manageAdminPassword=${12:bool},",
            "        namespaceName=${13:str}, # Required",
            "        namespaceResourcePolicy=${14:dict},",
            "        redshiftIdcApplicationArn=${15:str},",
            "        snapshotCopyConfigurations=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: redshiftserverless.CfnNamespace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshiftserverless.CfnNamespace",
            "Attributes: ",
            "  attrNamespace.LogExports",
            "  attrNamespace.CreationDate",
            "  attrNamespace.Status",
            "  attrNamespace",
            "  attrNamespace.NamespaceName",
            "  attrNamespace.AdminPasswordSecretKmsKeyId",
            "  attrNamespace.AdminUsername",
            "  attrNamespace.KmsKeyId",
            "  attrNamespace.DbName",
            "  attrNamespace.IamRoles",
            "  attrNamespace.NamespaceArn",
            "  attrNamespace.NamespaceId",
            "  attrNamespace.DefaultIamRoleArn",
            "  attrNamespace.AdminPasswordSecretArn"
        ],
        "prefix": "l1-redshiftserverless-namespace",
        "scope": "python"
    },
    "redshiftserverless.CfnWorkgroup": {
        "body": [
            "redshiftserverless.CfnWorkgroup(self, \"${1:id}\", ",
            "        baseCapacity=${2:int},",
            "        configParameters=[],",
            "        enhancedVpcRouting=${4:bool},",
            "        maxCapacity=${5:int},",
            "        namespaceName=${6:str},",
            "        port=${7:int},",
            "        publiclyAccessible=${8:bool},",
            "        securityGroupIds=[],",
            "        subnetIds=[],",
            "        tags=[],",
            "        workgroupName=${12:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: redshiftserverless.CfnWorkgroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshiftserverless.CfnWorkgroup",
            "Attributes: ",
            "  attrWorkgroup.Endpoint",
            "  attrWorkgroup.Endpoint.Port",
            "  attrWorkgroup.SecurityGroupIds",
            "  attrWorkgroup.CreationDate",
            "  attrWorkgroup.PubliclyAccessible",
            "  attrWorkgroup",
            "  attrWorkgroup.WorkgroupArn",
            "  attrWorkgroup.WorkgroupName",
            "  attrWorkgroup.ConfigParameters",
            "  attrWorkgroup.Status",
            "  attrWorkgroup.MaxCapacity",
            "  attrWorkgroup.BaseCapacity",
            "  attrWorkgroup.EnhancedVpcRouting",
            "  attrWorkgroup.WorkgroupId",
            "  attrWorkgroup.NamespaceName",
            "  attrWorkgroup.Endpoint.VpcEndpoints",
            "  attrWorkgroup.Endpoint.Address",
            "  attrWorkgroup.SubnetIds"
        ],
        "prefix": "l1-redshiftserverless-workgroup",
        "scope": "python"
    },
    "refactorspaces.CfnApplication": {
        "body": [
            "refactorspaces.CfnApplication(self, \"${1:id}\", ",
            "        apiGatewayProxy={",
            "            endpointType=${2:str},",
            "            stageName=${3:str},",
            "        },",
            "        environmentIdentifier=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        proxyType=${5:str}, # Required",
            "        tags=[],",
            "        vpcId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: refactorspaces.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-refactorspaces.CfnApplication",
            "Attributes: ",
            "  attrNlbArn",
            "  attrProxyUrl",
            "  attrNlbName",
            "  attrStageName",
            "  attrApiGatewayId",
            "  attrVpcLinkId",
            "  attrApplicationIdentifier",
            "  attrArn"
        ],
        "prefix": "l1-refactorspaces-application",
        "scope": "python"
    },
    "refactorspaces.CfnEnvironment": {
        "body": [
            "refactorspaces.CfnEnvironment(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        networkFabricType=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: refactorspaces.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-refactorspaces.CfnEnvironment",
            "Attributes: ",
            "  attrTransitGatewayId",
            "  attrEnvironmentIdentifier",
            "  attrArn"
        ],
        "prefix": "l1-refactorspaces-environment",
        "scope": "python"
    },
    "refactorspaces.CfnRoute": {
        "body": [
            "refactorspaces.CfnRoute(self, \"${1:id}\", ",
            "        applicationIdentifier=${2:str}, # Required",
            "        defaultRoute={",
            "            activationState=${3:str},",
            "        },",
            "        environmentIdentifier=${4:str}, # Required",
            "        routeType=${5:str}, # Required",
            "        serviceIdentifier=${6:str}, # Required",
            "        tags=[],",
            "        uriPathRoute={",
            "            activationState=${8:str},",
            "            appendSourcePath=${9:bool},",
            "            includeChildPaths=${10:bool},",
            "            methods=[],",
            "            sourcePath=${12:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: refactorspaces.CfnRoute",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-refactorspaces.CfnRoute",
            "Attributes: ",
            "  attrRouteIdentifier",
            "  attrArn",
            "  attrPathResourceToId"
        ],
        "prefix": "l1-refactorspaces-route",
        "scope": "python"
    },
    "refactorspaces.CfnService": {
        "body": [
            "refactorspaces.CfnService(self, \"${1:id}\", ",
            "        applicationIdentifier=${2:str}, # Required",
            "        description=${3:str},",
            "        endpointType=${4:str}, # Required",
            "        environmentIdentifier=${5:str}, # Required",
            "        lambdaEndpoint={",
            "            arn=${6:str},",
            "        },",
            "        name=${7:str}, # Required",
            "        tags=[],",
            "        urlEndpoint={",
            "            healthUrl=${9:str},",
            "            url=${10:str},",
            "        },",
            "        vpcId=${10:str},",
            ")"
        ],
        "description": [
            "Construct: refactorspaces.CfnService",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-refactorspaces.CfnService",
            "Attributes: ",
            "  attrServiceIdentifier",
            "  attrArn"
        ],
        "prefix": "l1-refactorspaces-service",
        "scope": "python"
    },
    "rekognition.CfnCollection": {
        "body": [
            "rekognition.CfnCollection(self, \"${1:id}\", ",
            "        collectionId=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rekognition.CfnCollection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rekognition.CfnCollection",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-rekognition-collection",
        "scope": "python"
    },
    "rekognition.CfnProject": {
        "body": [
            "rekognition.CfnProject(self, \"${1:id}\", ",
            "        projectName=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: rekognition.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rekognition.CfnProject",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-rekognition-project",
        "scope": "python"
    },
    "rekognition.CfnStreamProcessor": {
        "body": [
            "rekognition.CfnStreamProcessor(self, \"${1:id}\", ",
            "        boundingBoxRegionsOfInterest=[],",
            "        connectedHomeSettings={",
            "            labels=[],",
            "            minConfidence=${4:float},",
            "        },",
            "        dataSharingPreference={",
            "            optIn=${4:bool},",
            "        },",
            "        faceSearchSettings={",
            "            collectionId=${5:str},",
            "            faceMatchThreshold=${6:float},",
            "        },",
            "        kinesisDataStream={",
            "            arn=${6:str},",
            "        },",
            "        kinesisVideoStream={",
            "            arn=${7:str},",
            "        },",
            "        kmsKeyId=${8:str},",
            "        name=${9:str},",
            "        notificationChannel={",
            "            arn=${10:str},",
            "        },",
            "        polygonRegionsOfInterest=${11:dict},",
            "        roleArn=${12:str}, # Required",
            "        s3Destination={",
            "            bucketName=${13:str},",
            "            objectKeyPrefix=${14:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rekognition.CfnStreamProcessor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rekognition.CfnStreamProcessor",
            "Attributes: ",
            "  attrStatus",
            "  attrArn",
            "  attrStatusMessage"
        ],
        "prefix": "l1-rekognition-streamprocessor",
        "scope": "python"
    },
    "resiliencehub.CfnApp": {
        "body": [
            "resiliencehub.CfnApp(self, \"${1:id}\", ",
            "        appAssessmentSchedule=${2:str},",
            "        appTemplateBody=${3:str}, # Required",
            "        description=${4:str},",
            "        eventSubscriptions=[],",
            "        name=${6:str}, # Required",
            "        permissionModel={",
            "            crossAccountRoleArns=[],",
            "            invokerRoleName=${8:str},",
            "            type=${9:str},",
            "        },",
            "        resiliencyPolicyArn=${8:str},",
            "        resourceMappings=[], # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: resiliencehub.CfnApp",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-resiliencehub.CfnApp",
            "Attributes: ",
            "  attrAppArn",
            "  attrDriftStatus"
        ],
        "prefix": "l1-resiliencehub-app",
        "scope": "python"
    },
    "resiliencehub.CfnResiliencyPolicy": {
        "body": [
            "resiliencehub.CfnResiliencyPolicy(self, \"${1:id}\", ",
            "        dataLocationConstraint=${2:str},",
            "        policy={",
            "        },",
            "        policyDescription=${4:str},",
            "        policyName=${5:str}, # Required",
            "        tags={",
            "        },",
            "        tier=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: resiliencehub.CfnResiliencyPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-resiliencehub.CfnResiliencyPolicy",
            "Attributes: ",
            "  attrPolicyArn"
        ],
        "prefix": "l1-resiliencehub-resiliencypolicy",
        "scope": "python"
    },
    "resourceexplorer2.CfnDefaultViewAssociation": {
        "body": [
            "resourceexplorer2.CfnDefaultViewAssociation(self, \"${1:id}\", ",
            "        viewArn=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: resourceexplorer2.CfnDefaultViewAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-resourceexplorer2.CfnDefaultViewAssociation",
            "Attributes: ",
            "  attrAssociatedAwsPrincipal"
        ],
        "prefix": "l1-resourceexplorer2-defaultviewassociation",
        "scope": "python"
    },
    "resourceexplorer2.CfnIndex": {
        "body": [
            "resourceexplorer2.CfnIndex(self, \"${1:id}\", ",
            "        tags={",
            "        },",
            "        type=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: resourceexplorer2.CfnIndex",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-resourceexplorer2.CfnIndex",
            "Attributes: ",
            "  attrArn",
            "  attrIndexState"
        ],
        "prefix": "l1-resourceexplorer2-index",
        "scope": "python"
    },
    "resourceexplorer2.CfnView": {
        "body": [
            "resourceexplorer2.CfnView(self, \"${1:id}\", ",
            "        filters={",
            "            filterString=${2:str},",
            "        },",
            "        includedProperties=[],",
            "        scope=${4:str},",
            "        tags={",
            "        },",
            "        viewName=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: resourceexplorer2.CfnView",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-resourceexplorer2.CfnView",
            "Attributes: ",
            "  attrViewArn"
        ],
        "prefix": "l1-resourceexplorer2-view",
        "scope": "python"
    },
    "resourcegroups.CfnGroup": {
        "body": [
            "resourcegroups.CfnGroup(self, \"${1:id}\", ",
            "        configuration=[],",
            "        description=${3:str},",
            "        name=${4:str}, # Required",
            "        resourceQuery={",
            "            type=${6:str},",
            "        },",
            "        resources=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: resourcegroups.CfnGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-resourcegroups.CfnGroup",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-resourcegroups-group",
        "scope": "python"
    },
    "robomaker.CfnFleet": {
        "body": [
            "robomaker.CfnFleet(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: robomaker.CfnFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-robomaker.CfnFleet",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-robomaker-fleet",
        "scope": "python"
    },
    "robomaker.CfnRobot": {
        "body": [
            "robomaker.CfnRobot(self, \"${1:id}\", ",
            "        architecture=${2:str}, # Required",
            "        fleet=${3:str},",
            "        greengrassGroupId=${4:str}, # Required",
            "        name=${5:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: robomaker.CfnRobot",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-robomaker.CfnRobot",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-robomaker-robot",
        "scope": "python"
    },
    "robomaker.CfnRobotApplication": {
        "body": [
            "robomaker.CfnRobotApplication(self, \"${1:id}\", ",
            "        currentRevisionId=${2:str},",
            "        environment=${3:str},",
            "        name=${4:str},",
            "        robotSoftwareSuite={",
            "            name=${5:str},",
            "            version=${6:str},",
            "        },",
            "        sources=[],",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: robomaker.CfnRobotApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-robomaker.CfnRobotApplication",
            "Attributes: ",
            "  attrCurrentRevisionId",
            "  attrArn"
        ],
        "prefix": "l1-robomaker-robotapplication",
        "scope": "python"
    },
    "robomaker.CfnRobotApplicationVersion": {
        "body": [
            "robomaker.CfnRobotApplicationVersion(self, \"${1:id}\", ",
            "        application=${2:str}, # Required",
            "        currentRevisionId=${3:str},",
            ")"
        ],
        "description": [
            "Construct: robomaker.CfnRobotApplicationVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-robomaker.CfnRobotApplicationVersion",
            "Attributes: ",
            "  attrApplicationVersion",
            "  attrArn"
        ],
        "prefix": "l1-robomaker-robotapplicationversion",
        "scope": "python"
    },
    "robomaker.CfnSimulationApplication": {
        "body": [
            "robomaker.CfnSimulationApplication(self, \"${1:id}\", ",
            "        currentRevisionId=${2:str},",
            "        environment=${3:str},",
            "        name=${4:str},",
            "        renderingEngine={",
            "            name=${5:str},",
            "            version=${6:str},",
            "        },",
            "        robotSoftwareSuite={",
            "            name=${6:str},",
            "            version=${7:str},",
            "        },",
            "        simulationSoftwareSuite={",
            "            name=${7:str},",
            "            version=${8:str},",
            "        },",
            "        sources=[],",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: robomaker.CfnSimulationApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-robomaker.CfnSimulationApplication",
            "Attributes: ",
            "  attrCurrentRevisionId",
            "  attrArn"
        ],
        "prefix": "l1-robomaker-simulationapplication",
        "scope": "python"
    },
    "robomaker.CfnSimulationApplicationVersion": {
        "body": [
            "robomaker.CfnSimulationApplicationVersion(self, \"${1:id}\", ",
            "        application=${2:str}, # Required",
            "        currentRevisionId=${3:str},",
            ")"
        ],
        "description": [
            "Construct: robomaker.CfnSimulationApplicationVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-robomaker.CfnSimulationApplicationVersion",
            "Attributes: ",
            "  attrApplicationVersion",
            "  attrArn"
        ],
        "prefix": "l1-robomaker-simulationapplicationversion",
        "scope": "python"
    },
    "rolesanywhere.CfnCRL": {
        "body": [
            "rolesanywhere.CfnCRL(self, \"${1:id}\", ",
            "        crlData=${2:str}, # Required",
            "        enabled=${3:bool},",
            "        name=${4:str}, # Required",
            "        tags=[],",
            "        trustAnchorArn=${6:str},",
            ")"
        ],
        "description": [
            "Construct: rolesanywhere.CfnCRL",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rolesanywhere.CfnCRL",
            "Attributes: ",
            "  attrCrlId"
        ],
        "prefix": "l1-rolesanywhere-crl",
        "scope": "python"
    },
    "rolesanywhere.CfnProfile": {
        "body": [
            "rolesanywhere.CfnProfile(self, \"${1:id}\", ",
            "        attributeMappings=[],",
            "        durationSeconds=${3:float},",
            "        enabled=${4:bool},",
            "        managedPolicyArns=[],",
            "        name=${6:str}, # Required",
            "        requireInstanceProperties=${7:bool},",
            "        roleArns=[], # Required",
            "        sessionPolicy=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rolesanywhere.CfnProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rolesanywhere.CfnProfile",
            "Attributes: ",
            "  attrProfileId",
            "  attrProfileArn"
        ],
        "prefix": "l1-rolesanywhere-profile",
        "scope": "python"
    },
    "rolesanywhere.CfnTrustAnchor": {
        "body": [
            "rolesanywhere.CfnTrustAnchor(self, \"${1:id}\", ",
            "        enabled=${2:bool},",
            "        name=${3:str}, # Required",
            "        notificationSettings=[],",
            "        source={",
            "            sourceType=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rolesanywhere.CfnTrustAnchor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rolesanywhere.CfnTrustAnchor",
            "Attributes: ",
            "  attrTrustAnchorArn",
            "  attrTrustAnchorId"
        ],
        "prefix": "l1-rolesanywhere-trustanchor",
        "scope": "python"
    },
    "route53.CfnCidrCollection": {
        "body": [
            "route53.CfnCidrCollection(self, \"${1:id}\", ",
            "        locations=[],",
            "        name=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: route53.CfnCidrCollection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53.CfnCidrCollection",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-route53-cidrcollection",
        "scope": "python"
    },
    "route53.CfnDNSSEC": {
        "body": [
            "route53.CfnDNSSEC(self, \"${1:id}\", ",
            "        hostedZoneId=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: route53.CfnDNSSEC",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53.CfnDNSSEC"
        ],
        "prefix": "l1-route53-dnssec",
        "scope": "python"
    },
    "route53.CfnHealthCheck": {
        "body": [
            "route53.CfnHealthCheck(self, \"${1:id}\", ",
            "        healthCheckConfig={",
            "            childHealthChecks=[],",
            "            enableSNI=${4:bool},",
            "            failureThreshold=${5:int},",
            "            fullyQualifiedDomainName=${6:str},",
            "            healthThreshold=${7:int},",
            "            iPAddress=${8:str},",
            "            insufficientDataHealthStatus=${9:str},",
            "            inverted=${10:bool},",
            "            measureLatency=${11:bool},",
            "            port=${12:int},",
            "            regions=[],",
            "            requestInterval=${14:int},",
            "            resourcePath=${15:str},",
            "            routingControlArn=${16:str},",
            "            searchString=${17:str},",
            "            type=${18:str},",
            "        },",
            "        healthCheckTags=[],",
            ")"
        ],
        "description": [
            "Construct: route53.CfnHealthCheck",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53.CfnHealthCheck",
            "Attributes: ",
            "  attrHealthCheckId"
        ],
        "prefix": "l1-route53-healthcheck",
        "scope": "python"
    },
    "route53.CfnHostedZone": {
        "body": [
            "route53.CfnHostedZone(self, \"${1:id}\", ",
            "        hostedZoneConfig={",
            "            comment=${2:str},",
            "        },",
            "        hostedZoneTags=[],",
            "        name=${4:str},",
            "        queryLoggingConfig={",
            "            cloudWatchLogsLogGroupArn=${5:str},",
            "        },",
            "        vPCs=[],",
            ")"
        ],
        "description": [
            "Construct: route53.CfnHostedZone",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53.CfnHostedZone",
            "Attributes: ",
            "  attrId",
            "  attrNameServers"
        ],
        "prefix": "l1-route53-hostedzone",
        "scope": "python"
    },
    "route53.CfnKeySigningKey": {
        "body": [
            "route53.CfnKeySigningKey(self, \"${1:id}\", ",
            "        hostedZoneId=${2:str}, # Required",
            "        keyManagementServiceArn=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        status=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: route53.CfnKeySigningKey",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53.CfnKeySigningKey"
        ],
        "prefix": "l1-route53-keysigningkey",
        "scope": "python"
    },
    "route53.CfnRecordSet": {
        "body": [
            "route53.CfnRecordSet(self, \"${1:id}\", ",
            "        aliasTarget={",
            "            dNSName=${2:str},",
            "            evaluateTargetHealth=${3:bool},",
            "            hostedZoneId=${4:str},",
            "        },",
            "        cidrRoutingConfig={",
            "            collectionId=${3:str},",
            "            locationName=${4:str},",
            "        },",
            "        comment=${4:str},",
            "        failover=${5:str},",
            "        geoLocation={",
            "            continentCode=${6:str},",
            "            countryCode=${7:str},",
            "            subdivisionCode=${8:str},",
            "        },",
            "        geoProximityLocation={",
            "            aWSRegion=${7:str},",
            "            bias=${8:int},",
            "            localZoneGroup=${10:str},",
            "        },",
            "        healthCheckId=${8:str},",
            "        hostedZoneId=${9:str},",
            "        hostedZoneName=${10:str},",
            "        multiValueAnswer=${11:bool},",
            "        name=${12:str}, # Required",
            "        region=${13:str},",
            "        resourceRecords=[],",
            "        setIdentifier=${15:str},",
            "        tTL=${16:str},",
            "        type=${17:str}, # Required",
            "        weight=${18:int},",
            ")"
        ],
        "description": [
            "Construct: route53.CfnRecordSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53.CfnRecordSet"
        ],
        "prefix": "l1-route53-recordset",
        "scope": "python"
    },
    "route53.CfnRecordSetGroup": {
        "body": [
            "route53.CfnRecordSetGroup(self, \"${1:id}\", ",
            "        comment=${2:str},",
            "        hostedZoneId=${3:str},",
            "        hostedZoneName=${4:str},",
            "        recordSets=[],",
            ")"
        ],
        "description": [
            "Construct: route53.CfnRecordSetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53.CfnRecordSetGroup"
        ],
        "prefix": "l1-route53-recordsetgroup",
        "scope": "python"
    },
    "route53profiles.CfnProfile": {
        "body": [
            "route53profiles.CfnProfile(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53profiles.CfnProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53profiles.CfnProfile",
            "Attributes: ",
            "  attrId",
            "  attrClientToken",
            "  attrArn"
        ],
        "prefix": "l1-route53profiles-profile",
        "scope": "python"
    },
    "route53profiles.CfnProfileAssociation": {
        "body": [
            "route53profiles.CfnProfileAssociation(self, \"${1:id}\", ",
            "        arn=${2:str},",
            "        name=${3:str}, # Required",
            "        profileId=${4:str}, # Required",
            "        resourceId=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53profiles.CfnProfileAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53profiles.CfnProfileAssociation",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-route53profiles-profileassociation",
        "scope": "python"
    },
    "route53profiles.CfnProfileResourceAssociation": {
        "body": [
            "route53profiles.CfnProfileResourceAssociation(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        profileId=${3:str}, # Required",
            "        resourceArn=${4:str}, # Required",
            "        resourceProperties=${5:str},",
            ")"
        ],
        "description": [
            "Construct: route53profiles.CfnProfileResourceAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53profiles.CfnProfileResourceAssociation",
            "Attributes: ",
            "  attrResourceType",
            "  attrId"
        ],
        "prefix": "l1-route53profiles-profileresourceassociation",
        "scope": "python"
    },
    "route53recoverycontrol.CfnCluster": {
        "body": [
            "route53recoverycontrol.CfnCluster(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53recoverycontrol.CfnCluster",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoverycontrol.CfnCluster",
            "Attributes: ",
            "  attrClusterArn",
            "  attrStatus",
            "  attrClusterEndpoints"
        ],
        "prefix": "l1-route53recoverycontrol-cluster",
        "scope": "python"
    },
    "route53recoverycontrol.CfnControlPanel": {
        "body": [
            "route53recoverycontrol.CfnControlPanel(self, \"${1:id}\", ",
            "        clusterArn=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53recoverycontrol.CfnControlPanel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoverycontrol.CfnControlPanel",
            "Attributes: ",
            "  attrStatus",
            "  attrControlPanelArn",
            "  attrDefaultControlPanel",
            "  attrRoutingControlCount"
        ],
        "prefix": "l1-route53recoverycontrol-controlpanel",
        "scope": "python"
    },
    "route53recoverycontrol.CfnRoutingControl": {
        "body": [
            "route53recoverycontrol.CfnRoutingControl(self, \"${1:id}\", ",
            "        clusterArn=${2:str},",
            "        controlPanelArn=${3:str},",
            "        name=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: route53recoverycontrol.CfnRoutingControl",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoverycontrol.CfnRoutingControl",
            "Attributes: ",
            "  attrStatus",
            "  attrRoutingControlArn"
        ],
        "prefix": "l1-route53recoverycontrol-routingcontrol",
        "scope": "python"
    },
    "route53recoverycontrol.CfnSafetyRule": {
        "body": [
            "route53recoverycontrol.CfnSafetyRule(self, \"${1:id}\", ",
            "        assertionRule={",
            "            assertedControls=[],",
            "            waitPeriodMs=${3:int},",
            "        },",
            "        controlPanelArn=${3:str}, # Required",
            "        gatingRule={",
            "            gatingControls=[],",
            "            targetControls=[],",
            "            waitPeriodMs=${6:int},",
            "        },",
            "        name=${5:str}, # Required",
            "        ruleConfig={",
            "            inverted=${6:bool},",
            "            threshold=${7:int},",
            "            type=${8:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53recoverycontrol.CfnSafetyRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoverycontrol.CfnSafetyRule",
            "Attributes: ",
            "  attrStatus",
            "  attrSafetyRuleArn"
        ],
        "prefix": "l1-route53recoverycontrol-safetyrule",
        "scope": "python"
    },
    "route53recoveryreadiness.CfnCell": {
        "body": [
            "route53recoveryreadiness.CfnCell(self, \"${1:id}\", ",
            "        cellName=${2:str},",
            "        cells=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53recoveryreadiness.CfnCell",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoveryreadiness.CfnCell",
            "Attributes: ",
            "  attrParentReadinessScopes",
            "  attrCellArn"
        ],
        "prefix": "l1-route53recoveryreadiness-cell",
        "scope": "python"
    },
    "route53recoveryreadiness.CfnReadinessCheck": {
        "body": [
            "route53recoveryreadiness.CfnReadinessCheck(self, \"${1:id}\", ",
            "        readinessCheckName=${2:str},",
            "        resourceSetName=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53recoveryreadiness.CfnReadinessCheck",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoveryreadiness.CfnReadinessCheck",
            "Attributes: ",
            "  attrReadinessCheckArn"
        ],
        "prefix": "l1-route53recoveryreadiness-readinesscheck",
        "scope": "python"
    },
    "route53recoveryreadiness.CfnRecoveryGroup": {
        "body": [
            "route53recoveryreadiness.CfnRecoveryGroup(self, \"${1:id}\", ",
            "        cells=[],",
            "        recoveryGroupName=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53recoveryreadiness.CfnRecoveryGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoveryreadiness.CfnRecoveryGroup",
            "Attributes: ",
            "  attrRecoveryGroupArn"
        ],
        "prefix": "l1-route53recoveryreadiness-recoverygroup",
        "scope": "python"
    },
    "route53recoveryreadiness.CfnResourceSet": {
        "body": [
            "route53recoveryreadiness.CfnResourceSet(self, \"${1:id}\", ",
            "        resourceSetName=${2:str},",
            "        resourceSetType=${3:str}, # Required",
            "        resources=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53recoveryreadiness.CfnResourceSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53recoveryreadiness.CfnResourceSet",
            "Attributes: ",
            "  attrResourceSetArn"
        ],
        "prefix": "l1-route53recoveryreadiness-resourceset",
        "scope": "python"
    },
    "route53resolver.CfnFirewallDomainList": {
        "body": [
            "route53resolver.CfnFirewallDomainList(self, \"${1:id}\", ",
            "        domainFileUrl=${2:str},",
            "        domains=[],",
            "        name=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnFirewallDomainList",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnFirewallDomainList",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationTime",
            "  attrManagedOwnerName",
            "  attrModificationTime",
            "  attrId",
            "  attrArn",
            "  attrCreatorRequestId",
            "  attrStatusMessage",
            "  attrDomainCount"
        ],
        "prefix": "l1-route53resolver-firewalldomainlist",
        "scope": "python"
    },
    "route53resolver.CfnFirewallRuleGroup": {
        "body": [
            "route53resolver.CfnFirewallRuleGroup(self, \"${1:id}\", ",
            "        firewallRules=[],",
            "        name=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnFirewallRuleGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnFirewallRuleGroup",
            "Attributes: ",
            "  attrRuleCount",
            "  attrStatus",
            "  attrOwnerId",
            "  attrCreationTime",
            "  attrShareStatus",
            "  attrModificationTime",
            "  attrId",
            "  attrArn",
            "  attrCreatorRequestId",
            "  attrStatusMessage"
        ],
        "prefix": "l1-route53resolver-firewallrulegroup",
        "scope": "python"
    },
    "route53resolver.CfnFirewallRuleGroupAssociation": {
        "body": [
            "route53resolver.CfnFirewallRuleGroupAssociation(self, \"${1:id}\", ",
            "        firewallRuleGroupId=${2:str}, # Required",
            "        mutationProtection=${3:str},",
            "        name=${4:str},",
            "        priority=${5:int}, # Required",
            "        tags=[],",
            "        vpcId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnFirewallRuleGroupAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnFirewallRuleGroupAssociation",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationTime",
            "  attrManagedOwnerName",
            "  attrModificationTime",
            "  attrId",
            "  attrArn",
            "  attrCreatorRequestId",
            "  attrStatusMessage"
        ],
        "prefix": "l1-route53resolver-firewallrulegroupassociation",
        "scope": "python"
    },
    "route53resolver.CfnOutpostResolver": {
        "body": [
            "route53resolver.CfnOutpostResolver(self, \"${1:id}\", ",
            "        instanceCount=${2:int},",
            "        name=${3:str}, # Required",
            "        outpostArn=${4:str}, # Required",
            "        preferredInstanceType=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnOutpostResolver",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnOutpostResolver",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationTime",
            "  attrModificationTime",
            "  attrId",
            "  attrArn",
            "  attrCreatorRequestId",
            "  attrStatusMessage"
        ],
        "prefix": "l1-route53resolver-outpostresolver",
        "scope": "python"
    },
    "route53resolver.CfnResolverConfig": {
        "body": [
            "route53resolver.CfnResolverConfig(self, \"${1:id}\", ",
            "        autodefinedReverseFlag=${2:str}, # Required",
            "        resourceId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnResolverConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnResolverConfig",
            "Attributes: ",
            "  attrOwnerId",
            "  attrAutodefinedReverse",
            "  attrId"
        ],
        "prefix": "l1-route53resolver-resolverconfig",
        "scope": "python"
    },
    "route53resolver.CfnResolverDNSSECConfig": {
        "body": [
            "route53resolver.CfnResolverDNSSECConfig(self, \"${1:id}\", ",
            "        resourceId=${2:str},",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnResolverDNSSECConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnResolverDNSSECConfig",
            "Attributes: ",
            "  attrValidationStatus",
            "  attrOwnerId",
            "  attrId"
        ],
        "prefix": "l1-route53resolver-resolverdnssecconfig",
        "scope": "python"
    },
    "route53resolver.CfnResolverEndpoint": {
        "body": [
            "route53resolver.CfnResolverEndpoint(self, \"${1:id}\", ",
            "        direction=${2:str}, # Required",
            "        ipAddresses=[], # Required",
            "        name=${4:str},",
            "        outpostArn=${5:str},",
            "        preferredInstanceType=${6:str},",
            "        protocols=[],",
            "        resolverEndpointType=${8:str},",
            "        securityGroupIds=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnResolverEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnResolverEndpoint",
            "Attributes: ",
            "  attrResolverEndpointId",
            "  attrIpAddressCount",
            "  attrOutpostArn",
            "  attrPreferredInstanceType",
            "  attrResolverEndpointType",
            "  attrArn",
            "  attrDirection",
            "  attrHostVPCId",
            "  attrName"
        ],
        "prefix": "l1-route53resolver-resolverendpoint",
        "scope": "python"
    },
    "route53resolver.CfnResolverQueryLoggingConfig": {
        "body": [
            "route53resolver.CfnResolverQueryLoggingConfig(self, \"${1:id}\", ",
            "        destinationArn=${2:str},",
            "        name=${3:str},",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnResolverQueryLoggingConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnResolverQueryLoggingConfig",
            "Attributes: ",
            "  attrStatus",
            "  attrOwnerId",
            "  attrAssociationCount",
            "  attrCreationTime",
            "  attrShareStatus",
            "  attrId",
            "  attrArn",
            "  attrCreatorRequestId"
        ],
        "prefix": "l1-route53resolver-resolverqueryloggingconfig",
        "scope": "python"
    },
    "route53resolver.CfnResolverQueryLoggingConfigAssociation": {
        "body": [
            "route53resolver.CfnResolverQueryLoggingConfigAssociation(self, \"${1:id}\", ",
            "        resolverQueryLogConfigId=${2:str},",
            "        resourceId=${3:str},",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnResolverQueryLoggingConfigAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnResolverQueryLoggingConfigAssociation",
            "Attributes: ",
            "  attrStatus",
            "  attrCreationTime",
            "  attrError",
            "  attrId",
            "  attrErrorMessage"
        ],
        "prefix": "l1-route53resolver-resolverqueryloggingconfigassociation",
        "scope": "python"
    },
    "route53resolver.CfnResolverRule": {
        "body": [
            "route53resolver.CfnResolverRule(self, \"${1:id}\", ",
            "        domainName=${2:str}, # Required",
            "        name=${3:str},",
            "        resolverEndpointId=${4:str},",
            "        ruleType=${5:str}, # Required",
            "        tags=[],",
            "        targetIps=[],",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnResolverRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnResolverRule",
            "Attributes: ",
            "  attrResolverEndpointId",
            "  attrDomainName",
            "  attrResolverRuleId",
            "  attrArn",
            "  attrTargetIps",
            "  attrName"
        ],
        "prefix": "l1-route53resolver-resolverrule",
        "scope": "python"
    },
    "route53resolver.CfnResolverRuleAssociation": {
        "body": [
            "route53resolver.CfnResolverRuleAssociation(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        resolverRuleId=${3:str}, # Required",
            "        vPCId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: route53resolver.CfnResolverRuleAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-route53resolver.CfnResolverRuleAssociation",
            "Attributes: ",
            "  attrVPCId",
            "  attrResolverRuleId",
            "  attrResolverRuleAssociationId",
            "  attrName"
        ],
        "prefix": "l1-route53resolver-resolverruleassociation",
        "scope": "python"
    },
    "rum.CfnAppMonitor": {
        "body": [
            "rum.CfnAppMonitor(self, \"${1:id}\", ",
            "        appMonitorConfiguration={",
            "            allowCookies=${2:bool},",
            "            enableXRay=${3:bool},",
            "            excludedPages=[],",
            "            favoritePages=[],",
            "            guestRoleArn=${6:str},",
            "            identityPoolId=${7:str},",
            "            includedPages=[],",
            "            metricDestinations=[],",
            "            sessionSampleRate=${10:float},",
            "            telemetries=[],",
            "        },",
            "        customEvents={",
            "            status=${3:str},",
            "        },",
            "        cwLogEnabled=${4:bool},",
            "        domain=${5:str}, # Required",
            "        name=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: rum.CfnAppMonitor",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-rum.CfnAppMonitor",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-rum-appmonitor",
        "scope": "python"
    },
    "s3.CfnAccessGrant": {
        "body": [
            "s3.CfnAccessGrant(self, \"${1:id}\", ",
            "        accessGrantsLocationConfiguration={",
            "            s3SubPrefix=${2:str},",
            "        },",
            "        accessGrantsLocationId=${3:str}, # Required",
            "        applicationArn=${4:str},",
            "        grantee={",
            "            granteeIdentifier=${5:str},",
            "            granteeType=${6:str},",
            "        },",
            "        permission=${6:str}, # Required",
            "        s3PrefixType=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: s3.CfnAccessGrant",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnAccessGrant",
            "Attributes: ",
            "  attrGrantScope",
            "  attrAccessGrantId",
            "  attrAccessGrantArn"
        ],
        "prefix": "l1-s3-accessgrant",
        "scope": "python"
    },
    "s3.CfnAccessGrantsInstance": {
        "body": [
            "s3.CfnAccessGrantsInstance(self, \"${1:id}\", ",
            "        identityCenterArn=${2:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: s3.CfnAccessGrantsInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnAccessGrantsInstance",
            "Attributes: ",
            "  attrAccessGrantsInstanceArn",
            "  attrAccessGrantsInstanceId"
        ],
        "prefix": "l1-s3-accessgrantsinstance",
        "scope": "python"
    },
    "s3.CfnAccessGrantsLocation": {
        "body": [
            "s3.CfnAccessGrantsLocation(self, \"${1:id}\", ",
            "        iamRoleArn=${2:str},",
            "        locationScope=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: s3.CfnAccessGrantsLocation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnAccessGrantsLocation",
            "Attributes: ",
            "  attrAccessGrantsLocationArn",
            "  attrAccessGrantsLocationId"
        ],
        "prefix": "l1-s3-accessgrantslocation",
        "scope": "python"
    },
    "s3.CfnAccessPoint": {
        "body": [
            "s3.CfnAccessPoint(self, \"${1:id}\", ",
            "        bucket=${2:str}, # Required",
            "        bucketAccountId=${3:str},",
            "        name=${4:str},",
            "        policy=${5:dict},",
            "        publicAccessBlockConfiguration={",
            "            blockPublicAcls=${6:bool},",
            "            blockPublicPolicy=${7:bool},",
            "            ignorePublicAcls=${8:bool},",
            "            restrictPublicBuckets=${9:bool},",
            "        },",
            "        vpcConfiguration={",
            "            vpcId=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: s3.CfnAccessPoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnAccessPoint",
            "Attributes: ",
            "  attrAlias",
            "  attrArn",
            "  attrNetworkOrigin",
            "  attrName"
        ],
        "prefix": "l1-s3-accesspoint",
        "scope": "python"
    },
    "s3.CfnBucket": {
        "body": [
            "s3.CfnBucket(self, \"${1:id}\", ",
            "        accelerateConfiguration={",
            "            accelerationStatus=${2:str},",
            "        },",
            "        accessControl=${3:str},",
            "        analyticsConfigurations=[],",
            "        bucketEncryption={",
            "            serverSideEncryptionConfiguration=[],",
            "        },",
            "        bucketName=${6:str},",
            "        corsConfiguration={",
            "            corsRules=[],",
            "        },",
            "        intelligentTieringConfigurations=[],",
            "        inventoryConfigurations=[],",
            "        lifecycleConfiguration={",
            "            rules=[],",
            "        },",
            "        loggingConfiguration={",
            "            destinationBucketName=${11:str},",
            "            logFilePrefix=${12:str},",
            "        },",
            "        metricsConfigurations=[],",
            "        notificationConfiguration={",
            "            lambdaConfigurations=[],",
            "            queueConfigurations=[],",
            "            topicConfigurations=[],",
            "        },",
            "        objectLockConfiguration={",
            "            objectLockEnabled=${14:str},",
            "        },",
            "        objectLockEnabled=${15:bool},",
            "        ownershipControls={",
            "            rules=[],",
            "        },",
            "        publicAccessBlockConfiguration={",
            "            blockPublicAcls=${17:bool},",
            "            blockPublicPolicy=${18:bool},",
            "            ignorePublicAcls=${19:bool},",
            "            restrictPublicBuckets=${20:bool},",
            "        },",
            "        replicationConfiguration={",
            "            role=${18:str},",
            "            rules=[],",
            "        },",
            "        tags=[],",
            "        versioningConfiguration={",
            "            status=${20:str},",
            "        },",
            "        websiteConfiguration={",
            "            errorDocument=${21:str},",
            "            indexDocument=${22:str},",
            "            routingRules=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: s3.CfnBucket",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnBucket",
            "Attributes: ",
            "  attrRegionalDomainName",
            "  attrDomainName",
            "  attrWebsiteURL",
            "  attrDualStackDomainName",
            "  attrArn"
        ],
        "prefix": "l1-s3-bucket",
        "scope": "python"
    },
    "s3.CfnBucketPolicy": {
        "body": [
            "s3.CfnBucketPolicy(self, \"${1:id}\", ",
            "        bucket=${2:str}, # Required",
            "        policyDocument=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: s3.CfnBucketPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnBucketPolicy"
        ],
        "prefix": "l1-s3-bucketpolicy",
        "scope": "python"
    },
    "s3.CfnMultiRegionAccessPoint": {
        "body": [
            "s3.CfnMultiRegionAccessPoint(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        publicAccessBlockConfiguration={",
            "            blockPublicAcls=${3:bool},",
            "            blockPublicPolicy=${4:bool},",
            "            ignorePublicAcls=${5:bool},",
            "            restrictPublicBuckets=${6:bool},",
            "        },",
            "        regions=[], # Required",
            ")"
        ],
        "description": [
            "Construct: s3.CfnMultiRegionAccessPoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnMultiRegionAccessPoint",
            "Attributes: ",
            "  attrAlias",
            "  attrCreatedAt"
        ],
        "prefix": "l1-s3-multiregionaccesspoint",
        "scope": "python"
    },
    "s3.CfnMultiRegionAccessPointPolicy": {
        "body": [
            "s3.CfnMultiRegionAccessPointPolicy(self, \"${1:id}\", ",
            "        mrapName=${2:str}, # Required",
            "        policy=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: s3.CfnMultiRegionAccessPointPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnMultiRegionAccessPointPolicy",
            "Attributes: ",
            "  attrPolicyStatus.IsPublic",
            "  attrPolicyStatus"
        ],
        "prefix": "l1-s3-multiregionaccesspointpolicy",
        "scope": "python"
    },
    "s3.CfnStorageLens": {
        "body": [
            "s3.CfnStorageLens(self, \"${1:id}\", ",
            "        storageLensConfiguration={",
            "            id=${6:str},",
            "            isEnabled=${8:bool},",
            "            storageLensArn=${9:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: s3.CfnStorageLens",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnStorageLens",
            "Attributes: ",
            "  attrStorageLensConfiguration.StorageLensArn"
        ],
        "prefix": "l1-s3-storagelens",
        "scope": "python"
    },
    "s3.CfnStorageLensGroup": {
        "body": [
            "s3.CfnStorageLensGroup(self, \"${1:id}\", ",
            "        filter={",
            "            matchAnyPrefix=[],",
            "            matchAnySuffix=[],",
            "            matchAnyTag=[],",
            "        },",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: s3.CfnStorageLensGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3.CfnStorageLensGroup",
            "Attributes: ",
            "  attrStorageLensGroupArn"
        ],
        "prefix": "l1-s3-storagelensgroup",
        "scope": "python"
    },
    "s3express.CfnBucketPolicy": {
        "body": [
            "s3express.CfnBucketPolicy(self, \"${1:id}\", ",
            "        bucket=${2:str}, # Required",
            "        policyDocument=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: s3express.CfnBucketPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3express.CfnBucketPolicy"
        ],
        "prefix": "l1-s3express-bucketpolicy",
        "scope": "python"
    },
    "s3express.CfnDirectoryBucket": {
        "body": [
            "s3express.CfnDirectoryBucket(self, \"${1:id}\", ",
            "        bucketName=${2:str},",
            "        dataRedundancy=${3:str}, # Required",
            "        locationName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: s3express.CfnDirectoryBucket",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3express.CfnDirectoryBucket",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-s3express-directorybucket",
        "scope": "python"
    },
    "s3objectlambda.CfnAccessPoint": {
        "body": [
            "s3objectlambda.CfnAccessPoint(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        objectLambdaConfiguration={",
            "            allowedFeatures=[],",
            "            cloudWatchMetricsEnabled=${4:bool},",
            "            supportingAccessPoint=${5:str},",
            "            transformationConfigurations=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: s3objectlambda.CfnAccessPoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3objectlambda.CfnAccessPoint",
            "Attributes: ",
            "  attrCreationDate",
            "  attrPublicAccessBlockConfiguration",
            "  attrPublicAccessBlockConfiguration.BlockPublicAcls",
            "  attrAlias",
            "  attrAlias.Value",
            "  attrPublicAccessBlockConfiguration.IgnorePublicAcls",
            "  attrPublicAccessBlockConfiguration.RestrictPublicBuckets",
            "  attrPublicAccessBlockConfiguration.BlockPublicPolicy",
            "  attrArn",
            "  attrAlias.Status"
        ],
        "prefix": "l1-s3objectlambda-accesspoint",
        "scope": "python"
    },
    "s3objectlambda.CfnAccessPointPolicy": {
        "body": [
            "s3objectlambda.CfnAccessPointPolicy(self, \"${1:id}\", ",
            "        objectLambdaAccessPoint=${2:str}, # Required",
            "        policyDocument=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: s3objectlambda.CfnAccessPointPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3objectlambda.CfnAccessPointPolicy"
        ],
        "prefix": "l1-s3objectlambda-accesspointpolicy",
        "scope": "python"
    },
    "s3outposts.CfnAccessPoint": {
        "body": [
            "s3outposts.CfnAccessPoint(self, \"${1:id}\", ",
            "        bucket=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        policy=${4:dict},",
            "        vpcConfiguration={",
            "            vpcId=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: s3outposts.CfnAccessPoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3outposts.CfnAccessPoint",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-s3outposts-accesspoint",
        "scope": "python"
    },
    "s3outposts.CfnBucket": {
        "body": [
            "s3outposts.CfnBucket(self, \"${1:id}\", ",
            "        bucketName=${2:str}, # Required",
            "        lifecycleConfiguration={",
            "            rules=[],",
            "        },",
            "        outpostId=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: s3outposts.CfnBucket",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3outposts.CfnBucket",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-s3outposts-bucket",
        "scope": "python"
    },
    "s3outposts.CfnBucketPolicy": {
        "body": [
            "s3outposts.CfnBucketPolicy(self, \"${1:id}\", ",
            "        bucket=${2:str}, # Required",
            "        policyDocument=${3:dict}, # Required",
            ")"
        ],
        "description": [
            "Construct: s3outposts.CfnBucketPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3outposts.CfnBucketPolicy"
        ],
        "prefix": "l1-s3outposts-bucketpolicy",
        "scope": "python"
    },
    "s3outposts.CfnEndpoint": {
        "body": [
            "s3outposts.CfnEndpoint(self, \"${1:id}\", ",
            "        accessType=${2:str},",
            "        customerOwnedIpv4Pool=${3:str},",
            "        failedReason={",
            "            errorCode=${4:str},",
            "            message=${5:str},",
            "        },",
            "        outpostId=${5:str}, # Required",
            "        securityGroupId=${6:str}, # Required",
            "        subnetId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: s3outposts.CfnEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-s3outposts.CfnEndpoint",
            "Attributes: ",
            "  attrStatus",
            "  attrNetworkInterfaces",
            "  attrCreationTime",
            "  attrCidrBlock",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-s3outposts-endpoint",
        "scope": "python"
    },
    "sagemaker.CfnApp": {
        "body": [
            "sagemaker.CfnApp(self, \"${1:id}\", ",
            "        appName=${2:str}, # Required",
            "        appType=${3:str}, # Required",
            "        domainId=${4:str}, # Required",
            "        resourceSpec={",
            "            instanceType=${5:str},",
            "            sageMakerImageArn=${6:str},",
            "            sageMakerImageVersionArn=${7:str},",
            "        },",
            "        tags=[],",
            "        userProfileName=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnApp",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnApp",
            "Attributes: ",
            "  attrAppArn"
        ],
        "prefix": "l1-sagemaker-app",
        "scope": "python"
    },
    "sagemaker.CfnAppImageConfig": {
        "body": [
            "sagemaker.CfnAppImageConfig(self, \"${1:id}\", ",
            "        appImageConfigName=${2:str}, # Required",
            "        codeEditorAppImageConfig={",
            "        },",
            "        jupyterLabAppImageConfig={",
            "        },",
            "        kernelGatewayImageConfig={",
            "            kernelSpecs=[],",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnAppImageConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnAppImageConfig",
            "Attributes: ",
            "  attrAppImageConfigArn"
        ],
        "prefix": "l1-sagemaker-appimageconfig",
        "scope": "python"
    },
    "sagemaker.CfnCodeRepository": {
        "body": [
            "sagemaker.CfnCodeRepository(self, \"${1:id}\", ",
            "        codeRepositoryName=${2:str},",
            "        gitConfig={",
            "            branch=${3:str},",
            "            repositoryUrl=${4:str},",
            "            secretArn=${5:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnCodeRepository",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnCodeRepository",
            "Attributes: ",
            "  attrCodeRepositoryName"
        ],
        "prefix": "l1-sagemaker-coderepository",
        "scope": "python"
    },
    "sagemaker.CfnDataQualityJobDefinition": {
        "body": [
            "sagemaker.CfnDataQualityJobDefinition(self, \"${1:id}\", ",
            "        dataQualityAppSpecification={",
            "            containerArguments=[],",
            "            containerEntrypoint=[],",
            "            imageUri=${5:str},",
            "            postAnalyticsProcessorSourceUri=${6:str},",
            "            recordPreprocessorSourceUri=${7:str},",
            "        },",
            "        dataQualityBaselineConfig={",
            "            baseliningJobName=${3:str},",
            "        },",
            "        dataQualityJobInput={",
            "        },",
            "        dataQualityJobOutputConfig={",
            "            kmsKeyId=${5:str},",
            "            monitoringOutputs=[],",
            "        },",
            "        endpointName=${6:str},",
            "        jobDefinitionName=${7:str},",
            "        jobResources={",
            "        },",
            "        networkConfig={",
            "            enableInterContainerTrafficEncryption=${9:bool},",
            "            enableNetworkIsolation=${10:bool},",
            "        },",
            "        roleArn=${10:str}, # Required",
            "        stoppingCondition={",
            "            maxRuntimeInSeconds=${11:int},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnDataQualityJobDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnDataQualityJobDefinition",
            "Attributes: ",
            "  attrJobDefinitionArn",
            "  attrCreationTime"
        ],
        "prefix": "l1-sagemaker-dataqualityjobdefinition",
        "scope": "python"
    },
    "sagemaker.CfnDevice": {
        "body": [
            "sagemaker.CfnDevice(self, \"${1:id}\", ",
            "        device={",
            "            description=${2:str},",
            "            deviceName=${3:str},",
            "            iotThingName=${4:str},",
            "        },",
            "        deviceFleetName=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnDevice",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnDevice"
        ],
        "prefix": "l1-sagemaker-device",
        "scope": "python"
    },
    "sagemaker.CfnDeviceFleet": {
        "body": [
            "sagemaker.CfnDeviceFleet(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        deviceFleetName=${3:str}, # Required",
            "        outputConfig={",
            "            kmsKeyId=${4:str},",
            "            s3OutputLocation=${5:str},",
            "        },",
            "        roleArn=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnDeviceFleet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnDeviceFleet"
        ],
        "prefix": "l1-sagemaker-devicefleet",
        "scope": "python"
    },
    "sagemaker.CfnDomain": {
        "body": [
            "sagemaker.CfnDomain(self, \"${1:id}\", ",
            "        appNetworkAccessType=${2:str},",
            "        appSecurityGroupManagement=${3:str},",
            "        authMode=${4:str}, # Required",
            "        defaultSpaceSettings={",
            "            customFileSystemConfigs=[],",
            "            executionRole=${7:str},",
            "            securityGroups=[],",
            "        },",
            "        defaultUserSettings={",
            "            customFileSystemConfigs=[],",
            "            defaultLandingUri=${9:str},",
            "            executionRole=${10:str},",
            "            securityGroups=[],",
            "            studioWebPortal=${19:str},",
            "        },",
            "        domainName=${7:str}, # Required",
            "        domainSettings={",
            "            securityGroupIds=[],",
            "        },",
            "        kmsKeyId=${9:str},",
            "        subnetIds=[], # Required",
            "        tags=[],",
            "        vpcId=${12:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnDomain",
            "Attributes: ",
            "  attrHomeEfsFileSystemId",
            "  attrDomainId",
            "  attrSecurityGroupIdForDomainBoundary",
            "  attrSingleSignOnManagedApplicationInstanceId",
            "  attrSingleSignOnApplicationArn",
            "  attrDomainArn",
            "  attrUrl"
        ],
        "prefix": "l1-sagemaker-domain",
        "scope": "python"
    },
    "sagemaker.CfnEndpoint": {
        "body": [
            "sagemaker.CfnEndpoint(self, \"${1:id}\", ",
            "        deploymentConfig={",
            "        },",
            "        endpointConfigName=${3:str}, # Required",
            "        endpointName=${4:str},",
            "        excludeRetainedVariantProperties=[],",
            "        retainAllVariantProperties=${6:bool},",
            "        retainDeploymentConfig=${7:bool},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnEndpoint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnEndpoint",
            "Attributes: ",
            "  attrEndpointName"
        ],
        "prefix": "l1-sagemaker-endpoint",
        "scope": "python"
    },
    "sagemaker.CfnEndpointConfig": {
        "body": [
            "sagemaker.CfnEndpointConfig(self, \"${1:id}\", ",
            "        asyncInferenceConfig={",
            "        },",
            "        dataCaptureConfig={",
            "            captureOptions=[],",
            "            destinationS3Uri=${5:str},",
            "            enableCapture=${6:bool},",
            "            initialSamplingPercentage=${7:int},",
            "            kmsKeyId=${8:str},",
            "        },",
            "        enableNetworkIsolation=${4:bool},",
            "        endpointConfigName=${5:str},",
            "        executionRoleArn=${6:str},",
            "        explainerConfig={",
            "        },",
            "        kmsKeyId=${8:str},",
            "        productionVariants=[], # Required",
            "        shadowProductionVariants=[],",
            "        tags=[],",
            "        vpcConfig={",
            "            securityGroupIds=[],",
            "            subnets=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnEndpointConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnEndpointConfig",
            "Attributes: ",
            "  attrEndpointConfigName"
        ],
        "prefix": "l1-sagemaker-endpointconfig",
        "scope": "python"
    },
    "sagemaker.CfnFeatureGroup": {
        "body": [
            "sagemaker.CfnFeatureGroup(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        eventTimeFeatureName=${3:str}, # Required",
            "        featureDefinitions=[], # Required",
            "        featureGroupName=${5:str}, # Required",
            "        offlineStoreConfig={",
            "            disableGlueTableCreation=${7:bool},",
            "            tableFormat=${9:str},",
            "        },",
            "        onlineStoreConfig={",
            "            enableOnlineStore=${7:bool},",
            "            storageType=${9:str},",
            "        },",
            "        recordIdentifierFeatureName=${8:str}, # Required",
            "        roleArn=${9:str},",
            "        tags=[],",
            "        throughputConfig={",
            "            provisionedReadCapacityUnits=${11:int},",
            "            provisionedWriteCapacityUnits=${12:int},",
            "            throughputMode=${13:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnFeatureGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnFeatureGroup",
            "Attributes: ",
            "  attrFeatureGroupStatus",
            "  attrCreationTime"
        ],
        "prefix": "l1-sagemaker-featuregroup",
        "scope": "python"
    },
    "sagemaker.CfnImage": {
        "body": [
            "sagemaker.CfnImage(self, \"${1:id}\", ",
            "        imageDescription=${2:str},",
            "        imageDisplayName=${3:str},",
            "        imageName=${4:str}, # Required",
            "        imageRoleArn=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnImage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnImage",
            "Attributes: ",
            "  attrImageArn"
        ],
        "prefix": "l1-sagemaker-image",
        "scope": "python"
    },
    "sagemaker.CfnImageVersion": {
        "body": [
            "sagemaker.CfnImageVersion(self, \"${1:id}\", ",
            "        alias=${2:str},",
            "        aliases=[],",
            "        baseImage=${4:str}, # Required",
            "        horovod=${5:bool},",
            "        imageName=${6:str}, # Required",
            "        jobType=${7:str},",
            "        mLFramework=${8:str},",
            "        processor=${9:str},",
            "        programmingLang=${10:str},",
            "        releaseNotes=${11:str},",
            "        vendorGuidance=${12:str},",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnImageVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnImageVersion",
            "Attributes: ",
            "  attrImageVersionArn",
            "  attrVersion",
            "  attrContainerImage",
            "  attrImageArn"
        ],
        "prefix": "l1-sagemaker-imageversion",
        "scope": "python"
    },
    "sagemaker.CfnInferenceComponent": {
        "body": [
            "sagemaker.CfnInferenceComponent(self, \"${1:id}\", ",
            "        endpointArn=${2:str},",
            "        endpointName=${3:str}, # Required",
            "        inferenceComponentName=${4:str},",
            "        runtimeConfig={",
            "            copyCount=${5:int},",
            "            currentCopyCount=${6:int},",
            "            desiredCopyCount=${7:int},",
            "        },",
            "        specification={",
            "            modelName=${8:str},",
            "        },",
            "        tags=[],",
            "        variantName=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnInferenceComponent",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnInferenceComponent",
            "Attributes: ",
            "  attrSpecification.Container.DeployedImage.ResolutionTime",
            "  attrFailureReason",
            "  attrInferenceComponentStatus",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrInferenceComponentArn",
            "  attrSpecification.Container.DeployedImage.ResolvedImage",
            "  attrRuntimeConfig.CurrentCopyCount",
            "  attrRuntimeConfig.DesiredCopyCount",
            "  attrSpecification.Container.DeployedImage",
            "  attrSpecification.Container.DeployedImage.SpecifiedImage"
        ],
        "prefix": "l1-sagemaker-inferencecomponent",
        "scope": "python"
    },
    "sagemaker.CfnInferenceExperiment": {
        "body": [
            "sagemaker.CfnInferenceExperiment(self, \"${1:id}\", ",
            "        dataStorageConfig={",
            "            destination=${3:str},",
            "            kmsKey=${4:str},",
            "        },",
            "        description=${3:str},",
            "        desiredState=${4:str},",
            "        endpointName=${5:str}, # Required",
            "        kmsKey=${6:str},",
            "        modelVariants=[], # Required",
            "        name=${8:str}, # Required",
            "        roleArn=${9:str}, # Required",
            "        schedule={",
            "            endTime=${10:str},",
            "            startTime=${11:str},",
            "        },",
            "        shadowModeConfig={",
            "            shadowModelVariants=[],",
            "            sourceModelVariantName=${12:str},",
            "        },",
            "        statusReason=${12:str},",
            "        tags=[],",
            "        type=${14:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnInferenceExperiment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnInferenceExperiment",
            "Attributes: ",
            "  attrStatus",
            "  attrEndpointMetadata.EndpointConfigName",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrEndpointMetadata.EndpointName",
            "  attrArn",
            "  attrEndpointMetadata.EndpointStatus",
            "  attrEndpointMetadata"
        ],
        "prefix": "l1-sagemaker-inferenceexperiment",
        "scope": "python"
    },
    "sagemaker.CfnModel": {
        "body": [
            "sagemaker.CfnModel(self, \"${1:id}\", ",
            "        containers=[],",
            "        enableNetworkIsolation=${3:bool},",
            "        executionRoleArn=${4:str},",
            "        inferenceExecutionConfig={",
            "            mode=${5:str},",
            "        },",
            "        modelName=${6:str},",
            "        primaryContainer={",
            "            containerHostname=${7:str},",
            "            environment=${8:dict},",
            "            image=${9:str},",
            "            inferenceSpecificationName=${11:str},",
            "            mode=${12:str},",
            "            modelDataUrl=${14:str},",
            "            modelPackageName=${15:str},",
            "        },",
            "        tags=[],",
            "        vpcConfig={",
            "            securityGroupIds=[],",
            "            subnets=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnModel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnModel",
            "Attributes: ",
            "  attrModelName"
        ],
        "prefix": "l1-sagemaker-model",
        "scope": "python"
    },
    "sagemaker.CfnModelBiasJobDefinition": {
        "body": [
            "sagemaker.CfnModelBiasJobDefinition(self, \"${1:id}\", ",
            "        endpointName=${2:str},",
            "        jobDefinitionName=${3:str},",
            "        jobResources={",
            "        },",
            "        modelBiasAppSpecification={",
            "            configUri=${5:str},",
            "            imageUri=${7:str},",
            "        },",
            "        modelBiasBaselineConfig={",
            "            baseliningJobName=${6:str},",
            "        },",
            "        modelBiasJobInput={",
            "        },",
            "        modelBiasJobOutputConfig={",
            "            kmsKeyId=${8:str},",
            "            monitoringOutputs=[],",
            "        },",
            "        networkConfig={",
            "            enableInterContainerTrafficEncryption=${9:bool},",
            "            enableNetworkIsolation=${10:bool},",
            "        },",
            "        roleArn=${10:str}, # Required",
            "        stoppingCondition={",
            "            maxRuntimeInSeconds=${11:int},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnModelBiasJobDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnModelBiasJobDefinition",
            "Attributes: ",
            "  attrJobDefinitionArn",
            "  attrCreationTime"
        ],
        "prefix": "l1-sagemaker-modelbiasjobdefinition",
        "scope": "python"
    },
    "sagemaker.CfnModelCard": {
        "body": [
            "sagemaker.CfnModelCard(self, \"${1:id}\", ",
            "        content={",
            "            evaluationDetails=[],",
            "        },",
            "        createdBy={",
            "            domainId=${3:str},",
            "            userProfileArn=${4:str},",
            "            userProfileName=${5:str},",
            "        },",
            "        lastModifiedBy={",
            "            domainId=${4:str},",
            "            userProfileArn=${5:str},",
            "            userProfileName=${6:str},",
            "        },",
            "        modelCardName=${5:str}, # Required",
            "        modelCardStatus=${6:str}, # Required",
            "        securityConfig={",
            "            kmsKeyId=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnModelCard",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnModelCard",
            "Attributes: ",
            "  attrLastModifiedBy.UserProfileArn",
            "  attrCreatedBy.DomainId",
            "  attrModelCardArn",
            "  attrCreatedBy.UserProfileName",
            "  attrCreationTime",
            "  attrLastModifiedTime",
            "  attrLastModifiedBy.DomainId",
            "  attrModelCardVersion",
            "  attrModelCardProcessingStatus",
            "  attrLastModifiedBy.UserProfileName",
            "  attrCreatedBy.UserProfileArn"
        ],
        "prefix": "l1-sagemaker-modelcard",
        "scope": "python"
    },
    "sagemaker.CfnModelExplainabilityJobDefinition": {
        "body": [
            "sagemaker.CfnModelExplainabilityJobDefinition(self, \"${1:id}\", ",
            "        endpointName=${2:str},",
            "        jobDefinitionName=${3:str},",
            "        jobResources={",
            "        },",
            "        modelExplainabilityAppSpecification={",
            "            configUri=${5:str},",
            "            imageUri=${7:str},",
            "        },",
            "        modelExplainabilityBaselineConfig={",
            "            baseliningJobName=${6:str},",
            "        },",
            "        modelExplainabilityJobInput={",
            "        },",
            "        modelExplainabilityJobOutputConfig={",
            "            kmsKeyId=${8:str},",
            "            monitoringOutputs=[],",
            "        },",
            "        networkConfig={",
            "            enableInterContainerTrafficEncryption=${9:bool},",
            "            enableNetworkIsolation=${10:bool},",
            "        },",
            "        roleArn=${10:str}, # Required",
            "        stoppingCondition={",
            "            maxRuntimeInSeconds=${11:int},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnModelExplainabilityJobDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnModelExplainabilityJobDefinition",
            "Attributes: ",
            "  attrJobDefinitionArn",
            "  attrCreationTime"
        ],
        "prefix": "l1-sagemaker-modelexplainabilityjobdefinition",
        "scope": "python"
    },
    "sagemaker.CfnModelPackage": {
        "body": [
            "sagemaker.CfnModelPackage(self, \"${1:id}\", ",
            "        additionalInferenceSpecifications=[],",
            "        additionalInferenceSpecificationsToAdd=[],",
            "        approvalDescription=${4:str},",
            "        certifyForMarketplace=${5:bool},",
            "        clientToken=${6:str},",
            "        customerMetadataProperties={",
            "        },",
            "        domain=${8:str},",
            "        driftCheckBaselines={",
            "        },",
            "        inferenceSpecification={",
            "            containers=[],",
            "            supportedContentTypes=[],",
            "            supportedRealtimeInferenceInstanceTypes=[],",
            "            supportedResponseMIMETypes=[],",
            "            supportedTransformInstanceTypes=[],",
            "        },",
            "        lastModifiedTime=${11:str},",
            "        metadataProperties={",
            "            commitId=${12:str},",
            "            generatedBy=${13:str},",
            "            projectId=${14:str},",
            "            repository=${15:str},",
            "        },",
            "        modelApprovalStatus=${13:str},",
            "        modelMetrics={",
            "        },",
            "        modelPackageDescription=${15:str},",
            "        modelPackageGroupName=${16:str},",
            "        modelPackageName=${17:str},",
            "        modelPackageStatusDetails={",
            "            validationStatuses=[],",
            "        },",
            "        modelPackageVersion=${19:int},",
            "        samplePayloadUrl=${20:str},",
            "        skipModelValidation=${21:str},",
            "        sourceAlgorithmSpecification={",
            "            sourceAlgorithms=[],",
            "        },",
            "        tags=[],",
            "        task=${24:str},",
            "        validationSpecification={",
            "            validationProfiles=[],",
            "            validationRole=${26:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnModelPackage",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnModelPackage",
            "Attributes: ",
            "  attrModelPackageStatus",
            "  attrCreationTime",
            "  attrModelPackageArn"
        ],
        "prefix": "l1-sagemaker-modelpackage",
        "scope": "python"
    },
    "sagemaker.CfnModelPackageGroup": {
        "body": [
            "sagemaker.CfnModelPackageGroup(self, \"${1:id}\", ",
            "        modelPackageGroupDescription=${2:str},",
            "        modelPackageGroupName=${3:str}, # Required",
            "        modelPackageGroupPolicy=${4:dict},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnModelPackageGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnModelPackageGroup",
            "Attributes: ",
            "  attrModelPackageGroupArn",
            "  attrCreationTime",
            "  attrModelPackageGroupStatus"
        ],
        "prefix": "l1-sagemaker-modelpackagegroup",
        "scope": "python"
    },
    "sagemaker.CfnModelQualityJobDefinition": {
        "body": [
            "sagemaker.CfnModelQualityJobDefinition(self, \"${1:id}\", ",
            "        endpointName=${2:str},",
            "        jobDefinitionName=${3:str},",
            "        jobResources={",
            "        },",
            "        modelQualityAppSpecification={",
            "            containerArguments=[],",
            "            containerEntrypoint=[],",
            "            imageUri=${8:str},",
            "            postAnalyticsProcessorSourceUri=${9:str},",
            "            problemType=${10:str},",
            "            recordPreprocessorSourceUri=${11:str},",
            "        },",
            "        modelQualityBaselineConfig={",
            "            baseliningJobName=${6:str},",
            "        },",
            "        modelQualityJobInput={",
            "        },",
            "        modelQualityJobOutputConfig={",
            "            kmsKeyId=${8:str},",
            "            monitoringOutputs=[],",
            "        },",
            "        networkConfig={",
            "            enableInterContainerTrafficEncryption=${9:bool},",
            "            enableNetworkIsolation=${10:bool},",
            "        },",
            "        roleArn=${10:str}, # Required",
            "        stoppingCondition={",
            "            maxRuntimeInSeconds=${11:int},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnModelQualityJobDefinition",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnModelQualityJobDefinition",
            "Attributes: ",
            "  attrJobDefinitionArn",
            "  attrCreationTime"
        ],
        "prefix": "l1-sagemaker-modelqualityjobdefinition",
        "scope": "python"
    },
    "sagemaker.CfnMonitoringSchedule": {
        "body": [
            "sagemaker.CfnMonitoringSchedule(self, \"${1:id}\", ",
            "        endpointName=${2:str},",
            "        failureReason=${3:str},",
            "        lastMonitoringExecutionSummary={",
            "            creationTime=${4:str},",
            "            endpointName=${5:str},",
            "            failureReason=${6:str},",
            "            lastModifiedTime=${7:str},",
            "            monitoringExecutionStatus=${8:str},",
            "            monitoringScheduleName=${9:str},",
            "            processingJobArn=${10:str},",
            "            scheduledTime=${11:str},",
            "        },",
            "        monitoringScheduleConfig={",
            "            monitoringJobDefinitionName=${6:str},",
            "            monitoringType=${7:str},",
            "        },",
            "        monitoringScheduleName=${6:str}, # Required",
            "        monitoringScheduleStatus=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnMonitoringSchedule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnMonitoringSchedule",
            "Attributes: ",
            "  attrMonitoringScheduleArn",
            "  attrCreationTime",
            "  attrLastModifiedTime"
        ],
        "prefix": "l1-sagemaker-monitoringschedule",
        "scope": "python"
    },
    "sagemaker.CfnNotebookInstance": {
        "body": [
            "sagemaker.CfnNotebookInstance(self, \"${1:id}\", ",
            "        acceleratorTypes=[],",
            "        additionalCodeRepositories=[],",
            "        defaultCodeRepository=${4:str},",
            "        directInternetAccess=${5:str},",
            "        instanceMetadataServiceConfiguration={",
            "            minimumInstanceMetadataServiceVersion=${6:str},",
            "        },",
            "        instanceType=${7:str}, # Required",
            "        kmsKeyId=${8:str},",
            "        lifecycleConfigName=${9:str},",
            "        notebookInstanceName=${10:str},",
            "        platformIdentifier=${11:str},",
            "        roleArn=${12:str}, # Required",
            "        rootAccess=${13:str},",
            "        securityGroupIds=[],",
            "        subnetId=${15:str},",
            "        tags=[],",
            "        volumeSizeInGB=${17:int},",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnNotebookInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnNotebookInstance",
            "Attributes: ",
            "  attrNotebookInstanceName"
        ],
        "prefix": "l1-sagemaker-notebookinstance",
        "scope": "python"
    },
    "sagemaker.CfnNotebookInstanceLifecycleConfig": {
        "body": [
            "sagemaker.CfnNotebookInstanceLifecycleConfig(self, \"${1:id}\", ",
            "        notebookInstanceLifecycleConfigName=${2:str},",
            "        onCreate=[],",
            "        onStart=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnNotebookInstanceLifecycleConfig",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnNotebookInstanceLifecycleConfig",
            "Attributes: ",
            "  attrNotebookInstanceLifecycleConfigName"
        ],
        "prefix": "l1-sagemaker-notebookinstancelifecycleconfig",
        "scope": "python"
    },
    "sagemaker.CfnPipeline": {
        "body": [
            "sagemaker.CfnPipeline(self, \"${1:id}\", ",
            "        parallelismConfiguration={",
            "            maxParallelExecutionSteps=${2:int},",
            "        },",
            "        pipelineDefinition={",
            "            pipelineDefinitionBody=${3:str},",
            "        },",
            "        pipelineDescription=${4:str},",
            "        pipelineDisplayName=${5:str},",
            "        pipelineName=${6:str}, # Required",
            "        roleArn=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnPipeline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnPipeline"
        ],
        "prefix": "l1-sagemaker-pipeline",
        "scope": "python"
    },
    "sagemaker.CfnProject": {
        "body": [
            "sagemaker.CfnProject(self, \"${1:id}\", ",
            "        projectDescription=${2:str},",
            "        projectName=${3:str}, # Required",
            "        serviceCatalogProvisionedProductDetails={",
            "            provisionedProductId=${4:str},",
            "            provisionedProductStatusMessage=${5:str},",
            "        },",
            "        serviceCatalogProvisioningDetails={",
            "            pathId=${5:str},",
            "            productId=${6:str},",
            "            provisioningArtifactId=${7:str},",
            "            provisioningParameters=[],",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnProject",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnProject",
            "Attributes: ",
            "  attrProjectArn",
            "  attrProjectStatus",
            "  attrProjectId",
            "  attrCreationTime"
        ],
        "prefix": "l1-sagemaker-project",
        "scope": "python"
    },
    "sagemaker.CfnSpace": {
        "body": [
            "sagemaker.CfnSpace(self, \"${1:id}\", ",
            "        domainId=${2:str}, # Required",
            "        ownershipSettings={",
            "            ownerUserProfileName=${3:str},",
            "        },",
            "        spaceDisplayName=${4:str},",
            "        spaceName=${5:str}, # Required",
            "        spaceSettings={",
            "            appType=${6:str},",
            "            customFileSystems=[],",
            "        },",
            "        spaceSharingSettings={",
            "            sharingType=${7:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnSpace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnSpace",
            "Attributes: ",
            "  attrSpaceArn",
            "  attrUrl"
        ],
        "prefix": "l1-sagemaker-space",
        "scope": "python"
    },
    "sagemaker.CfnUserProfile": {
        "body": [
            "sagemaker.CfnUserProfile(self, \"${1:id}\", ",
            "        domainId=${2:str}, # Required",
            "        singleSignOnUserIdentifier=${3:str},",
            "        singleSignOnUserValue=${4:str},",
            "        tags=[],",
            "        userProfileName=${6:str}, # Required",
            "        userSettings={",
            "            customFileSystemConfigs=[],",
            "            defaultLandingUri=${10:str},",
            "            executionRole=${11:str},",
            "            securityGroups=[],",
            "            studioWebPortal=${19:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnUserProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnUserProfile",
            "Attributes: ",
            "  attrUserProfileArn"
        ],
        "prefix": "l1-sagemaker-userprofile",
        "scope": "python"
    },
    "sagemaker.CfnWorkteam": {
        "body": [
            "sagemaker.CfnWorkteam(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        memberDefinitions=[],",
            "        notificationConfiguration={",
            "            notificationTopicArn=${4:str},",
            "        },",
            "        tags=[],",
            "        workforceName=${6:str},",
            "        workteamName=${7:str},",
            ")"
        ],
        "description": [
            "Construct: sagemaker.CfnWorkteam",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sagemaker.CfnWorkteam",
            "Attributes: ",
            "  attrWorkteamName"
        ],
        "prefix": "l1-sagemaker-workteam",
        "scope": "python"
    },
    "scheduler.CfnSchedule": {
        "body": [
            "scheduler.CfnSchedule(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        endDate=${3:str},",
            "        flexibleTimeWindow={",
            "            maximumWindowInMinutes=${4:float},",
            "            mode=${5:str},",
            "        },",
            "        groupName=${5:str},",
            "        kmsKeyArn=${6:str},",
            "        name=${7:str},",
            "        scheduleExpression=${8:str}, # Required",
            "        scheduleExpressionTimezone=${9:str},",
            "        startDate=${10:str},",
            "        state=${11:str},",
            "        target={",
            "            arn=${12:str},",
            "            input=${16:str},",
            "            roleArn=${19:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: scheduler.CfnSchedule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-scheduler.CfnSchedule",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-scheduler-schedule",
        "scope": "python"
    },
    "scheduler.CfnScheduleGroup": {
        "body": [
            "scheduler.CfnScheduleGroup(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: scheduler.CfnScheduleGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-scheduler.CfnScheduleGroup",
            "Attributes: ",
            "  attrCreationDate",
            "  attrState",
            "  attrLastModificationDate",
            "  attrArn"
        ],
        "prefix": "l1-scheduler-schedulegroup",
        "scope": "python"
    },
    "sdb.CfnDomain": {
        "body": [
            "sdb.CfnDomain(self, \"${1:id}\", ",
            "        description=${2:str},",
            ")"
        ],
        "description": [
            "Construct: sdb.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sdb.CfnDomain"
        ],
        "prefix": "l1-sdb-domain",
        "scope": "python"
    },
    "secretsmanager.CfnResourcePolicy": {
        "body": [
            "secretsmanager.CfnResourcePolicy(self, \"${1:id}\", ",
            "        blockPublicPolicy=${2:bool},",
            "        resourcePolicy=${3:dict}, # Required",
            "        secretId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: secretsmanager.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-secretsmanager.CfnResourcePolicy"
        ],
        "prefix": "l1-secretsmanager-resourcepolicy",
        "scope": "python"
    },
    "secretsmanager.CfnRotationSchedule": {
        "body": [
            "secretsmanager.CfnRotationSchedule(self, \"${1:id}\", ",
            "        hostedRotationLambda={",
            "            excludeCharacters=${2:str},",
            "            kmsKeyArn=${3:str},",
            "            masterSecretArn=${4:str},",
            "            masterSecretKmsKeyArn=${5:str},",
            "            rotationLambdaName=${6:str},",
            "            rotationType=${7:str},",
            "            runtime=${8:str},",
            "            superuserSecretArn=${9:str},",
            "            superuserSecretKmsKeyArn=${10:str},",
            "            vpcSecurityGroupIds=${11:str},",
            "            vpcSubnetIds=${12:str},",
            "        },",
            "        rotateImmediatelyOnUpdate=${3:bool},",
            "        rotationLambdaARN=${4:str},",
            "        rotationRules={",
            "            automaticallyAfterDays=${5:int},",
            "            duration=${6:str},",
            "            scheduleExpression=${7:str},",
            "        },",
            "        secretId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: secretsmanager.CfnRotationSchedule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-secretsmanager.CfnRotationSchedule"
        ],
        "prefix": "l1-secretsmanager-rotationschedule",
        "scope": "python"
    },
    "secretsmanager.CfnSecret": {
        "body": [
            "secretsmanager.CfnSecret(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        generateSecretString={",
            "            excludeCharacters=${3:str},",
            "            excludeLowercase=${4:bool},",
            "            excludeNumbers=${5:bool},",
            "            excludePunctuation=${6:bool},",
            "            excludeUppercase=${7:bool},",
            "            generateStringKey=${8:str},",
            "            includeSpace=${9:bool},",
            "            passwordLength=${10:int},",
            "            requireEachIncludedType=${11:bool},",
            "            secretStringTemplate=${12:str},",
            "        },",
            "        kmsKeyId=${4:str},",
            "        name=${5:str},",
            "        replicaRegions=[],",
            "        secretString=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: secretsmanager.CfnSecret",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-secretsmanager.CfnSecret",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-secretsmanager-secret",
        "scope": "python"
    },
    "secretsmanager.CfnSecretTargetAttachment": {
        "body": [
            "secretsmanager.CfnSecretTargetAttachment(self, \"${1:id}\", ",
            "        secretId=${2:str}, # Required",
            "        targetId=${3:str}, # Required",
            "        targetType=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: secretsmanager.CfnSecretTargetAttachment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-secretsmanager.CfnSecretTargetAttachment"
        ],
        "prefix": "l1-secretsmanager-secrettargetattachment",
        "scope": "python"
    },
    "securityhub.CfnAutomationRule": {
        "body": [
            "securityhub.CfnAutomationRule(self, \"${1:id}\", ",
            "        actions=[],",
            "        criteria={",
            "            awsAccountId=[],",
            "            companyName=[],",
            "            complianceAssociatedStandardsId=[],",
            "            complianceSecurityControlId=[],",
            "            complianceStatus=[],",
            "            confidence=[],",
            "            createdAt=[],",
            "            criticality=[],",
            "            description=[],",
            "            firstObservedAt=[],",
            "            generatorId=[],",
            "            id=[],",
            "            lastObservedAt=[],",
            "            noteText=[],",
            "            noteUpdatedAt=[],",
            "            noteUpdatedBy=[],",
            "            productArn=[],",
            "            productName=[],",
            "            recordState=[],",
            "            relatedFindingsId=[],",
            "            relatedFindingsProductArn=[],",
            "            resourceDetailsOther=[],",
            "            resourceId=[],",
            "            resourcePartition=[],",
            "            resourceRegion=[],",
            "            resourceTags=[],",
            "            resourceType=[],",
            "            severityLabel=[],",
            "            sourceUrl=[],",
            "            title=[],",
            "            type=[],",
            "            updatedAt=[],",
            "            userDefinedFields=[],",
            "            verificationState=[],",
            "            workflowStatus=[],",
            "        },",
            "        description=${4:str},",
            "        isTerminal=${5:bool},",
            "        ruleName=${6:str},",
            "        ruleOrder=${7:int},",
            "        ruleStatus=${8:str},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnAutomationRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnAutomationRule",
            "Attributes: ",
            "  attrCreatedBy",
            "  attrRuleArn",
            "  attrCreatedAt",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-securityhub-automationrule",
        "scope": "python"
    },
    "securityhub.CfnConfigurationPolicy": {
        "body": [
            "securityhub.CfnConfigurationPolicy(self, \"${1:id}\", ",
            "        configurationPolicy={",
            "        },",
            "        description=${3:str},",
            "        name=${4:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnConfigurationPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnConfigurationPolicy",
            "Attributes: ",
            "  attrCreatedAt",
            "  attrServiceEnabled",
            "  attrId",
            "  attrArn",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-securityhub-configurationpolicy",
        "scope": "python"
    },
    "securityhub.CfnDelegatedAdmin": {
        "body": [
            "securityhub.CfnDelegatedAdmin(self, \"${1:id}\", ",
            "        adminAccountId=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnDelegatedAdmin",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnDelegatedAdmin",
            "Attributes: ",
            "  attrStatus",
            "  attrDelegatedAdminIdentifier"
        ],
        "prefix": "l1-securityhub-delegatedadmin",
        "scope": "python"
    },
    "securityhub.CfnFindingAggregator": {
        "body": [
            "securityhub.CfnFindingAggregator(self, \"${1:id}\", ",
            "        regionLinkingMode=${2:str}, # Required",
            "        regions=[],",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnFindingAggregator",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnFindingAggregator",
            "Attributes: ",
            "  attrFindingAggregationRegion",
            "  attrFindingAggregatorArn"
        ],
        "prefix": "l1-securityhub-findingaggregator",
        "scope": "python"
    },
    "securityhub.CfnHub": {
        "body": [
            "securityhub.CfnHub(self, \"${1:id}\", ",
            "        autoEnableControls=${2:bool},",
            "        controlFindingGenerator=${3:str},",
            "        enableDefaultStandards=${4:bool},",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnHub",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnHub",
            "Attributes: ",
            "  attrSubscribedAt",
            "  attrARN"
        ],
        "prefix": "l1-securityhub-hub",
        "scope": "python"
    },
    "securityhub.CfnInsight": {
        "body": [
            "securityhub.CfnInsight(self, \"${1:id}\", ",
            "        filters={",
            "            awsAccountId=[],",
            "            awsAccountName=[],",
            "            companyName=[],",
            "            complianceAssociatedStandardsId=[],",
            "            complianceSecurityControlId=[],",
            "            complianceSecurityControlParametersName=[],",
            "            complianceSecurityControlParametersValue=[],",
            "            complianceStatus=[],",
            "            confidence=[],",
            "            createdAt=[],",
            "            criticality=[],",
            "            description=[],",
            "            findingProviderFieldsConfidence=[],",
            "            findingProviderFieldsCriticality=[],",
            "            findingProviderFieldsRelatedFindingsId=[],",
            "            findingProviderFieldsRelatedFindingsProductArn=[],",
            "            findingProviderFieldsSeverityLabel=[],",
            "            findingProviderFieldsSeverityOriginal=[],",
            "            findingProviderFieldsTypes=[],",
            "            firstObservedAt=[],",
            "            generatorId=[],",
            "            id=[],",
            "            lastObservedAt=[],",
            "            malwareName=[],",
            "            malwarePath=[],",
            "            malwareState=[],",
            "            malwareType=[],",
            "            networkDestinationDomain=[],",
            "            networkDestinationIpV4=[],",
            "            networkDestinationIpV6=[],",
            "            networkDestinationPort=[],",
            "            networkDirection=[],",
            "            networkProtocol=[],",
            "            networkSourceDomain=[],",
            "            networkSourceIpV4=[],",
            "            networkSourceIpV6=[],",
            "            networkSourceMac=[],",
            "            networkSourcePort=[],",
            "            noteText=[],",
            "            noteUpdatedAt=[],",
            "            noteUpdatedBy=[],",
            "            processLaunchedAt=[],",
            "            processName=[],",
            "            processParentPid=[],",
            "            processPath=[],",
            "            processPid=[],",
            "            processTerminatedAt=[],",
            "            productArn=[],",
            "            productFields=[],",
            "            productName=[],",
            "            recommendationText=[],",
            "            recordState=[],",
            "            region=[],",
            "            relatedFindingsId=[],",
            "            relatedFindingsProductArn=[],",
            "            resourceApplicationArn=[],",
            "            resourceApplicationName=[],",
            "            resourceAwsEc2InstanceIamInstanceProfileArn=[],",
            "            resourceAwsEc2InstanceImageId=[],",
            "            resourceAwsEc2InstanceIpV4Addresses=[],",
            "            resourceAwsEc2InstanceIpV6Addresses=[],",
            "            resourceAwsEc2InstanceKeyName=[],",
            "            resourceAwsEc2InstanceLaunchedAt=[],",
            "            resourceAwsEc2InstanceSubnetId=[],",
            "            resourceAwsEc2InstanceType=[],",
            "            resourceAwsEc2InstanceVpcId=[],",
            "            resourceAwsIamAccessKeyCreatedAt=[],",
            "            resourceAwsIamAccessKeyPrincipalName=[],",
            "            resourceAwsIamAccessKeyStatus=[],",
            "            resourceAwsIamUserUserName=[],",
            "            resourceAwsS3BucketOwnerId=[],",
            "            resourceAwsS3BucketOwnerName=[],",
            "            resourceContainerImageId=[],",
            "            resourceContainerImageName=[],",
            "            resourceContainerLaunchedAt=[],",
            "            resourceContainerName=[],",
            "            resourceDetailsOther=[],",
            "            resourceId=[],",
            "            resourcePartition=[],",
            "            resourceRegion=[],",
            "            resourceTags=[],",
            "            resourceType=[],",
            "            sample=[],",
            "            severityLabel=[],",
            "            sourceUrl=[],",
            "            threatIntelIndicatorCategory=[],",
            "            threatIntelIndicatorLastObservedAt=[],",
            "            threatIntelIndicatorSource=[],",
            "            threatIntelIndicatorSourceUrl=[],",
            "            threatIntelIndicatorType=[],",
            "            threatIntelIndicatorValue=[],",
            "            title=[],",
            "            type=[],",
            "            updatedAt=[],",
            "            userDefinedFields=[],",
            "            verificationState=[],",
            "            vulnerabilitiesExploitAvailable=[],",
            "            vulnerabilitiesFixAvailable=[],",
            "            workflowState=[],",
            "            workflowStatus=[],",
            "        },",
            "        groupByAttribute=${3:str}, # Required",
            "        name=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnInsight",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnInsight",
            "Attributes: ",
            "  attrInsightArn"
        ],
        "prefix": "l1-securityhub-insight",
        "scope": "python"
    },
    "securityhub.CfnOrganizationConfiguration": {
        "body": [
            "securityhub.CfnOrganizationConfiguration(self, \"${1:id}\", ",
            "        autoEnable=${2:bool}, # Required",
            "        autoEnableStandards=${3:str},",
            "        configurationType=${4:str},",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnOrganizationConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnOrganizationConfiguration",
            "Attributes: ",
            "  attrStatus",
            "  attrOrganizationConfigurationIdentifier",
            "  attrMemberAccountLimitReached",
            "  attrStatusMessage"
        ],
        "prefix": "l1-securityhub-organizationconfiguration",
        "scope": "python"
    },
    "securityhub.CfnPolicyAssociation": {
        "body": [
            "securityhub.CfnPolicyAssociation(self, \"${1:id}\", ",
            "        configurationPolicyId=${2:str}, # Required",
            "        targetId=${3:str}, # Required",
            "        targetType=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnPolicyAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnPolicyAssociation",
            "Attributes: ",
            "  attrAssociationStatusMessage",
            "  attrAssociationType",
            "  attrAssociationIdentifier",
            "  attrAssociationStatus",
            "  attrUpdatedAt"
        ],
        "prefix": "l1-securityhub-policyassociation",
        "scope": "python"
    },
    "securityhub.CfnProductSubscription": {
        "body": [
            "securityhub.CfnProductSubscription(self, \"${1:id}\", ",
            "        productArn=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnProductSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnProductSubscription",
            "Attributes: ",
            "  attrProductSubscriptionArn"
        ],
        "prefix": "l1-securityhub-productsubscription",
        "scope": "python"
    },
    "securityhub.CfnSecurityControl": {
        "body": [
            "securityhub.CfnSecurityControl(self, \"${1:id}\", ",
            "        lastUpdateReason=${2:str},",
            "        parameters={",
            "        },",
            "        securityControlArn=${4:str},",
            "        securityControlId=${5:str},",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnSecurityControl",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnSecurityControl"
        ],
        "prefix": "l1-securityhub-securitycontrol",
        "scope": "python"
    },
    "securityhub.CfnStandard": {
        "body": [
            "securityhub.CfnStandard(self, \"${1:id}\", ",
            "        disabledStandardsControls=[],",
            "        standardsArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: securityhub.CfnStandard",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securityhub.CfnStandard",
            "Attributes: ",
            "  attrStandardsSubscriptionArn"
        ],
        "prefix": "l1-securityhub-standard",
        "scope": "python"
    },
    "securitylake.CfnAwsLogSource": {
        "body": [
            "securitylake.CfnAwsLogSource(self, \"${1:id}\", ",
            "        accounts=[],",
            "        dataLakeArn=${3:str}, # Required",
            "        sourceName=${4:str}, # Required",
            "        sourceVersion=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: securitylake.CfnAwsLogSource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securitylake.CfnAwsLogSource"
        ],
        "prefix": "l1-securitylake-awslogsource",
        "scope": "python"
    },
    "securitylake.CfnDataLake": {
        "body": [
            "securitylake.CfnDataLake(self, \"${1:id}\", ",
            "        encryptionConfiguration={",
            "            kmsKeyId=${2:str},",
            "        },",
            "        lifecycleConfiguration={",
            "            transitions=[],",
            "        },",
            "        metaStoreManagerRoleArn=${4:str},",
            "        replicationConfiguration={",
            "            regions=[],",
            "            roleArn=${6:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: securitylake.CfnDataLake",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securitylake.CfnDataLake",
            "Attributes: ",
            "  attrS3BucketArn",
            "  attrArn"
        ],
        "prefix": "l1-securitylake-datalake",
        "scope": "python"
    },
    "securitylake.CfnSubscriber": {
        "body": [
            "securitylake.CfnSubscriber(self, \"${1:id}\", ",
            "        accessTypes=[], # Required",
            "        dataLakeArn=${3:str}, # Required",
            "        sources=[], # Required",
            "        subscriberDescription=${5:str},",
            "        subscriberIdentity={",
            "            externalId=${6:str},",
            "            principal=${7:str},",
            "        },",
            "        subscriberName=${7:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: securitylake.CfnSubscriber",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securitylake.CfnSubscriber",
            "Attributes: ",
            "  attrResourceShareName",
            "  attrSubscriberRoleArn",
            "  attrResourceShareArn",
            "  attrSubscriberArn",
            "  attrS3BucketArn"
        ],
        "prefix": "l1-securitylake-subscriber",
        "scope": "python"
    },
    "securitylake.CfnSubscriberNotification": {
        "body": [
            "securitylake.CfnSubscriberNotification(self, \"${1:id}\", ",
            "        notificationConfiguration={",
            "            sqsNotificationConfiguration=${3:dict},",
            "        },",
            "        subscriberArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: securitylake.CfnSubscriberNotification",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-securitylake.CfnSubscriberNotification",
            "Attributes: ",
            "  attrSubscriberEndpoint"
        ],
        "prefix": "l1-securitylake-subscribernotification",
        "scope": "python"
    },
    "servicecatalog.CfnAcceptedPortfolioShare": {
        "body": [
            "servicecatalog.CfnAcceptedPortfolioShare(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        portfolioId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnAcceptedPortfolioShare",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnAcceptedPortfolioShare"
        ],
        "prefix": "l1-servicecatalog-acceptedportfolioshare",
        "scope": "python"
    },
    "servicecatalog.CfnCloudFormationProduct": {
        "body": [
            "servicecatalog.CfnCloudFormationProduct(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        description=${3:str},",
            "        distributor=${4:str},",
            "        name=${5:str}, # Required",
            "        owner=${6:str}, # Required",
            "        productType=${7:str},",
            "        provisioningArtifactParameters=[],",
            "        replaceProvisioningArtifacts=${9:bool},",
            "        sourceConnection={",
            "            type=${11:str},",
            "        },",
            "        supportDescription=${11:str},",
            "        supportEmail=${12:str},",
            "        supportUrl=${13:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnCloudFormationProduct",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnCloudFormationProduct",
            "Attributes: ",
            "  attrProductName",
            "  attrProvisioningArtifactIds",
            "  attrProvisioningArtifactNames"
        ],
        "prefix": "l1-servicecatalog-cloudformationproduct",
        "scope": "python"
    },
    "servicecatalog.CfnCloudFormationProvisionedProduct": {
        "body": [
            "servicecatalog.CfnCloudFormationProvisionedProduct(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        notificationArns=[],",
            "        pathId=${4:str},",
            "        pathName=${5:str},",
            "        productId=${6:str},",
            "        productName=${7:str},",
            "        provisionedProductName=${8:str},",
            "        provisioningArtifactId=${9:str},",
            "        provisioningArtifactName=${10:str},",
            "        provisioningParameters=[],",
            "        provisioningPreferences={",
            "            stackSetAccounts=[],",
            "            stackSetFailureToleranceCount=${13:int},",
            "            stackSetFailureTolerancePercentage=${14:int},",
            "            stackSetMaxConcurrencyCount=${15:int},",
            "            stackSetMaxConcurrencyPercentage=${16:int},",
            "            stackSetOperationType=${17:str},",
            "            stackSetRegions=[],",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnCloudFormationProvisionedProduct",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnCloudFormationProvisionedProduct",
            "Attributes: ",
            "  attrCloudformationStackArn",
            "  attrOutputs",
            "  attrProvisionedProductId",
            "  attrRecordId"
        ],
        "prefix": "l1-servicecatalog-cloudformationprovisionedproduct",
        "scope": "python"
    },
    "servicecatalog.CfnLaunchNotificationConstraint": {
        "body": [
            "servicecatalog.CfnLaunchNotificationConstraint(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        description=${3:str},",
            "        notificationArns=[], # Required",
            "        portfolioId=${5:str}, # Required",
            "        productId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnLaunchNotificationConstraint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnLaunchNotificationConstraint"
        ],
        "prefix": "l1-servicecatalog-launchnotificationconstraint",
        "scope": "python"
    },
    "servicecatalog.CfnLaunchRoleConstraint": {
        "body": [
            "servicecatalog.CfnLaunchRoleConstraint(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        description=${3:str},",
            "        localRoleName=${4:str},",
            "        portfolioId=${5:str}, # Required",
            "        productId=${6:str}, # Required",
            "        roleArn=${7:str},",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnLaunchRoleConstraint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnLaunchRoleConstraint"
        ],
        "prefix": "l1-servicecatalog-launchroleconstraint",
        "scope": "python"
    },
    "servicecatalog.CfnLaunchTemplateConstraint": {
        "body": [
            "servicecatalog.CfnLaunchTemplateConstraint(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        description=${3:str},",
            "        portfolioId=${4:str}, # Required",
            "        productId=${5:str}, # Required",
            "        rules=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnLaunchTemplateConstraint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnLaunchTemplateConstraint"
        ],
        "prefix": "l1-servicecatalog-launchtemplateconstraint",
        "scope": "python"
    },
    "servicecatalog.CfnPortfolio": {
        "body": [
            "servicecatalog.CfnPortfolio(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        description=${3:str},",
            "        displayName=${4:str}, # Required",
            "        providerName=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnPortfolio",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnPortfolio",
            "Attributes: ",
            "  attrPortfolioName"
        ],
        "prefix": "l1-servicecatalog-portfolio",
        "scope": "python"
    },
    "servicecatalog.CfnPortfolioPrincipalAssociation": {
        "body": [
            "servicecatalog.CfnPortfolioPrincipalAssociation(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        portfolioId=${3:str}, # Required",
            "        principalARN=${4:str}, # Required",
            "        principalType=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnPortfolioPrincipalAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnPortfolioPrincipalAssociation"
        ],
        "prefix": "l1-servicecatalog-portfolioprincipalassociation",
        "scope": "python"
    },
    "servicecatalog.CfnPortfolioProductAssociation": {
        "body": [
            "servicecatalog.CfnPortfolioProductAssociation(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        portfolioId=${3:str}, # Required",
            "        productId=${4:str}, # Required",
            "        sourcePortfolioId=${5:str},",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnPortfolioProductAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnPortfolioProductAssociation"
        ],
        "prefix": "l1-servicecatalog-portfolioproductassociation",
        "scope": "python"
    },
    "servicecatalog.CfnPortfolioShare": {
        "body": [
            "servicecatalog.CfnPortfolioShare(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        accountId=${3:str}, # Required",
            "        portfolioId=${4:str}, # Required",
            "        shareTagOptions=${5:bool},",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnPortfolioShare",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnPortfolioShare"
        ],
        "prefix": "l1-servicecatalog-portfolioshare",
        "scope": "python"
    },
    "servicecatalog.CfnResourceUpdateConstraint": {
        "body": [
            "servicecatalog.CfnResourceUpdateConstraint(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        description=${3:str},",
            "        portfolioId=${4:str}, # Required",
            "        productId=${5:str}, # Required",
            "        tagUpdateOnProvisionedProduct=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnResourceUpdateConstraint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnResourceUpdateConstraint"
        ],
        "prefix": "l1-servicecatalog-resourceupdateconstraint",
        "scope": "python"
    },
    "servicecatalog.CfnServiceAction": {
        "body": [
            "servicecatalog.CfnServiceAction(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        definition=[], # Required",
            "        definitionType=${4:str}, # Required",
            "        description=${5:str},",
            "        name=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnServiceAction",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnServiceAction",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-servicecatalog-serviceaction",
        "scope": "python"
    },
    "servicecatalog.CfnServiceActionAssociation": {
        "body": [
            "servicecatalog.CfnServiceActionAssociation(self, \"${1:id}\", ",
            "        productId=${2:str}, # Required",
            "        provisioningArtifactId=${3:str}, # Required",
            "        serviceActionId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnServiceActionAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnServiceActionAssociation"
        ],
        "prefix": "l1-servicecatalog-serviceactionassociation",
        "scope": "python"
    },
    "servicecatalog.CfnStackSetConstraint": {
        "body": [
            "servicecatalog.CfnStackSetConstraint(self, \"${1:id}\", ",
            "        acceptLanguage=${2:str},",
            "        accountList=[], # Required",
            "        adminRole=${4:str}, # Required",
            "        description=${5:str}, # Required",
            "        executionRole=${6:str}, # Required",
            "        portfolioId=${7:str}, # Required",
            "        productId=${8:str}, # Required",
            "        regionList=[], # Required",
            "        stackInstanceControl=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnStackSetConstraint",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnStackSetConstraint"
        ],
        "prefix": "l1-servicecatalog-stacksetconstraint",
        "scope": "python"
    },
    "servicecatalog.CfnTagOption": {
        "body": [
            "servicecatalog.CfnTagOption(self, \"${1:id}\", ",
            "        active=${2:bool},",
            "        key=${3:str}, # Required",
            "        value=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnTagOption",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnTagOption"
        ],
        "prefix": "l1-servicecatalog-tagoption",
        "scope": "python"
    },
    "servicecatalog.CfnTagOptionAssociation": {
        "body": [
            "servicecatalog.CfnTagOptionAssociation(self, \"${1:id}\", ",
            "        resourceId=${2:str}, # Required",
            "        tagOptionId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalog.CfnTagOptionAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalog.CfnTagOptionAssociation"
        ],
        "prefix": "l1-servicecatalog-tagoptionassociation",
        "scope": "python"
    },
    "servicecatalogappregistry.CfnApplication": {
        "body": [
            "servicecatalogappregistry.CfnApplication(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: servicecatalogappregistry.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalogappregistry.CfnApplication",
            "Attributes: ",
            "  attrApplicationName",
            "  attrApplicationTagKey",
            "  attrApplicationTagValue",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-servicecatalogappregistry-application",
        "scope": "python"
    },
    "servicecatalogappregistry.CfnAttributeGroup": {
        "body": [
            "servicecatalogappregistry.CfnAttributeGroup(self, \"${1:id}\", ",
            "        attributes=${2:dict}, # Required",
            "        description=${3:str},",
            "        name=${4:str}, # Required",
            "        tags={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: servicecatalogappregistry.CfnAttributeGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalogappregistry.CfnAttributeGroup",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-servicecatalogappregistry-attributegroup",
        "scope": "python"
    },
    "servicecatalogappregistry.CfnAttributeGroupAssociation": {
        "body": [
            "servicecatalogappregistry.CfnAttributeGroupAssociation(self, \"${1:id}\", ",
            "        application=${2:str}, # Required",
            "        attributeGroup=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalogappregistry.CfnAttributeGroupAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalogappregistry.CfnAttributeGroupAssociation",
            "Attributes: ",
            "  attrApplicationArn",
            "  attrAttributeGroupArn"
        ],
        "prefix": "l1-servicecatalogappregistry-attributegroupassociation",
        "scope": "python"
    },
    "servicecatalogappregistry.CfnResourceAssociation": {
        "body": [
            "servicecatalogappregistry.CfnResourceAssociation(self, \"${1:id}\", ",
            "        application=${2:str}, # Required",
            "        resource=${3:str}, # Required",
            "        resourceType=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicecatalogappregistry.CfnResourceAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicecatalogappregistry.CfnResourceAssociation",
            "Attributes: ",
            "  attrResourceArn",
            "  attrApplicationArn"
        ],
        "prefix": "l1-servicecatalogappregistry-resourceassociation",
        "scope": "python"
    },
    "servicediscovery.CfnHttpNamespace": {
        "body": [
            "servicediscovery.CfnHttpNamespace(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: servicediscovery.CfnHttpNamespace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicediscovery.CfnHttpNamespace",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-servicediscovery-httpnamespace",
        "scope": "python"
    },
    "servicediscovery.CfnInstance": {
        "body": [
            "servicediscovery.CfnInstance(self, \"${1:id}\", ",
            "        instanceAttributes=${2:dict}, # Required",
            "        instanceId=${3:str},",
            "        serviceId=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicediscovery.CfnInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicediscovery.CfnInstance"
        ],
        "prefix": "l1-servicediscovery-instance",
        "scope": "python"
    },
    "servicediscovery.CfnPrivateDnsNamespace": {
        "body": [
            "servicediscovery.CfnPrivateDnsNamespace(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        properties={",
            "        },",
            "        tags=[],",
            "        vpc=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: servicediscovery.CfnPrivateDnsNamespace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicediscovery.CfnPrivateDnsNamespace",
            "Attributes: ",
            "  attrHostedZoneId",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-servicediscovery-privatednsnamespace",
        "scope": "python"
    },
    "servicediscovery.CfnPublicDnsNamespace": {
        "body": [
            "servicediscovery.CfnPublicDnsNamespace(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        properties={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: servicediscovery.CfnPublicDnsNamespace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicediscovery.CfnPublicDnsNamespace",
            "Attributes: ",
            "  attrHostedZoneId",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-servicediscovery-publicdnsnamespace",
        "scope": "python"
    },
    "servicediscovery.CfnService": {
        "body": [
            "servicediscovery.CfnService(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        dnsConfig={",
            "            dnsRecords=[],",
            "            namespaceId=${4:str},",
            "            routingPolicy=${5:str},",
            "        },",
            "        healthCheckConfig={",
            "            failureThreshold=${4:float},",
            "            resourcePath=${5:str},",
            "            type=${6:str},",
            "        },",
            "        healthCheckCustomConfig={",
            "            failureThreshold=${5:float},",
            "        },",
            "        name=${6:str},",
            "        namespaceId=${7:str},",
            "        tags=[],",
            "        type=${9:str},",
            ")"
        ],
        "description": [
            "Construct: servicediscovery.CfnService",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-servicediscovery.CfnService",
            "Attributes: ",
            "  attrId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-servicediscovery-service",
        "scope": "python"
    },
    "ses.CfnConfigurationSet": {
        "body": [
            "ses.CfnConfigurationSet(self, \"${1:id}\", ",
            "        deliveryOptions={",
            "            sendingPoolName=${2:str},",
            "            tlsPolicy=${3:str},",
            "        },",
            "        name=${3:str},",
            "        reputationOptions={",
            "            reputationMetricsEnabled=${4:bool},",
            "        },",
            "        sendingOptions={",
            "            sendingEnabled=${5:bool},",
            "        },",
            "        suppressionOptions={",
            "            suppressedReasons=[],",
            "        },",
            "        trackingOptions={",
            "            customRedirectDomain=${7:str},",
            "        },",
            "        vdmOptions={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ses.CfnConfigurationSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnConfigurationSet"
        ],
        "prefix": "l1-ses-configurationset",
        "scope": "python"
    },
    "ses.CfnConfigurationSetEventDestination": {
        "body": [
            "ses.CfnConfigurationSetEventDestination(self, \"${1:id}\", ",
            "        configurationSetName=${2:str}, # Required",
            "        eventDestination={",
            "            enabled=${4:bool},",
            "            matchingEventTypes=[],",
            "            name=${8:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ses.CfnConfigurationSetEventDestination",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnConfigurationSetEventDestination",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ses-configurationseteventdestination",
        "scope": "python"
    },
    "ses.CfnContactList": {
        "body": [
            "ses.CfnContactList(self, \"${1:id}\", ",
            "        contactListName=${2:str},",
            "        description=${3:str},",
            "        tags=[],",
            "        topics=[],",
            ")"
        ],
        "description": [
            "Construct: ses.CfnContactList",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnContactList"
        ],
        "prefix": "l1-ses-contactlist",
        "scope": "python"
    },
    "ses.CfnDedicatedIpPool": {
        "body": [
            "ses.CfnDedicatedIpPool(self, \"${1:id}\", ",
            "        poolName=${2:str},",
            "        scalingMode=${3:str},",
            ")"
        ],
        "description": [
            "Construct: ses.CfnDedicatedIpPool",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnDedicatedIpPool"
        ],
        "prefix": "l1-ses-dedicatedippool",
        "scope": "python"
    },
    "ses.CfnEmailIdentity": {
        "body": [
            "ses.CfnEmailIdentity(self, \"${1:id}\", ",
            "        configurationSetAttributes={",
            "            configurationSetName=${2:str},",
            "        },",
            "        dkimAttributes={",
            "            signingEnabled=${3:bool},",
            "        },",
            "        dkimSigningAttributes={",
            "            domainSigningPrivateKey=${4:str},",
            "            domainSigningSelector=${5:str},",
            "            nextSigningKeyLength=${6:str},",
            "        },",
            "        emailIdentity=${5:str}, # Required",
            "        feedbackAttributes={",
            "            emailForwardingEnabled=${6:bool},",
            "        },",
            "        mailFromAttributes={",
            "            behaviorOnMxFailure=${7:str},",
            "            mailFromDomain=${8:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ses.CfnEmailIdentity",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnEmailIdentity",
            "Attributes: ",
            "  attrDkimDNSTokenValue1",
            "  attrDkimDNSTokenName2",
            "  attrDkimDNSTokenName3",
            "  attrDkimDNSTokenName1",
            "  attrDkimDNSTokenValue2",
            "  attrDkimDNSTokenValue3"
        ],
        "prefix": "l1-ses-emailidentity",
        "scope": "python"
    },
    "ses.CfnReceiptFilter": {
        "body": [
            "ses.CfnReceiptFilter(self, \"${1:id}\", ",
            "        filter={",
            "            name=${3:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ses.CfnReceiptFilter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnReceiptFilter"
        ],
        "prefix": "l1-ses-receiptfilter",
        "scope": "python"
    },
    "ses.CfnReceiptRule": {
        "body": [
            "ses.CfnReceiptRule(self, \"${1:id}\", ",
            "        after=${2:str},",
            "        rule={",
            "            actions=[],",
            "            enabled=${4:bool},",
            "            name=${5:str},",
            "            recipients=[],",
            "            scanEnabled=${7:bool},",
            "            tlsPolicy=${8:str},",
            "        },",
            "        ruleSetName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ses.CfnReceiptRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnReceiptRule"
        ],
        "prefix": "l1-ses-receiptrule",
        "scope": "python"
    },
    "ses.CfnReceiptRuleSet": {
        "body": [
            "ses.CfnReceiptRuleSet(self, \"${1:id}\", ",
            "        ruleSetName=${2:str},",
            ")"
        ],
        "description": [
            "Construct: ses.CfnReceiptRuleSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnReceiptRuleSet"
        ],
        "prefix": "l1-ses-receiptruleset",
        "scope": "python"
    },
    "ses.CfnTemplate": {
        "body": [
            "ses.CfnTemplate(self, \"${1:id}\", ",
            "        template={",
            "            htmlPart=${2:str},",
            "            subjectPart=${3:str},",
            "            templateName=${4:str},",
            "            textPart=${5:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ses.CfnTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnTemplate",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ses-template",
        "scope": "python"
    },
    "ses.CfnVdmAttributes": {
        "body": [
            "ses.CfnVdmAttributes(self, \"${1:id}\", ",
            "        dashboardAttributes={",
            "            engagementMetrics=${2:str},",
            "        },",
            "        guardianAttributes={",
            "            optimizedSharedDelivery=${3:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: ses.CfnVdmAttributes",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ses.CfnVdmAttributes",
            "Attributes: ",
            "  attrVdmAttributesResourceId"
        ],
        "prefix": "l1-ses-vdmattributes",
        "scope": "python"
    },
    "shield.CfnDRTAccess": {
        "body": [
            "shield.CfnDRTAccess(self, \"${1:id}\", ",
            "        logBucketList=[],",
            "        roleArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: shield.CfnDRTAccess",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-shield.CfnDRTAccess",
            "Attributes: ",
            "  attrAccountId"
        ],
        "prefix": "l1-shield-drtaccess",
        "scope": "python"
    },
    "shield.CfnProactiveEngagement": {
        "body": [
            "shield.CfnProactiveEngagement(self, \"${1:id}\", ",
            "        emergencyContactList=[], # Required",
            "        proactiveEngagementStatus=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: shield.CfnProactiveEngagement",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-shield.CfnProactiveEngagement",
            "Attributes: ",
            "  attrAccountId"
        ],
        "prefix": "l1-shield-proactiveengagement",
        "scope": "python"
    },
    "shield.CfnProtection": {
        "body": [
            "shield.CfnProtection(self, \"${1:id}\", ",
            "        applicationLayerAutomaticResponseConfiguration={",
            "            status=${3:str},",
            "        },",
            "        healthCheckArns=[],",
            "        name=${4:str}, # Required",
            "        resourceArn=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: shield.CfnProtection",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-shield.CfnProtection",
            "Attributes: ",
            "  attrProtectionArn",
            "  attrProtectionId"
        ],
        "prefix": "l1-shield-protection",
        "scope": "python"
    },
    "shield.CfnProtectionGroup": {
        "body": [
            "shield.CfnProtectionGroup(self, \"${1:id}\", ",
            "        aggregation=${2:str}, # Required",
            "        members=[],",
            "        pattern=${4:str}, # Required",
            "        protectionGroupId=${5:str}, # Required",
            "        resourceType=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: shield.CfnProtectionGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-shield.CfnProtectionGroup",
            "Attributes: ",
            "  attrProtectionGroupArn"
        ],
        "prefix": "l1-shield-protectiongroup",
        "scope": "python"
    },
    "signer.CfnProfilePermission": {
        "body": [
            "signer.CfnProfilePermission(self, \"${1:id}\", ",
            "        action=${2:str}, # Required",
            "        principal=${3:str}, # Required",
            "        profileName=${4:str}, # Required",
            "        profileVersion=${5:str},",
            "        statementId=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: signer.CfnProfilePermission",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-signer.CfnProfilePermission"
        ],
        "prefix": "l1-signer-profilepermission",
        "scope": "python"
    },
    "signer.CfnSigningProfile": {
        "body": [
            "signer.CfnSigningProfile(self, \"${1:id}\", ",
            "        platformId=${2:str}, # Required",
            "        signatureValidityPeriod={",
            "            type=${3:str},",
            "            value=${4:int},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: signer.CfnSigningProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-signer.CfnSigningProfile",
            "Attributes: ",
            "  attrProfileVersionArn",
            "  attrProfileName",
            "  attrArn",
            "  attrProfileVersion"
        ],
        "prefix": "l1-signer-signingprofile",
        "scope": "python"
    },
    "simspaceweaver.CfnSimulation": {
        "body": [
            "simspaceweaver.CfnSimulation(self, \"${1:id}\", ",
            "        maximumDuration=${2:str},",
            "        name=${3:str}, # Required",
            "        roleArn=${4:str}, # Required",
            "        schemaS3Location={",
            "            bucketName=${5:str},",
            "            objectKey=${6:str},",
            "        },",
            "        snapshotS3Location={",
            "            bucketName=${6:str},",
            "            objectKey=${7:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: simspaceweaver.CfnSimulation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-simspaceweaver.CfnSimulation",
            "Attributes: ",
            "  attrDescribePayload"
        ],
        "prefix": "l1-simspaceweaver-simulation",
        "scope": "python"
    },
    "sns.CfnSubscription": {
        "body": [
            "sns.CfnSubscription(self, \"${1:id}\", ",
            "        deliveryPolicy=${2:dict},",
            "        endpoint=${3:str},",
            "        filterPolicy=${4:dict},",
            "        filterPolicyScope=${5:str},",
            "        protocol=${6:str}, # Required",
            "        rawMessageDelivery=${7:bool},",
            "        redrivePolicy=${8:dict},",
            "        region=${9:str},",
            "        replayPolicy=${10:dict},",
            "        subscriptionRoleArn=${11:str},",
            "        topicArn=${12:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sns.CfnSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sns.CfnSubscription"
        ],
        "prefix": "l1-sns-subscription",
        "scope": "python"
    },
    "sns.CfnTopic": {
        "body": [
            "sns.CfnTopic(self, \"${1:id}\", ",
            "        archivePolicy=${2:dict},",
            "        contentBasedDeduplication=${3:bool},",
            "        dataProtectionPolicy=${4:dict},",
            "        deliveryStatusLogging=[],",
            "        displayName=${6:str},",
            "        fifoTopic=${7:bool},",
            "        kmsMasterKeyId=${8:str},",
            "        signatureVersion=${9:str},",
            "        subscription=[],",
            "        tags=[],",
            "        topicName=${12:str},",
            "        tracingConfig=${13:str},",
            ")"
        ],
        "description": [
            "Construct: sns.CfnTopic",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sns.CfnTopic",
            "Attributes: ",
            "  attrTopicArn",
            "  attrTopicName"
        ],
        "prefix": "l1-sns-topic",
        "scope": "python"
    },
    "sns.CfnTopicInlinePolicy": {
        "body": [
            "sns.CfnTopicInlinePolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:dict}, # Required",
            "        topicArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sns.CfnTopicInlinePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sns.CfnTopicInlinePolicy"
        ],
        "prefix": "l1-sns-topicinlinepolicy",
        "scope": "python"
    },
    "sns.CfnTopicPolicy": {
        "body": [
            "sns.CfnTopicPolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:dict}, # Required",
            "        topics=[], # Required",
            ")"
        ],
        "description": [
            "Construct: sns.CfnTopicPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sns.CfnTopicPolicy",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-sns-topicpolicy",
        "scope": "python"
    },
    "sqs.CfnQueue": {
        "body": [
            "sqs.CfnQueue(self, \"${1:id}\", ",
            "        contentBasedDeduplication=${2:bool},",
            "        deduplicationScope=${3:str},",
            "        delaySeconds=${4:int},",
            "        fifoQueue=${5:bool},",
            "        fifoThroughputLimit=${6:str},",
            "        kmsDataKeyReusePeriodSeconds=${7:int},",
            "        kmsMasterKeyId=${8:str},",
            "        maximumMessageSize=${9:int},",
            "        messageRetentionPeriod=${10:int},",
            "        queueName=${11:str},",
            "        receiveMessageWaitTimeSeconds=${12:int},",
            "        redriveAllowPolicy=${13:dict},",
            "        redrivePolicy=${14:dict},",
            "        sqsManagedSseEnabled=${15:bool},",
            "        tags=[],",
            "        visibilityTimeout=${17:int},",
            ")"
        ],
        "description": [
            "Construct: sqs.CfnQueue",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sqs.CfnQueue",
            "Attributes: ",
            "  attrArn",
            "  attrQueueName",
            "  attrQueueUrl"
        ],
        "prefix": "l1-sqs-queue",
        "scope": "python"
    },
    "sqs.CfnQueueInlinePolicy": {
        "body": [
            "sqs.CfnQueueInlinePolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:dict}, # Required",
            "        queue=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sqs.CfnQueueInlinePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sqs.CfnQueueInlinePolicy"
        ],
        "prefix": "l1-sqs-queueinlinepolicy",
        "scope": "python"
    },
    "sqs.CfnQueuePolicy": {
        "body": [
            "sqs.CfnQueuePolicy(self, \"${1:id}\", ",
            "        policyDocument=${2:dict}, # Required",
            "        queues=[], # Required",
            ")"
        ],
        "description": [
            "Construct: sqs.CfnQueuePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sqs.CfnQueuePolicy",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-sqs-queuepolicy",
        "scope": "python"
    },
    "ssm.CfnAssociation": {
        "body": [
            "ssm.CfnAssociation(self, \"${1:id}\", ",
            "        applyOnlyAtCronInterval=${2:bool},",
            "        associationName=${3:str},",
            "        automationTargetParameterName=${4:str},",
            "        calendarNames=[],",
            "        complianceSeverity=${6:str},",
            "        documentVersion=${7:str},",
            "        instanceId=${8:str},",
            "        maxConcurrency=${9:str},",
            "        maxErrors=${10:str},",
            "        name=${11:str}, # Required",
            "        outputLocation={",
            "        },",
            "        parameters=${13:dict},",
            "        scheduleExpression=${14:str},",
            "        scheduleOffset=${15:int},",
            "        syncCompliance=${16:str},",
            "        targets=[],",
            "        waitForSuccessTimeoutSeconds=${18:int},",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnAssociation",
            "Attributes: ",
            "  attrAssociationId"
        ],
        "prefix": "l1-ssm-association",
        "scope": "python"
    },
    "ssm.CfnDocument": {
        "body": [
            "ssm.CfnDocument(self, \"${1:id}\", ",
            "        attachments=[],",
            "        content=${3:dict}, # Required",
            "        documentFormat=${4:str},",
            "        documentType=${5:str},",
            "        name=${6:str},",
            "        requires=[],",
            "        tags=[],",
            "        targetType=${9:str},",
            "        updateMethod=${10:str},",
            "        versionName=${11:str},",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnDocument",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnDocument"
        ],
        "prefix": "l1-ssm-document",
        "scope": "python"
    },
    "ssm.CfnMaintenanceWindow": {
        "body": [
            "ssm.CfnMaintenanceWindow(self, \"${1:id}\", ",
            "        allowUnassociatedTargets=${2:bool}, # Required",
            "        cutoff=${3:int}, # Required",
            "        description=${4:str},",
            "        duration=${5:int}, # Required",
            "        endDate=${6:str},",
            "        name=${7:str}, # Required",
            "        schedule=${8:str}, # Required",
            "        scheduleOffset=${9:int},",
            "        scheduleTimezone=${10:str},",
            "        startDate=${11:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnMaintenanceWindow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnMaintenanceWindow"
        ],
        "prefix": "l1-ssm-maintenancewindow",
        "scope": "python"
    },
    "ssm.CfnMaintenanceWindowTarget": {
        "body": [
            "ssm.CfnMaintenanceWindowTarget(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str},",
            "        ownerInformation=${4:str},",
            "        resourceType=${5:str}, # Required",
            "        targets=[], # Required",
            "        windowId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnMaintenanceWindowTarget",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnMaintenanceWindowTarget"
        ],
        "prefix": "l1-ssm-maintenancewindowtarget",
        "scope": "python"
    },
    "ssm.CfnMaintenanceWindowTask": {
        "body": [
            "ssm.CfnMaintenanceWindowTask(self, \"${1:id}\", ",
            "        cutoffBehavior=${2:str},",
            "        description=${3:str},",
            "        loggingInfo={",
            "            region=${4:str},",
            "            s3Bucket=${5:str},",
            "            s3Prefix=${6:str},",
            "        },",
            "        maxConcurrency=${5:str},",
            "        maxErrors=${6:str},",
            "        name=${7:str},",
            "        priority=${8:int}, # Required",
            "        serviceRoleArn=${9:str},",
            "        targets=[],",
            "        taskArn=${11:str}, # Required",
            "        taskInvocationParameters={",
            "        },",
            "        taskParameters=${13:dict},",
            "        taskType=${14:str}, # Required",
            "        windowId=${15:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnMaintenanceWindowTask",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnMaintenanceWindowTask"
        ],
        "prefix": "l1-ssm-maintenancewindowtask",
        "scope": "python"
    },
    "ssm.CfnParameter": {
        "body": [
            "ssm.CfnParameter(self, \"${1:id}\", ",
            "        allowedPattern=${2:str},",
            "        dataType=${3:str},",
            "        description=${4:str},",
            "        name=${5:str},",
            "        policies=${6:str},",
            "        tags={",
            "        },",
            "        tier=${8:str},",
            "        type=${9:str}, # Required",
            "        value=${10:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnParameter",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnParameter",
            "Attributes: ",
            "  attrType",
            "  attrValue"
        ],
        "prefix": "l1-ssm-parameter",
        "scope": "python"
    },
    "ssm.CfnPatchBaseline": {
        "body": [
            "ssm.CfnPatchBaseline(self, \"${1:id}\", ",
            "        approvalRules={",
            "            patchRules=[],",
            "        },",
            "        approvedPatches=[],",
            "        approvedPatchesComplianceLevel=${4:str},",
            "        approvedPatchesEnableNonSecurity=${5:bool},",
            "        defaultBaseline=${6:bool},",
            "        description=${7:str},",
            "        globalFilters={",
            "            patchFilters=[],",
            "        },",
            "        name=${9:str}, # Required",
            "        operatingSystem=${10:str},",
            "        patchGroups=[],",
            "        rejectedPatches=[],",
            "        rejectedPatchesAction=${13:str},",
            "        sources=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnPatchBaseline",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnPatchBaseline",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-ssm-patchbaseline",
        "scope": "python"
    },
    "ssm.CfnResourceDataSync": {
        "body": [
            "ssm.CfnResourceDataSync(self, \"${1:id}\", ",
            "        bucketName=${2:str},",
            "        bucketPrefix=${3:str},",
            "        bucketRegion=${4:str},",
            "        kMSKeyArn=${5:str},",
            "        s3Destination={",
            "            bucketName=${6:str},",
            "            bucketPrefix=${7:str},",
            "            bucketRegion=${8:str},",
            "            kMSKeyArn=${9:str},",
            "            syncFormat=${10:str},",
            "        },",
            "        syncFormat=${7:str},",
            "        syncName=${8:str}, # Required",
            "        syncSource={",
            "            includeFutureRegions=${10:bool},",
            "            sourceRegions=[],",
            "            sourceType=${12:str},",
            "        },",
            "        syncType=${10:str},",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnResourceDataSync",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnResourceDataSync",
            "Attributes: ",
            "  attrSyncName"
        ],
        "prefix": "l1-ssm-resourcedatasync",
        "scope": "python"
    },
    "ssm.CfnResourcePolicy": {
        "body": [
            "ssm.CfnResourcePolicy(self, \"${1:id}\", ",
            "        policy=${2:dict}, # Required",
            "        resourceArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ssm.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssm.CfnResourcePolicy",
            "Attributes: ",
            "  attrPolicyHash",
            "  attrPolicyId"
        ],
        "prefix": "l1-ssm-resourcepolicy",
        "scope": "python"
    },
    "ssmcontacts.CfnContact": {
        "body": [
            "ssmcontacts.CfnContact(self, \"${1:id}\", ",
            "        alias=${2:str}, # Required",
            "        displayName=${3:str}, # Required",
            "        plan=[],",
            "        type=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ssmcontacts.CfnContact",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssmcontacts.CfnContact",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ssmcontacts-contact",
        "scope": "python"
    },
    "ssmcontacts.CfnContactChannel": {
        "body": [
            "ssmcontacts.CfnContactChannel(self, \"${1:id}\", ",
            "        channelAddress=${2:str}, # Required",
            "        channelName=${3:str}, # Required",
            "        channelType=${4:str}, # Required",
            "        contactId=${5:str}, # Required",
            "        deferActivation=${6:bool},",
            ")"
        ],
        "description": [
            "Construct: ssmcontacts.CfnContactChannel",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssmcontacts.CfnContactChannel",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ssmcontacts-contactchannel",
        "scope": "python"
    },
    "ssmcontacts.CfnPlan": {
        "body": [
            "ssmcontacts.CfnPlan(self, \"${1:id}\", ",
            "        contactId=${2:str}, # Required",
            "        rotationIds=[],",
            "        stages=[],",
            ")"
        ],
        "description": [
            "Construct: ssmcontacts.CfnPlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssmcontacts.CfnPlan",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ssmcontacts-plan",
        "scope": "python"
    },
    "ssmcontacts.CfnRotation": {
        "body": [
            "ssmcontacts.CfnRotation(self, \"${1:id}\", ",
            "        contactIds=[], # Required",
            "        name=${3:str}, # Required",
            "        recurrence={",
            "            dailySettings=[],",
            "            monthlySettings=[],",
            "            numberOfOnCalls=${6:int},",
            "            recurrenceMultiplier=${7:int},",
            "            shiftCoverages=[],",
            "            weeklySettings=[],",
            "        },",
            "        startTime=${5:str}, # Required",
            "        tags=[],",
            "        timeZoneId=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: ssmcontacts.CfnRotation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssmcontacts.CfnRotation",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ssmcontacts-rotation",
        "scope": "python"
    },
    "ssmincidents.CfnReplicationSet": {
        "body": [
            "ssmincidents.CfnReplicationSet(self, \"${1:id}\", ",
            "        deletionProtected=${2:bool},",
            "        regions=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ssmincidents.CfnReplicationSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssmincidents.CfnReplicationSet",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ssmincidents-replicationset",
        "scope": "python"
    },
    "ssmincidents.CfnResponsePlan": {
        "body": [
            "ssmincidents.CfnResponsePlan(self, \"${1:id}\", ",
            "        actions=[],",
            "        chatChannel={",
            "            chatbotSns=[],",
            "        },",
            "        displayName=${4:str},",
            "        engagements=[],",
            "        incidentTemplate={",
            "            dedupeString=${6:str},",
            "            impact=${7:int},",
            "            incidentTags=[],",
            "            notificationTargets=[],",
            "            summary=${10:str},",
            "            title=${11:str},",
            "        },",
            "        integrations=[],",
            "        name=${8:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: ssmincidents.CfnResponsePlan",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ssmincidents.CfnResponsePlan",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-ssmincidents-responseplan",
        "scope": "python"
    },
    "sso.CfnApplication": {
        "body": [
            "sso.CfnApplication(self, \"${1:id}\", ",
            "        applicationProviderArn=${2:str}, # Required",
            "        description=${3:str},",
            "        instanceArn=${4:str}, # Required",
            "        name=${5:str}, # Required",
            "        portalOptions={",
            "            visibility=${7:str},",
            "        },",
            "        status=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sso.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sso.CfnApplication",
            "Attributes: ",
            "  attrApplicationArn"
        ],
        "prefix": "l1-sso-application",
        "scope": "python"
    },
    "sso.CfnApplicationAssignment": {
        "body": [
            "sso.CfnApplicationAssignment(self, \"${1:id}\", ",
            "        applicationArn=${2:str}, # Required",
            "        principalId=${3:str}, # Required",
            "        principalType=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sso.CfnApplicationAssignment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sso.CfnApplicationAssignment"
        ],
        "prefix": "l1-sso-applicationassignment",
        "scope": "python"
    },
    "sso.CfnAssignment": {
        "body": [
            "sso.CfnAssignment(self, \"${1:id}\", ",
            "        instanceArn=${2:str}, # Required",
            "        permissionSetArn=${3:str}, # Required",
            "        principalId=${4:str}, # Required",
            "        principalType=${5:str}, # Required",
            "        targetId=${6:str}, # Required",
            "        targetType=${7:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sso.CfnAssignment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sso.CfnAssignment"
        ],
        "prefix": "l1-sso-assignment",
        "scope": "python"
    },
    "sso.CfnInstance": {
        "body": [
            "sso.CfnInstance(self, \"${1:id}\", ",
            "        name=${2:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sso.CfnInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sso.CfnInstance",
            "Attributes: ",
            "  attrStatus",
            "  attrInstanceArn",
            "  attrIdentityStoreId",
            "  attrOwnerAccountId"
        ],
        "prefix": "l1-sso-instance",
        "scope": "python"
    },
    "sso.CfnInstanceAccessControlAttributeConfiguration": {
        "body": [
            "sso.CfnInstanceAccessControlAttributeConfiguration(self, \"${1:id}\", ",
            "        accessControlAttributes=[],",
            "        instanceArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: sso.CfnInstanceAccessControlAttributeConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sso.CfnInstanceAccessControlAttributeConfiguration"
        ],
        "prefix": "l1-sso-instanceaccesscontrolattributeconfiguration",
        "scope": "python"
    },
    "sso.CfnPermissionSet": {
        "body": [
            "sso.CfnPermissionSet(self, \"${1:id}\", ",
            "        customerManagedPolicyReferences=[],",
            "        description=${3:str},",
            "        inlinePolicy=${4:dict},",
            "        instanceArn=${5:str}, # Required",
            "        managedPolicies=[],",
            "        name=${7:str}, # Required",
            "        permissionsBoundary={",
            "            managedPolicyArn=${9:str},",
            "        },",
            "        relayStateType=${9:str},",
            "        sessionDuration=${10:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: sso.CfnPermissionSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-sso.CfnPermissionSet",
            "Attributes: ",
            "  attrPermissionSetArn"
        ],
        "prefix": "l1-sso-permissionset",
        "scope": "python"
    },
    "stepfunctions.CfnActivity": {
        "body": [
            "stepfunctions.CfnActivity(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: stepfunctions.CfnActivity",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-stepfunctions.CfnActivity",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-stepfunctions-activity",
        "scope": "python"
    },
    "stepfunctions.CfnStateMachine": {
        "body": [
            "stepfunctions.CfnStateMachine(self, \"${1:id}\", ",
            "        definition=${2:dict},",
            "        definitionS3Location={",
            "            bucket=${3:str},",
            "            key=${4:str},",
            "            version=${5:str},",
            "        },",
            "        definitionString=${4:str},",
            "        definitionSubstitutions={",
            "        },",
            "        loggingConfiguration={",
            "            destinations=[],",
            "            includeExecutionData=${7:bool},",
            "            level=${8:str},",
            "        },",
            "        roleArn=${7:str}, # Required",
            "        stateMachineName=${8:str},",
            "        stateMachineType=${9:str},",
            "        tags=[],",
            "        tracingConfiguration={",
            "            enabled=${11:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: stepfunctions.CfnStateMachine",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-stepfunctions.CfnStateMachine",
            "Attributes: ",
            "  attrStateMachineRevisionId",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-stepfunctions-statemachine",
        "scope": "python"
    },
    "stepfunctions.CfnStateMachineAlias": {
        "body": [
            "stepfunctions.CfnStateMachineAlias(self, \"${1:id}\", ",
            "        deploymentPreference={",
            "            alarms=[],",
            "            interval=${3:int},",
            "            percentage=${4:int},",
            "            stateMachineVersionArn=${5:str},",
            "            type=${6:str},",
            "        },",
            "        description=${3:str},",
            "        name=${4:str},",
            "        routingConfiguration=[],",
            ")"
        ],
        "description": [
            "Construct: stepfunctions.CfnStateMachineAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-stepfunctions.CfnStateMachineAlias",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-stepfunctions-statemachinealias",
        "scope": "python"
    },
    "stepfunctions.CfnStateMachineVersion": {
        "body": [
            "stepfunctions.CfnStateMachineVersion(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        stateMachineArn=${3:str}, # Required",
            "        stateMachineRevisionId=${4:str},",
            ")"
        ],
        "description": [
            "Construct: stepfunctions.CfnStateMachineVersion",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-stepfunctions.CfnStateMachineVersion",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-stepfunctions-statemachineversion",
        "scope": "python"
    },
    "supportapp.CfnAccountAlias": {
        "body": [
            "supportapp.CfnAccountAlias(self, \"${1:id}\", ",
            "        accountAlias=${2:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: supportapp.CfnAccountAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-supportapp.CfnAccountAlias",
            "Attributes: ",
            "  attrAccountAliasResourceId"
        ],
        "prefix": "l1-supportapp-accountalias",
        "scope": "python"
    },
    "supportapp.CfnSlackChannelConfiguration": {
        "body": [
            "supportapp.CfnSlackChannelConfiguration(self, \"${1:id}\", ",
            "        channelId=${2:str}, # Required",
            "        channelName=${3:str},",
            "        channelRoleArn=${4:str}, # Required",
            "        notifyOnAddCorrespondenceToCase=${5:bool},",
            "        notifyOnCaseSeverity=${6:str}, # Required",
            "        notifyOnCreateOrReopenCase=${7:bool},",
            "        notifyOnResolveCase=${8:bool},",
            "        teamId=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: supportapp.CfnSlackChannelConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-supportapp.CfnSlackChannelConfiguration"
        ],
        "prefix": "l1-supportapp-slackchannelconfiguration",
        "scope": "python"
    },
    "supportapp.CfnSlackWorkspaceConfiguration": {
        "body": [
            "supportapp.CfnSlackWorkspaceConfiguration(self, \"${1:id}\", ",
            "        teamId=${2:str}, # Required",
            "        versionId=${3:str},",
            ")"
        ],
        "description": [
            "Construct: supportapp.CfnSlackWorkspaceConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-supportapp.CfnSlackWorkspaceConfiguration"
        ],
        "prefix": "l1-supportapp-slackworkspaceconfiguration",
        "scope": "python"
    },
    "synthetics.CfnCanary": {
        "body": [
            "synthetics.CfnCanary(self, \"${1:id}\", ",
            "        artifactConfig={",
            "        },",
            "        artifactS3Location=${3:str}, # Required",
            "        code={",
            "            handler=${4:str},",
            "            s3Bucket=${5:str},",
            "            s3Key=${6:str},",
            "            s3ObjectVersion=${7:str},",
            "            script=${8:str},",
            "            sourceLocationArn=${9:str},",
            "        },",
            "        executionRoleArn=${5:str}, # Required",
            "        failureRetentionPeriod=${6:int},",
            "        name=${7:str}, # Required",
            "        runConfig={",
            "            activeTracing=${8:bool},",
            "            memoryInMB=${10:int},",
            "            timeoutInSeconds=${11:int},",
            "        },",
            "        runtimeVersion=${9:str}, # Required",
            "        schedule={",
            "            durationInSeconds=${10:str},",
            "            expression=${11:str},",
            "        },",
            "        startCanaryAfterCreation=${11:bool},",
            "        successRetentionPeriod=${12:int},",
            "        tags=[],",
            "        vPCConfig={",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "            vpcId=${16:str},",
            "        },",
            "        visualReference={",
            "            baseCanaryRunId=${15:str},",
            "            baseScreenshots=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: synthetics.CfnCanary",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-synthetics.CfnCanary",
            "Attributes: ",
            "  attrCode.SourceLocationArn",
            "  attrState",
            "  attrId"
        ],
        "prefix": "l1-synthetics-canary",
        "scope": "python"
    },
    "synthetics.CfnGroup": {
        "body": [
            "synthetics.CfnGroup(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        resourceArns=[],",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: synthetics.CfnGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-synthetics.CfnGroup",
            "Attributes: ",
            "  attrId"
        ],
        "prefix": "l1-synthetics-group",
        "scope": "python"
    },
    "systemsmanagersap.CfnApplication": {
        "body": [
            "systemsmanagersap.CfnApplication(self, \"${1:id}\", ",
            "        applicationId=${2:str}, # Required",
            "        applicationType=${3:str}, # Required",
            "        credentials=[],",
            "        instances=[],",
            "        sapInstanceNumber=${6:str},",
            "        sid=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: systemsmanagersap.CfnApplication",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-systemsmanagersap.CfnApplication",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-systemsmanagersap-application",
        "scope": "python"
    },
    "timestream.CfnDatabase": {
        "body": [
            "timestream.CfnDatabase(self, \"${1:id}\", ",
            "        databaseName=${2:str},",
            "        kmsKeyId=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: timestream.CfnDatabase",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-timestream.CfnDatabase",
            "Attributes: ",
            "  attrArn"
        ],
        "prefix": "l1-timestream-database",
        "scope": "python"
    },
    "timestream.CfnInfluxDBInstance": {
        "body": [
            "timestream.CfnInfluxDBInstance(self, \"${1:id}\", ",
            "        allocatedStorage=${2:int},",
            "        bucket=${3:str},",
            "        dbInstanceType=${4:str},",
            "        dbParameterGroupIdentifier=${5:str},",
            "        dbStorageType=${6:str},",
            "        deploymentType=${7:str},",
            "        logDeliveryConfiguration={",
            "        },",
            "        name=${9:str},",
            "        organization=${10:str},",
            "        password=${11:str},",
            "        publiclyAccessible=${12:bool},",
            "        tags=[],",
            "        username=${14:str},",
            "        vpcSecurityGroupIds=[],",
            "        vpcSubnetIds=[],",
            ")"
        ],
        "description": [
            "Construct: timestream.CfnInfluxDBInstance",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-timestream.CfnInfluxDBInstance",
            "Attributes: ",
            "  attrStatus",
            "  attrEndpoint",
            "  attrInfluxAuthParametersSecretArn",
            "  attrAvailabilityZone",
            "  attrSecondaryAvailabilityZone",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-timestream-influxdbinstance",
        "scope": "python"
    },
    "timestream.CfnScheduledQuery": {
        "body": [
            "timestream.CfnScheduledQuery(self, \"${1:id}\", ",
            "        clientToken=${2:str},",
            "        errorReportConfiguration={",
            "        },",
            "        kmsKeyId=${4:str},",
            "        notificationConfiguration={",
            "        },",
            "        queryString=${6:str}, # Required",
            "        scheduleConfiguration={",
            "            scheduleExpression=${7:str},",
            "        },",
            "        scheduledQueryExecutionRoleArn=${8:str}, # Required",
            "        scheduledQueryName=${9:str},",
            "        tags=[],",
            "        targetConfiguration={",
            "        },",
            ")"
        ],
        "description": [
            "Construct: timestream.CfnScheduledQuery",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-timestream.CfnScheduledQuery",
            "Attributes: ",
            "  attrSQScheduleConfiguration",
            "  attrSQNotificationConfiguration",
            "  attrSQErrorReportConfiguration",
            "  attrSQKmsKeyId",
            "  attrSQQueryString",
            "  attrSQTargetConfiguration",
            "  attrSQName",
            "  attrArn",
            "  attrSQScheduledQueryExecutionRoleArn"
        ],
        "prefix": "l1-timestream-scheduledquery",
        "scope": "python"
    },
    "timestream.CfnTable": {
        "body": [
            "timestream.CfnTable(self, \"${1:id}\", ",
            "        databaseName=${2:str}, # Required",
            "        magneticStoreWriteProperties={",
            "            enableMagneticStoreWrites=${3:bool},",
            "        },",
            "        retentionProperties={",
            "            magneticStoreRetentionPeriodInDays=${4:str},",
            "            memoryStoreRetentionPeriodInHours=${5:str},",
            "        },",
            "        schema={",
            "            compositePartitionKey=[],",
            "        },",
            "        tableName=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: timestream.CfnTable",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-timestream.CfnTable",
            "Attributes: ",
            "  attrArn",
            "  attrName"
        ],
        "prefix": "l1-timestream-table",
        "scope": "python"
    },
    "transfer.CfnAgreement": {
        "body": [
            "transfer.CfnAgreement(self, \"${1:id}\", ",
            "        accessRole=${2:str}, # Required",
            "        baseDirectory=${3:str}, # Required",
            "        description=${4:str},",
            "        localProfileId=${5:str}, # Required",
            "        partnerProfileId=${6:str}, # Required",
            "        serverId=${7:str}, # Required",
            "        status=${8:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: transfer.CfnAgreement",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-transfer.CfnAgreement",
            "Attributes: ",
            "  attrAgreementId",
            "  attrArn"
        ],
        "prefix": "l1-transfer-agreement",
        "scope": "python"
    },
    "transfer.CfnCertificate": {
        "body": [
            "transfer.CfnCertificate(self, \"${1:id}\", ",
            "        activeDate=${2:str},",
            "        certificate=${3:str}, # Required",
            "        certificateChain=${4:str},",
            "        description=${5:str},",
            "        inactiveDate=${6:str},",
            "        privateKey=${7:str},",
            "        tags=[],",
            "        usage=${9:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: transfer.CfnCertificate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-transfer.CfnCertificate",
            "Attributes: ",
            "  attrStatus",
            "  attrType",
            "  attrSerial",
            "  attrCertificateId",
            "  attrNotBeforeDate",
            "  attrNotAfterDate",
            "  attrArn"
        ],
        "prefix": "l1-transfer-certificate",
        "scope": "python"
    },
    "transfer.CfnConnector": {
        "body": [
            "transfer.CfnConnector(self, \"${1:id}\", ",
            "        accessRole=${2:str}, # Required",
            "        as2Config={",
            "            basicAuthSecretId=${3:str},",
            "            compression=${4:str},",
            "            encryptionAlgorithm=${5:str},",
            "            localProfileId=${6:str},",
            "            mdnResponse=${7:str},",
            "            mdnSigningAlgorithm=${8:str},",
            "            messageSubject=${9:str},",
            "            partnerProfileId=${10:str},",
            "            signingAlgorithm=${11:str},",
            "        },",
            "        loggingRole=${4:str},",
            "        securityPolicyName=${5:str},",
            "        sftpConfig={",
            "            trustedHostKeys=[],",
            "            userSecretId=${7:str},",
            "        },",
            "        tags=[],",
            "        url=${8:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: transfer.CfnConnector",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-transfer.CfnConnector",
            "Attributes: ",
            "  attrArn",
            "  attrServiceManagedEgressIpAddresses",
            "  attrConnectorId"
        ],
        "prefix": "l1-transfer-connector",
        "scope": "python"
    },
    "transfer.CfnProfile": {
        "body": [
            "transfer.CfnProfile(self, \"${1:id}\", ",
            "        as2Id=${2:str}, # Required",
            "        certificateIds=[],",
            "        profileType=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: transfer.CfnProfile",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-transfer.CfnProfile",
            "Attributes: ",
            "  attrProfileId",
            "  attrArn"
        ],
        "prefix": "l1-transfer-profile",
        "scope": "python"
    },
    "transfer.CfnServer": {
        "body": [
            "transfer.CfnServer(self, \"${1:id}\", ",
            "        certificate=${2:str},",
            "        domain=${3:str},",
            "        endpointDetails={",
            "            addressAllocationIds=[],",
            "            securityGroupIds=[],",
            "            subnetIds=[],",
            "            vpcEndpointId=${7:str},",
            "            vpcId=${8:str},",
            "        },",
            "        endpointType=${5:str},",
            "        identityProviderDetails={",
            "            directoryId=${6:str},",
            "            function=${7:str},",
            "            invocationRole=${8:str},",
            "            sftpAuthenticationMethods=${9:str},",
            "            url=${10:str},",
            "        },",
            "        identityProviderType=${7:str},",
            "        loggingRole=${8:str},",
            "        postAuthenticationLoginBanner=${9:str},",
            "        preAuthenticationLoginBanner=${10:str},",
            "        protocolDetails={",
            "            as2Transports=[],",
            "            passiveIp=${12:str},",
            "            setStatOption=${13:str},",
            "            tlsSessionResumptionMode=${14:str},",
            "        },",
            "        protocols=[],",
            "        s3StorageOptions={",
            "            directoryListingOptimization=${13:str},",
            "        },",
            "        securityPolicyName=${14:str},",
            "        structuredLogDestinations=[],",
            "        tags=[],",
            "        workflowDetails={",
            "            onPartialUpload=[],",
            "            onUpload=[],",
            "        },",
            ")"
        ],
        "description": [
            "Construct: transfer.CfnServer",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-transfer.CfnServer",
            "Attributes: ",
            "  attrServerId",
            "  attrArn"
        ],
        "prefix": "l1-transfer-server",
        "scope": "python"
    },
    "transfer.CfnUser": {
        "body": [
            "transfer.CfnUser(self, \"${1:id}\", ",
            "        homeDirectory=${2:str},",
            "        homeDirectoryMappings=[],",
            "        homeDirectoryType=${4:str},",
            "        policy=${5:str},",
            "        posixProfile={",
            "            gid=${6:float},",
            "            secondaryGids=[],",
            "            uid=${8:float},",
            "        },",
            "        role=${7:str}, # Required",
            "        serverId=${8:str}, # Required",
            "        sshPublicKeys=[],",
            "        tags=[],",
            "        userName=${11:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: transfer.CfnUser",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-transfer.CfnUser",
            "Attributes: ",
            "  attrServerId",
            "  attrUserName",
            "  attrArn"
        ],
        "prefix": "l1-transfer-user",
        "scope": "python"
    },
    "transfer.CfnWorkflow": {
        "body": [
            "transfer.CfnWorkflow(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        onExceptionSteps=[],",
            "        steps=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: transfer.CfnWorkflow",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-transfer.CfnWorkflow",
            "Attributes: ",
            "  attrWorkflowId",
            "  attrArn"
        ],
        "prefix": "l1-transfer-workflow",
        "scope": "python"
    },
    "verifiedpermissions.CfnIdentitySource": {
        "body": [
            "verifiedpermissions.CfnIdentitySource(self, \"${1:id}\", ",
            "        configuration={",
            "        },",
            "        policyStoreId=${3:str}, # Required",
            "        principalEntityType=${4:str},",
            ")"
        ],
        "description": [
            "Construct: verifiedpermissions.CfnIdentitySource",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-verifiedpermissions.CfnIdentitySource",
            "Attributes: ",
            "  attrIdentitySourceId"
        ],
        "prefix": "l1-verifiedpermissions-identitysource",
        "scope": "python"
    },
    "verifiedpermissions.CfnPolicy": {
        "body": [
            "verifiedpermissions.CfnPolicy(self, \"${1:id}\", ",
            "        definition={",
            "        },",
            "        policyStoreId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: verifiedpermissions.CfnPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-verifiedpermissions.CfnPolicy",
            "Attributes: ",
            "  attrPolicyType",
            "  attrPolicyId"
        ],
        "prefix": "l1-verifiedpermissions-policy",
        "scope": "python"
    },
    "verifiedpermissions.CfnPolicyStore": {
        "body": [
            "verifiedpermissions.CfnPolicyStore(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        schema={",
            "            cedarJson=${3:str},",
            "        },",
            "        validationSettings={",
            "            mode=${4:str},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: verifiedpermissions.CfnPolicyStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-verifiedpermissions.CfnPolicyStore",
            "Attributes: ",
            "  attrPolicyStoreId",
            "  attrArn"
        ],
        "prefix": "l1-verifiedpermissions-policystore",
        "scope": "python"
    },
    "verifiedpermissions.CfnPolicyTemplate": {
        "body": [
            "verifiedpermissions.CfnPolicyTemplate(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        policyStoreId=${3:str}, # Required",
            "        statement=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: verifiedpermissions.CfnPolicyTemplate",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-verifiedpermissions.CfnPolicyTemplate",
            "Attributes: ",
            "  attrPolicyTemplateId"
        ],
        "prefix": "l1-verifiedpermissions-policytemplate",
        "scope": "python"
    },
    "voiceid.CfnDomain": {
        "body": [
            "voiceid.CfnDomain(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        serverSideEncryptionConfiguration={",
            "            kmsKeyId=${4:str},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: voiceid.CfnDomain",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-voiceid.CfnDomain",
            "Attributes: ",
            "  attrDomainId"
        ],
        "prefix": "l1-voiceid-domain",
        "scope": "python"
    },
    "vpclattice.CfnAccessLogSubscription": {
        "body": [
            "vpclattice.CfnAccessLogSubscription(self, \"${1:id}\", ",
            "        destinationArn=${2:str}, # Required",
            "        resourceIdentifier=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnAccessLogSubscription",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnAccessLogSubscription",
            "Attributes: ",
            "  attrResourceArn",
            "  attrResourceId",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-vpclattice-accesslogsubscription",
        "scope": "python"
    },
    "vpclattice.CfnAuthPolicy": {
        "body": [
            "vpclattice.CfnAuthPolicy(self, \"${1:id}\", ",
            "        policy=${2:dict}, # Required",
            "        resourceIdentifier=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnAuthPolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnAuthPolicy",
            "Attributes: ",
            "  attrState"
        ],
        "prefix": "l1-vpclattice-authpolicy",
        "scope": "python"
    },
    "vpclattice.CfnListener": {
        "body": [
            "vpclattice.CfnListener(self, \"${1:id}\", ",
            "        defaultAction={",
            "        },",
            "        name=${3:str},",
            "        port=${4:int},",
            "        protocol=${5:str}, # Required",
            "        serviceIdentifier=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnListener",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnListener",
            "Attributes: ",
            "  attrId",
            "  attrServiceArn",
            "  attrArn",
            "  attrServiceId"
        ],
        "prefix": "l1-vpclattice-listener",
        "scope": "python"
    },
    "vpclattice.CfnResourcePolicy": {
        "body": [
            "vpclattice.CfnResourcePolicy(self, \"${1:id}\", ",
            "        policy=${2:dict}, # Required",
            "        resourceArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnResourcePolicy"
        ],
        "prefix": "l1-vpclattice-resourcepolicy",
        "scope": "python"
    },
    "vpclattice.CfnRule": {
        "body": [
            "vpclattice.CfnRule(self, \"${1:id}\", ",
            "        action={",
            "        },",
            "        listenerIdentifier=${3:str},",
            "        match={",
            "        },",
            "        name=${5:str},",
            "        priority=${6:int}, # Required",
            "        serviceIdentifier=${7:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnRule",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-vpclattice-rule",
        "scope": "python"
    },
    "vpclattice.CfnService": {
        "body": [
            "vpclattice.CfnService(self, \"${1:id}\", ",
            "        authType=${2:str},",
            "        certificateArn=${3:str},",
            "        customDomainName=${4:str},",
            "        dnsEntry={",
            "            domainName=${5:str},",
            "            hostedZoneId=${6:str},",
            "        },",
            "        name=${6:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnService",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnService",
            "Attributes: ",
            "  attrStatus",
            "  attrLastUpdatedAt",
            "  attrCreatedAt",
            "  attrDnsEntry.HostedZoneId",
            "  attrId",
            "  attrArn",
            "  attrDnsEntry.DomainName"
        ],
        "prefix": "l1-vpclattice-service",
        "scope": "python"
    },
    "vpclattice.CfnServiceNetwork": {
        "body": [
            "vpclattice.CfnServiceNetwork(self, \"${1:id}\", ",
            "        authType=${2:str},",
            "        name=${3:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnServiceNetwork",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnServiceNetwork",
            "Attributes: ",
            "  attrLastUpdatedAt",
            "  attrCreatedAt",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-vpclattice-servicenetwork",
        "scope": "python"
    },
    "vpclattice.CfnServiceNetworkServiceAssociation": {
        "body": [
            "vpclattice.CfnServiceNetworkServiceAssociation(self, \"${1:id}\", ",
            "        dnsEntry={",
            "            domainName=${2:str},",
            "            hostedZoneId=${3:str},",
            "        },",
            "        serviceIdentifier=${3:str},",
            "        serviceNetworkIdentifier=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnServiceNetworkServiceAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnServiceNetworkServiceAssociation",
            "Attributes: ",
            "  attrStatus",
            "  attrServiceNetworkId",
            "  attrServiceName",
            "  attrCreatedAt",
            "  attrDnsEntry.HostedZoneId",
            "  attrServiceNetworkName",
            "  attrServiceArn",
            "  attrId",
            "  attrArn",
            "  attrDnsEntry.DomainName",
            "  attrServiceNetworkArn",
            "  attrServiceId"
        ],
        "prefix": "l1-vpclattice-servicenetworkserviceassociation",
        "scope": "python"
    },
    "vpclattice.CfnServiceNetworkVpcAssociation": {
        "body": [
            "vpclattice.CfnServiceNetworkVpcAssociation(self, \"${1:id}\", ",
            "        securityGroupIds=[],",
            "        serviceNetworkIdentifier=${3:str},",
            "        tags=[],",
            "        vpcIdentifier=${5:str},",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnServiceNetworkVpcAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnServiceNetworkVpcAssociation",
            "Attributes: ",
            "  attrStatus",
            "  attrVpcId",
            "  attrServiceNetworkId",
            "  attrCreatedAt",
            "  attrServiceNetworkName",
            "  attrId",
            "  attrArn",
            "  attrServiceNetworkArn"
        ],
        "prefix": "l1-vpclattice-servicenetworkvpcassociation",
        "scope": "python"
    },
    "vpclattice.CfnTargetGroup": {
        "body": [
            "vpclattice.CfnTargetGroup(self, \"${1:id}\", ",
            "        config={",
            "            ipAddressType=${3:str},",
            "            lambdaEventStructureVersion=${4:str},",
            "            port=${5:int},",
            "            protocol=${6:str},",
            "            protocolVersion=${7:str},",
            "            vpcIdentifier=${8:str},",
            "        },",
            "        name=${3:str},",
            "        tags=[],",
            "        targets=[],",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: vpclattice.CfnTargetGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-vpclattice.CfnTargetGroup",
            "Attributes: ",
            "  attrStatus",
            "  attrLastUpdatedAt",
            "  attrCreatedAt",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-vpclattice-targetgroup",
        "scope": "python"
    },
    "waf.CfnByteMatchSet": {
        "body": [
            "waf.CfnByteMatchSet(self, \"${1:id}\", ",
            "        byteMatchTuples=[],",
            "        name=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: waf.CfnByteMatchSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-waf.CfnByteMatchSet"
        ],
        "prefix": "l1-waf-bytematchset",
        "scope": "python"
    },
    "waf.CfnIPSet": {
        "body": [
            "waf.CfnIPSet(self, \"${1:id}\", ",
            "        iPSetDescriptors=[],",
            "        name=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: waf.CfnIPSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-waf.CfnIPSet"
        ],
        "prefix": "l1-waf-ipset",
        "scope": "python"
    },
    "waf.CfnRule": {
        "body": [
            "waf.CfnRule(self, \"${1:id}\", ",
            "        metricName=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        predicates=[],",
            ")"
        ],
        "description": [
            "Construct: waf.CfnRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-waf.CfnRule"
        ],
        "prefix": "l1-waf-rule",
        "scope": "python"
    },
    "waf.CfnSizeConstraintSet": {
        "body": [
            "waf.CfnSizeConstraintSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        sizeConstraints=[], # Required",
            ")"
        ],
        "description": [
            "Construct: waf.CfnSizeConstraintSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-waf.CfnSizeConstraintSet"
        ],
        "prefix": "l1-waf-sizeconstraintset",
        "scope": "python"
    },
    "waf.CfnSqlInjectionMatchSet": {
        "body": [
            "waf.CfnSqlInjectionMatchSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        sqlInjectionMatchTuples=[],",
            ")"
        ],
        "description": [
            "Construct: waf.CfnSqlInjectionMatchSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-waf.CfnSqlInjectionMatchSet"
        ],
        "prefix": "l1-waf-sqlinjectionmatchset",
        "scope": "python"
    },
    "waf.CfnWebACL": {
        "body": [
            "waf.CfnWebACL(self, \"${1:id}\", ",
            "        defaultAction={",
            "            type=${2:str},",
            "        },",
            "        metricName=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        rules=[],",
            ")"
        ],
        "description": [
            "Construct: waf.CfnWebACL",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-waf.CfnWebACL"
        ],
        "prefix": "l1-waf-webacl",
        "scope": "python"
    },
    "waf.CfnXssMatchSet": {
        "body": [
            "waf.CfnXssMatchSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        xssMatchTuples=[], # Required",
            ")"
        ],
        "description": [
            "Construct: waf.CfnXssMatchSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-waf.CfnXssMatchSet"
        ],
        "prefix": "l1-waf-xssmatchset",
        "scope": "python"
    },
    "wafregional.CfnByteMatchSet": {
        "body": [
            "wafregional.CfnByteMatchSet(self, \"${1:id}\", ",
            "        byteMatchTuples=[],",
            "        name=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnByteMatchSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnByteMatchSet"
        ],
        "prefix": "l1-wafregional-bytematchset",
        "scope": "python"
    },
    "wafregional.CfnGeoMatchSet": {
        "body": [
            "wafregional.CfnGeoMatchSet(self, \"${1:id}\", ",
            "        geoMatchConstraints=[],",
            "        name=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnGeoMatchSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnGeoMatchSet"
        ],
        "prefix": "l1-wafregional-geomatchset",
        "scope": "python"
    },
    "wafregional.CfnIPSet": {
        "body": [
            "wafregional.CfnIPSet(self, \"${1:id}\", ",
            "        iPSetDescriptors=[],",
            "        name=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnIPSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnIPSet"
        ],
        "prefix": "l1-wafregional-ipset",
        "scope": "python"
    },
    "wafregional.CfnRateBasedRule": {
        "body": [
            "wafregional.CfnRateBasedRule(self, \"${1:id}\", ",
            "        matchPredicates=[],",
            "        metricName=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        rateKey=${5:str}, # Required",
            "        rateLimit=${6:int}, # Required",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnRateBasedRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnRateBasedRule"
        ],
        "prefix": "l1-wafregional-ratebasedrule",
        "scope": "python"
    },
    "wafregional.CfnRegexPatternSet": {
        "body": [
            "wafregional.CfnRegexPatternSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        regexPatternStrings=[], # Required",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnRegexPatternSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnRegexPatternSet"
        ],
        "prefix": "l1-wafregional-regexpatternset",
        "scope": "python"
    },
    "wafregional.CfnRule": {
        "body": [
            "wafregional.CfnRule(self, \"${1:id}\", ",
            "        metricName=${2:str}, # Required",
            "        name=${3:str}, # Required",
            "        predicates=[],",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnRule"
        ],
        "prefix": "l1-wafregional-rule",
        "scope": "python"
    },
    "wafregional.CfnSizeConstraintSet": {
        "body": [
            "wafregional.CfnSizeConstraintSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        sizeConstraints=[],",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnSizeConstraintSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnSizeConstraintSet"
        ],
        "prefix": "l1-wafregional-sizeconstraintset",
        "scope": "python"
    },
    "wafregional.CfnSqlInjectionMatchSet": {
        "body": [
            "wafregional.CfnSqlInjectionMatchSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        sqlInjectionMatchTuples=[],",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnSqlInjectionMatchSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnSqlInjectionMatchSet"
        ],
        "prefix": "l1-wafregional-sqlinjectionmatchset",
        "scope": "python"
    },
    "wafregional.CfnWebACL": {
        "body": [
            "wafregional.CfnWebACL(self, \"${1:id}\", ",
            "        defaultAction={",
            "            type=${2:str},",
            "        },",
            "        metricName=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        rules=[],",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnWebACL",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnWebACL"
        ],
        "prefix": "l1-wafregional-webacl",
        "scope": "python"
    },
    "wafregional.CfnWebACLAssociation": {
        "body": [
            "wafregional.CfnWebACLAssociation(self, \"${1:id}\", ",
            "        resourceArn=${2:str}, # Required",
            "        webACLId=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnWebACLAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnWebACLAssociation"
        ],
        "prefix": "l1-wafregional-webaclassociation",
        "scope": "python"
    },
    "wafregional.CfnXssMatchSet": {
        "body": [
            "wafregional.CfnXssMatchSet(self, \"${1:id}\", ",
            "        name=${2:str}, # Required",
            "        xssMatchTuples=[],",
            ")"
        ],
        "description": [
            "Construct: wafregional.CfnXssMatchSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafregional.CfnXssMatchSet"
        ],
        "prefix": "l1-wafregional-xssmatchset",
        "scope": "python"
    },
    "wafv2.CfnIPSet": {
        "body": [
            "wafv2.CfnIPSet(self, \"${1:id}\", ",
            "        addresses=[], # Required",
            "        description=${3:str},",
            "        iPAddressVersion=${4:str}, # Required",
            "        name=${5:str},",
            "        scope=${6:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: wafv2.CfnIPSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafv2.CfnIPSet",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-wafv2-ipset",
        "scope": "python"
    },
    "wafv2.CfnLoggingConfiguration": {
        "body": [
            "wafv2.CfnLoggingConfiguration(self, \"${1:id}\", ",
            "        logDestinationConfigs=[], # Required",
            "        loggingFilter={",
            "            defaultBehavior=${3:str},",
            "            filters=[],",
            "        },",
            "        redactedFields=[],",
            "        resourceArn=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: wafv2.CfnLoggingConfiguration",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafv2.CfnLoggingConfiguration",
            "Attributes: ",
            "  attrManagedByFirewallManager"
        ],
        "prefix": "l1-wafv2-loggingconfiguration",
        "scope": "python"
    },
    "wafv2.CfnRegexPatternSet": {
        "body": [
            "wafv2.CfnRegexPatternSet(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str},",
            "        regularExpressionList=[], # Required",
            "        scope=${5:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: wafv2.CfnRegexPatternSet",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafv2.CfnRegexPatternSet",
            "Attributes: ",
            "  attrId",
            "  attrArn"
        ],
        "prefix": "l1-wafv2-regexpatternset",
        "scope": "python"
    },
    "wafv2.CfnRuleGroup": {
        "body": [
            "wafv2.CfnRuleGroup(self, \"${1:id}\", ",
            "        availableLabels=[],",
            "        capacity=${3:int}, # Required",
            "        consumedLabels=[],",
            "        customResponseBodies={",
            "        },",
            "        description=${6:str},",
            "        name=${7:str},",
            "        rules=[],",
            "        scope=${9:str}, # Required",
            "        tags=[],",
            "        visibilityConfig={",
            "            cloudWatchMetricsEnabled=${11:bool},",
            "            metricName=${12:str},",
            "            sampledRequestsEnabled=${13:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: wafv2.CfnRuleGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafv2.CfnRuleGroup",
            "Attributes: ",
            "  attrId",
            "  attrArn",
            "  attrLabelNamespace"
        ],
        "prefix": "l1-wafv2-rulegroup",
        "scope": "python"
    },
    "wafv2.CfnWebACL": {
        "body": [
            "wafv2.CfnWebACL(self, \"${1:id}\", ",
            "        associationConfig={",
            "        },",
            "        captchaConfig={",
            "        },",
            "        challengeConfig={",
            "        },",
            "        customResponseBodies={",
            "        },",
            "        defaultAction={",
            "        },",
            "        description=${7:str},",
            "        name=${8:str},",
            "        rules=[],",
            "        scope=${10:str}, # Required",
            "        tags=[],",
            "        tokenDomains=[],",
            "        visibilityConfig={",
            "            cloudWatchMetricsEnabled=${13:bool},",
            "            metricName=${14:str},",
            "            sampledRequestsEnabled=${15:bool},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: wafv2.CfnWebACL",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafv2.CfnWebACL",
            "Attributes: ",
            "  attrCapacity",
            "  attrId",
            "  attrArn",
            "  attrLabelNamespace"
        ],
        "prefix": "l1-wafv2-webacl",
        "scope": "python"
    },
    "wafv2.CfnWebACLAssociation": {
        "body": [
            "wafv2.CfnWebACLAssociation(self, \"${1:id}\", ",
            "        resourceArn=${2:str}, # Required",
            "        webACLArn=${3:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: wafv2.CfnWebACLAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wafv2.CfnWebACLAssociation"
        ],
        "prefix": "l1-wafv2-webaclassociation",
        "scope": "python"
    },
    "wisdom.CfnAssistant": {
        "body": [
            "wisdom.CfnAssistant(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        name=${3:str}, # Required",
            "        serverSideEncryptionConfiguration={",
            "            kmsKeyId=${4:str},",
            "        },",
            "        tags=[],",
            "        type=${6:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: wisdom.CfnAssistant",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wisdom.CfnAssistant",
            "Attributes: ",
            "  attrAssistantArn",
            "  attrAssistantId"
        ],
        "prefix": "l1-wisdom-assistant",
        "scope": "python"
    },
    "wisdom.CfnAssistantAssociation": {
        "body": [
            "wisdom.CfnAssistantAssociation(self, \"${1:id}\", ",
            "        assistantId=${2:str}, # Required",
            "        association={",
            "            knowledgeBaseId=${3:str},",
            "        },",
            "        associationType=${4:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: wisdom.CfnAssistantAssociation",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wisdom.CfnAssistantAssociation",
            "Attributes: ",
            "  attrAssistantAssociationArn",
            "  attrAssistantArn",
            "  attrAssistantAssociationId"
        ],
        "prefix": "l1-wisdom-assistantassociation",
        "scope": "python"
    },
    "wisdom.CfnKnowledgeBase": {
        "body": [
            "wisdom.CfnKnowledgeBase(self, \"${1:id}\", ",
            "        description=${2:str},",
            "        knowledgeBaseType=${3:str}, # Required",
            "        name=${4:str}, # Required",
            "        renderingConfiguration={",
            "            templateUri=${5:str},",
            "        },",
            "        serverSideEncryptionConfiguration={",
            "            kmsKeyId=${6:str},",
            "        },",
            "        sourceConfiguration={",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: wisdom.CfnKnowledgeBase",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-wisdom.CfnKnowledgeBase",
            "Attributes: ",
            "  attrKnowledgeBaseArn",
            "  attrKnowledgeBaseId"
        ],
        "prefix": "l1-wisdom-knowledgebase",
        "scope": "python"
    },
    "workspaces.CfnConnectionAlias": {
        "body": [
            "workspaces.CfnConnectionAlias(self, \"${1:id}\", ",
            "        connectionString=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: workspaces.CfnConnectionAlias",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspaces.CfnConnectionAlias",
            "Attributes: ",
            "  attrConnectionAliasState",
            "  attrAssociations",
            "  attrAliasId"
        ],
        "prefix": "l1-workspaces-connectionalias",
        "scope": "python"
    },
    "workspaces.CfnWorkspace": {
        "body": [
            "workspaces.CfnWorkspace(self, \"${1:id}\", ",
            "        bundleId=${2:str}, # Required",
            "        directoryId=${3:str}, # Required",
            "        rootVolumeEncryptionEnabled=${4:bool},",
            "        tags=[],",
            "        userName=${6:str}, # Required",
            "        userVolumeEncryptionEnabled=${7:bool},",
            "        volumeEncryptionKey=${8:str},",
            "        workspaceProperties={",
            "            computeTypeName=${9:str},",
            "            rootVolumeSizeGib=${10:int},",
            "            runningMode=${11:str},",
            "            runningModeAutoStopTimeoutInMinutes=${12:int},",
            "            userVolumeSizeGib=${13:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: workspaces.CfnWorkspace",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspaces.CfnWorkspace"
        ],
        "prefix": "l1-workspaces-workspace",
        "scope": "python"
    },
    "workspaces.CfnWorkspacesPool": {
        "body": [
            "workspaces.CfnWorkspacesPool(self, \"${1:id}\", ",
            "        applicationSettings={",
            "            settingsGroup=${2:str},",
            "            status=${3:str},",
            "        },",
            "        bundleId=${3:str}, # Required",
            "        capacity={",
            "            desiredUserSessions=${4:int},",
            "        },",
            "        description=${5:str},",
            "        directoryId=${6:str}, # Required",
            "        poolName=${7:str}, # Required",
            "        tags=[],",
            "        timeoutSettings={",
            "            disconnectTimeoutInSeconds=${9:int},",
            "            idleDisconnectTimeoutInSeconds=${10:int},",
            "            maxUserDurationInSeconds=${11:int},",
            "        },",
            ")"
        ],
        "description": [
            "Construct: workspaces.CfnWorkspacesPool",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspaces.CfnWorkspacesPool",
            "Attributes: ",
            "  attrPoolId",
            "  attrCreatedAt",
            "  attrPoolArn"
        ],
        "prefix": "l1-workspaces-workspacespool",
        "scope": "python"
    },
    "workspacesthinclient.CfnEnvironment": {
        "body": [
            "workspacesthinclient.CfnEnvironment(self, \"${1:id}\", ",
            "        desiredSoftwareSetId=${2:str},",
            "        desktopArn=${3:str}, # Required",
            "        desktopEndpoint=${4:str},",
            "        kmsKeyArn=${5:str},",
            "        maintenanceWindow={",
            "            applyTimeOf=${6:str},",
            "            daysOfTheWeek=[],",
            "            endTimeHour=${8:int},",
            "            endTimeMinute=${9:int},",
            "            startTimeHour=${10:int},",
            "            startTimeMinute=${11:int},",
            "            type=${12:str},",
            "        },",
            "        name=${7:str},",
            "        softwareSetUpdateMode=${8:str},",
            "        softwareSetUpdateSchedule=${9:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: workspacesthinclient.CfnEnvironment",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesthinclient.CfnEnvironment",
            "Attributes: ",
            "  attrDesktopType",
            "  attrRegisteredDevicesCount",
            "  attrPendingSoftwareSetId",
            "  attrCreatedAt",
            "  attrPendingSoftwareSetVersion",
            "  attrId",
            "  attrArn",
            "  attrUpdatedAt",
            "  attrActivationCode",
            "  attrSoftwareSetComplianceStatus"
        ],
        "prefix": "l1-workspacesthinclient-environment",
        "scope": "python"
    },
    "workspacesweb.CfnBrowserSettings": {
        "body": [
            "workspacesweb.CfnBrowserSettings(self, \"${1:id}\", ",
            "        additionalEncryptionContext={",
            "        },",
            "        browserPolicy=${3:str},",
            "        customerManagedKey=${4:str},",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnBrowserSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnBrowserSettings",
            "Attributes: ",
            "  attrAssociatedPortalArns",
            "  attrBrowserSettingsArn"
        ],
        "prefix": "l1-workspacesweb-browsersettings",
        "scope": "python"
    },
    "workspacesweb.CfnIdentityProvider": {
        "body": [
            "workspacesweb.CfnIdentityProvider(self, \"${1:id}\", ",
            "        identityProviderDetails={",
            "        },",
            "        identityProviderName=${3:str}, # Required",
            "        identityProviderType=${4:str}, # Required",
            "        portalArn=${5:str},",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnIdentityProvider",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnIdentityProvider",
            "Attributes: ",
            "  attrIdentityProviderArn"
        ],
        "prefix": "l1-workspacesweb-identityprovider",
        "scope": "python"
    },
    "workspacesweb.CfnIpAccessSettings": {
        "body": [
            "workspacesweb.CfnIpAccessSettings(self, \"${1:id}\", ",
            "        additionalEncryptionContext={",
            "        },",
            "        customerManagedKey=${3:str},",
            "        description=${4:str},",
            "        displayName=${5:str},",
            "        ipRules=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnIpAccessSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnIpAccessSettings",
            "Attributes: ",
            "  attrCreationDate",
            "  attrAssociatedPortalArns",
            "  attrIpAccessSettingsArn"
        ],
        "prefix": "l1-workspacesweb-ipaccesssettings",
        "scope": "python"
    },
    "workspacesweb.CfnNetworkSettings": {
        "body": [
            "workspacesweb.CfnNetworkSettings(self, \"${1:id}\", ",
            "        securityGroupIds=[], # Required",
            "        subnetIds=[], # Required",
            "        tags=[],",
            "        vpcId=${5:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnNetworkSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnNetworkSettings",
            "Attributes: ",
            "  attrAssociatedPortalArns",
            "  attrNetworkSettingsArn"
        ],
        "prefix": "l1-workspacesweb-networksettings",
        "scope": "python"
    },
    "workspacesweb.CfnPortal": {
        "body": [
            "workspacesweb.CfnPortal(self, \"${1:id}\", ",
            "        additionalEncryptionContext={",
            "        },",
            "        authenticationType=${3:str},",
            "        browserSettingsArn=${4:str},",
            "        customerManagedKey=${5:str},",
            "        displayName=${6:str},",
            "        instanceType=${7:str},",
            "        ipAccessSettingsArn=${8:str},",
            "        maxConcurrentSessions=${9:float},",
            "        networkSettingsArn=${10:str},",
            "        tags=[],",
            "        trustStoreArn=${12:str},",
            "        userAccessLoggingSettingsArn=${13:str},",
            "        userSettingsArn=${14:str},",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnPortal",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnPortal",
            "Attributes: ",
            "  attrCreationDate",
            "  attrBrowserType",
            "  attrServiceProviderSamlMetadata",
            "  attrStatusReason",
            "  attrPortalArn",
            "  attrPortalStatus",
            "  attrRendererType",
            "  attrPortalEndpoint"
        ],
        "prefix": "l1-workspacesweb-portal",
        "scope": "python"
    },
    "workspacesweb.CfnTrustStore": {
        "body": [
            "workspacesweb.CfnTrustStore(self, \"${1:id}\", ",
            "        certificateList=[], # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnTrustStore",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnTrustStore",
            "Attributes: ",
            "  attrAssociatedPortalArns",
            "  attrTrustStoreArn"
        ],
        "prefix": "l1-workspacesweb-truststore",
        "scope": "python"
    },
    "workspacesweb.CfnUserAccessLoggingSettings": {
        "body": [
            "workspacesweb.CfnUserAccessLoggingSettings(self, \"${1:id}\", ",
            "        kinesisStreamArn=${2:str}, # Required",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnUserAccessLoggingSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnUserAccessLoggingSettings",
            "Attributes: ",
            "  attrAssociatedPortalArns",
            "  attrUserAccessLoggingSettingsArn"
        ],
        "prefix": "l1-workspacesweb-useraccessloggingsettings",
        "scope": "python"
    },
    "workspacesweb.CfnUserSettings": {
        "body": [
            "workspacesweb.CfnUserSettings(self, \"${1:id}\", ",
            "        additionalEncryptionContext={",
            "        },",
            "        cookieSynchronizationConfiguration={",
            "            allowlist=[],",
            "            blocklist=[],",
            "        },",
            "        copyAllowed=${4:str}, # Required",
            "        customerManagedKey=${5:str},",
            "        disconnectTimeoutInMinutes=${6:float},",
            "        downloadAllowed=${7:str}, # Required",
            "        idleDisconnectTimeoutInMinutes=${8:float},",
            "        pasteAllowed=${9:str}, # Required",
            "        printAllowed=${10:str}, # Required",
            "        tags=[],",
            "        uploadAllowed=${12:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: workspacesweb.CfnUserSettings",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-workspacesweb.CfnUserSettings",
            "Attributes: ",
            "  attrAssociatedPortalArns",
            "  attrUserSettingsArn"
        ],
        "prefix": "l1-workspacesweb-usersettings",
        "scope": "python"
    },
    "xray.CfnGroup": {
        "body": [
            "xray.CfnGroup(self, \"${1:id}\", ",
            "        filterExpression=${2:str},",
            "        groupName=${3:str}, # Required",
            "        insightsConfiguration={",
            "            insightsEnabled=${4:bool},",
            "            notificationsEnabled=${5:bool},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: xray.CfnGroup",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-xray.CfnGroup",
            "Attributes: ",
            "  attrGroupARN"
        ],
        "prefix": "l1-xray-group",
        "scope": "python"
    },
    "xray.CfnResourcePolicy": {
        "body": [
            "xray.CfnResourcePolicy(self, \"${1:id}\", ",
            "        bypassPolicyLockoutCheck=${2:bool},",
            "        policyDocument=${3:str}, # Required",
            "        policyName=${4:str}, # Required",
            ")"
        ],
        "description": [
            "Construct: xray.CfnResourcePolicy",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-xray.CfnResourcePolicy"
        ],
        "prefix": "l1-xray-resourcepolicy",
        "scope": "python"
    },
    "xray.CfnSamplingRule": {
        "body": [
            "xray.CfnSamplingRule(self, \"${1:id}\", ",
            "        samplingRule={",
            "            fixedRate=${3:float},",
            "            hTTPMethod=${4:str},",
            "            host=${5:str},",
            "            priority=${6:int},",
            "            reservoirSize=${7:int},",
            "            resourceARN=${8:str},",
            "            ruleARN=${9:str},",
            "            ruleName=${10:str},",
            "            serviceName=${11:str},",
            "            serviceType=${12:str},",
            "            uRLPath=${13:str},",
            "            version=${14:int},",
            "        },",
            "        tags=[],",
            ")"
        ],
        "description": [
            "Construct: xray.CfnSamplingRule",
            "Documentation: https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-xray.CfnSamplingRule",
            "Attributes: ",
            "  attrRuleARN"
        ],
        "prefix": "l1-xray-samplingrule",
        "scope": "python"
    }
}